{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0","program":"/home/jtdinsmo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","safe_arch","--edition=2018","/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=a203e5c29419c62d","-C","extra-filename=-a203e5c29419c62d","--out-dir","/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps","-L","dependency=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps","--extern","bytemuck=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libbytemuck-c782bb56d59ffbf7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/jtdinsmo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libsafe_arch-a203e5c29419c62d.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[1813307491341677036,0]},"crate_root":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src","external_crates":[{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17664387582334346964,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15777239735188030211,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6931118634603707789,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[5193770890161118309,0]}}],"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":92}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":13989,"byte_end":14042,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14043,"byte_end":14046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14047,"byte_end":14126,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14127,"byte_end":14200,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14201,"byte_end":14269,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14270,"byte_end":14286,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14287,"byte_end":14318,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14319,"byte_end":14322,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14323,"byte_end":14335,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14336,"byte_end":14414,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14415,"byte_end":14481,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14482,"byte_end":14550,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14551,"byte_end":14627,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14628,"byte_end":14671,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14672,"byte_end":14745,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14746,"byte_end":14826,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14827,"byte_end":14901,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14902,"byte_end":14977,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":14978,"byte_end":15055,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15056,"byte_end":15059,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15060,"byte_end":15077,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15078,"byte_end":15155,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15156,"byte_end":15230,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15231,"byte_end":15310,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15311,"byte_end":15367,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15368,"byte_end":15371,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15372,"byte_end":15442,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15443,"byte_end":15522,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15523,"byte_end":15603,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15604,"byte_end":15667,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15668,"byte_end":15671,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15672,"byte_end":15746,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15747,"byte_end":15827,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15828,"byte_end":15902,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15903,"byte_end":15981,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":15982,"byte_end":16044,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16045,"byte_end":16109,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16110,"byte_end":16113,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16114,"byte_end":16139,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16140,"byte_end":16216,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16217,"byte_end":16220,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16221,"byte_end":16260,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16261,"byte_end":16341,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16342,"byte_end":16422,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16423,"byte_end":16459,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16460,"byte_end":16501,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16502,"byte_end":16576,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16577,"byte_end":16654,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16655,"byte_end":16734,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16735,"byte_end":16794,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16795,"byte_end":16840,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16841,"byte_end":16912,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16913,"byte_end":16969,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":16970,"byte_end":17002,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17003,"byte_end":17082,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17083,"byte_end":17162,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17163,"byte_end":17220,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17221,"byte_end":17292,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17293,"byte_end":17360,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17361,"byte_end":17419,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17420,"byte_end":17498,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17499,"byte_end":17578,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17579,"byte_end":17659,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17660,"byte_end":17738,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17739,"byte_end":17784,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17785,"byte_end":17865,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17866,"byte_end":17942,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17943,"byte_end":17955,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":17956,"byte_end":18032,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18033,"byte_end":18111,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18112,"byte_end":18192,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18193,"byte_end":18212,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18213,"byte_end":18235,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18236,"byte_end":18313,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18314,"byte_end":18386,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18387,"byte_end":18467,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18468,"byte_end":18534,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18535,"byte_end":18612,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18613,"byte_end":18661,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18662,"byte_end":18740,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18741,"byte_end":18817,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18818,"byte_end":18897,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18898,"byte_end":18977,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":18978,"byte_end":19039,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19040,"byte_end":19111,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19112,"byte_end":19149,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19150,"byte_end":19229,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19230,"byte_end":19310,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19311,"byte_end":19343,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19344,"byte_end":19408,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19409,"byte_end":19474,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19475,"byte_end":19544,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19545,"byte_end":19622,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19623,"byte_end":19694,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19695,"byte_end":19772,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19773,"byte_end":19852,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19853,"byte_end":19927,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19928,"byte_end":19940,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":19941,"byte_end":20018,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20019,"byte_end":20098,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20099,"byte_end":20130,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20131,"byte_end":20206,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20207,"byte_end":20277,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20278,"byte_end":20358,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20359,"byte_end":20438,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20439,"byte_end":20515,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20516,"byte_end":20589,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20590,"byte_end":20670,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20671,"byte_end":20747,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20748,"byte_end":20826,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20827,"byte_end":20890,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20891,"byte_end":20967,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":20968,"byte_end":21045,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21046,"byte_end":21125,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21126,"byte_end":21188,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21189,"byte_end":21265,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21266,"byte_end":21282,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21283,"byte_end":21362,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21363,"byte_end":21398,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21399,"byte_end":21473,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21474,"byte_end":21527,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21528,"byte_end":21605,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21606,"byte_end":21686,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21687,"byte_end":21765,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21766,"byte_end":21831,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21832,"byte_end":21912,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21913,"byte_end":21991,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":21992,"byte_end":22047,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22048,"byte_end":22128,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22129,"byte_end":22185,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22186,"byte_end":22266,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22267,"byte_end":22342,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22343,"byte_end":22420,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22421,"byte_end":22498,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22499,"byte_end":22577,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22578,"byte_end":22645,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22646,"byte_end":22666,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22667,"byte_end":22747,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22748,"byte_end":22819,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22820,"byte_end":22899,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22900,"byte_end":22928,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22929,"byte_end":22955,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":22956,"byte_end":23012,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23013,"byte_end":23090,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23091,"byte_end":23169,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23170,"byte_end":23229,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23230,"byte_end":23252,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23253,"byte_end":23332,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23333,"byte_end":23413,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23414,"byte_end":23492,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23493,"byte_end":23511,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23512,"byte_end":23576,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23577,"byte_end":23654,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23655,"byte_end":23729,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23730,"byte_end":23769,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23770,"byte_end":23849,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23850,"byte_end":23930,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23931,"byte_end":23974,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":23975,"byte_end":24054,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24055,"byte_end":24135,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24136,"byte_end":24213,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24214,"byte_end":24293,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24294,"byte_end":24317,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24318,"byte_end":24398,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/naming_conventions.rs","byte_start":24399,"byte_end":24445,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841662,"byte_end":8841666,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841339,"byte_end":8841399,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841400,"byte_end":8841403,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841404,"byte_end":8841482,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841483,"byte_end":8841556,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841557,"byte_end":8841598,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841599,"byte_end":8841619,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841620,"byte_end":8841650,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841667,"byte_end":8841677,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842094,"byte_end":8842102,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841925,"byte_end":8841963,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841966,"byte_end":8841969,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841972,"byte_end":8842050,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842053,"byte_end":8842064,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842067,"byte_end":8842084,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842329,"byte_end":8842339,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842146,"byte_end":8842182,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842185,"byte_end":8842188,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842191,"byte_end":8842268,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842271,"byte_end":8842285,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842288,"byte_end":8842299,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842302,"byte_end":8842319,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842573,"byte_end":8842580,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842389,"byte_end":8842452,"line_start":47,"line_end":47,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842455,"byte_end":8842458,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842461,"byte_end":8842529,"line_start":49,"line_end":49,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842532,"byte_end":8842543,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842546,"byte_end":8842563,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842838,"byte_end":8842847,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842650,"byte_end":8842713,"line_start":56,"line_end":56,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842716,"byte_end":8842719,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842722,"byte_end":8842794,"line_start":58,"line_end":58,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842797,"byte_end":8842808,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842811,"byte_end":8842828,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847393,"byte_end":8847398,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847070,"byte_end":8847130,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847131,"byte_end":8847134,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847135,"byte_end":8847213,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847214,"byte_end":8847287,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847288,"byte_end":8847329,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847330,"byte_end":8847350,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847351,"byte_end":8847381,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":143},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847399,"byte_end":8847410,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847833,"byte_end":8847841,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847663,"byte_end":8847702,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847705,"byte_end":8847708,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847711,"byte_end":8847789,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847792,"byte_end":8847803,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847806,"byte_end":8847823,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848070,"byte_end":8848080,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847885,"byte_end":8847922,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847925,"byte_end":8847928,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847931,"byte_end":8848009,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848012,"byte_end":8848026,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848029,"byte_end":8848040,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848043,"byte_end":8848060,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848311,"byte_end":8848318,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848130,"byte_end":8848194,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848197,"byte_end":8848200,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848203,"byte_end":8848267,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848270,"byte_end":8848281,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848284,"byte_end":8848301,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848573,"byte_end":8848582,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848388,"byte_end":8848452,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848455,"byte_end":8848458,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848461,"byte_end":8848529,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848532,"byte_end":8848543,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848546,"byte_end":8848563,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854086,"byte_end":8854091,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853606,"byte_end":8853662,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853663,"byte_end":8853666,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853667,"byte_end":8853740,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853741,"byte_end":8853819,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853820,"byte_end":8853838,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853839,"byte_end":8853919,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853920,"byte_end":8853997,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8853998,"byte_end":8854022,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854023,"byte_end":8854043,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854044,"byte_end":8854074,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854092,"byte_end":8854103,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862290,"byte_end":8862294,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8861966,"byte_end":8862027,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862028,"byte_end":8862031,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862032,"byte_end":8862110,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862111,"byte_end":8862184,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862185,"byte_end":8862226,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862227,"byte_end":8862247,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862248,"byte_end":8862278,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862295,"byte_end":8862305,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862722,"byte_end":8862730,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862553,"byte_end":8862591,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862594,"byte_end":8862597,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862600,"byte_end":8862678,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862681,"byte_end":8862692,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862695,"byte_end":8862712,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862957,"byte_end":8862967,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862774,"byte_end":8862810,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862813,"byte_end":8862816,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862819,"byte_end":8862896,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862899,"byte_end":8862913,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862916,"byte_end":8862927,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862930,"byte_end":8862947,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863196,"byte_end":8863203,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863011,"byte_end":8863074,"line_start":45,"line_end":45,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863077,"byte_end":8863080,"line_start":46,"line_end":46,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863083,"byte_end":8863152,"line_start":47,"line_end":47,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863155,"byte_end":8863166,"line_start":48,"line_end":48,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863169,"byte_end":8863186,"line_start":49,"line_end":49,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863462,"byte_end":8863471,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863273,"byte_end":8863336,"line_start":54,"line_end":54,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863339,"byte_end":8863342,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863345,"byte_end":8863418,"line_start":56,"line_end":56,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863421,"byte_end":8863432,"line_start":57,"line_end":57,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863435,"byte_end":8863452,"line_start":58,"line_end":58,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869258,"byte_end":8869263,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8868934,"byte_end":8868995,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8868996,"byte_end":8868999,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869000,"byte_end":8869078,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869079,"byte_end":8869152,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869153,"byte_end":8869194,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869195,"byte_end":8869215,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869216,"byte_end":8869246,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":337},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869264,"byte_end":8869275,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869698,"byte_end":8869706,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869528,"byte_end":8869567,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869570,"byte_end":8869573,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869576,"byte_end":8869654,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869657,"byte_end":8869668,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869671,"byte_end":8869688,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869935,"byte_end":8869945,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869750,"byte_end":8869787,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869790,"byte_end":8869793,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869796,"byte_end":8869874,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869877,"byte_end":8869891,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869894,"byte_end":8869905,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869908,"byte_end":8869925,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870176,"byte_end":8870183,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869995,"byte_end":8870059,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870062,"byte_end":8870065,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870068,"byte_end":8870132,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870135,"byte_end":8870146,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870149,"byte_end":8870166,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870438,"byte_end":8870447,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870253,"byte_end":8870317,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870320,"byte_end":8870323,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870326,"byte_end":8870394,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870397,"byte_end":8870408,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870411,"byte_end":8870428,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875951,"byte_end":8875956,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875471,"byte_end":8875527,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875528,"byte_end":8875531,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875532,"byte_end":8875605,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875606,"byte_end":8875684,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875685,"byte_end":8875703,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875704,"byte_end":8875784,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875785,"byte_end":8875862,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875863,"byte_end":8875887,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875888,"byte_end":8875908,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875909,"byte_end":8875939,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8875957,"byte_end":8875968,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884108,"byte_end":8884116,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883768,"byte_end":8883789,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883790,"byte_end":8883797,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883798,"byte_end":8883821,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883822,"byte_end":8883873,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883874,"byte_end":8883925,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883926,"byte_end":8883964,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8883965,"byte_end":8884007,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884008,"byte_end":8884015,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884016,"byte_end":8884027,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884028,"byte_end":8884045,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884551,"byte_end":8884561,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884188,"byte_end":8884232,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884233,"byte_end":8884240,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884241,"byte_end":8884264,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884265,"byte_end":8884316,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884317,"byte_end":8884368,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884369,"byte_end":8884409,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884410,"byte_end":8884450,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884451,"byte_end":8884458,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884459,"byte_end":8884470,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884471,"byte_end":8884488,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884973,"byte_end":8884984,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884633,"byte_end":8884653,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884654,"byte_end":8884661,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884662,"byte_end":8884685,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884686,"byte_end":8884737,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884738,"byte_end":8884789,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884790,"byte_end":8884831,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884832,"byte_end":8884872,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884873,"byte_end":8884880,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884881,"byte_end":8884892,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8884893,"byte_end":8884910,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885402,"byte_end":8885416,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885056,"byte_end":8885079,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885080,"byte_end":8885087,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885088,"byte_end":8885111,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885112,"byte_end":8885163,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885164,"byte_end":8885215,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885216,"byte_end":8885260,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885261,"byte_end":8885301,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885302,"byte_end":8885309,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885310,"byte_end":8885321,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885322,"byte_end":8885339,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885864,"byte_end":8885880,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885491,"byte_end":8885513,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885514,"byte_end":8885517,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885518,"byte_end":8885534,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885535,"byte_end":8885542,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885543,"byte_end":8885566,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885567,"byte_end":8885618,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885619,"byte_end":8885670,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885671,"byte_end":8885716,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885717,"byte_end":8885763,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885764,"byte_end":8885771,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885772,"byte_end":8885783,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885784,"byte_end":8885801,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886359,"byte_end":8886377,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8885954,"byte_end":8885999,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886000,"byte_end":8886003,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886004,"byte_end":8886020,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886021,"byte_end":8886028,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886029,"byte_end":8886052,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886053,"byte_end":8886104,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886105,"byte_end":8886156,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886157,"byte_end":8886204,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886205,"byte_end":8886258,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886259,"byte_end":8886266,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886267,"byte_end":8886278,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886279,"byte_end":8886296,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886831,"byte_end":8886847,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886451,"byte_end":8886473,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886474,"byte_end":8886477,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886478,"byte_end":8886494,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886495,"byte_end":8886502,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886503,"byte_end":8886526,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886527,"byte_end":8886578,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886579,"byte_end":8886630,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886631,"byte_end":8886676,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886677,"byte_end":8886730,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886731,"byte_end":8886738,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886739,"byte_end":8886750,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886751,"byte_end":8886768,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887354,"byte_end":8887372,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886921,"byte_end":8886966,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886967,"byte_end":8886970,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886971,"byte_end":8886987,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886988,"byte_end":8886995,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8886996,"byte_end":8887019,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887020,"byte_end":8887071,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887072,"byte_end":8887123,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887124,"byte_end":8887171,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887172,"byte_end":8887253,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887254,"byte_end":8887261,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887262,"byte_end":8887273,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887274,"byte_end":8887291,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887818,"byte_end":8887834,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887446,"byte_end":8887467,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887468,"byte_end":8887471,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887472,"byte_end":8887488,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887489,"byte_end":8887496,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887497,"byte_end":8887520,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887521,"byte_end":8887572,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887573,"byte_end":8887624,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887625,"byte_end":8887670,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887671,"byte_end":8887717,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887718,"byte_end":8887725,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887726,"byte_end":8887737,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887738,"byte_end":8887755,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888340,"byte_end":8888358,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887908,"byte_end":8887952,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887953,"byte_end":8887956,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887957,"byte_end":8887973,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887974,"byte_end":8887981,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8887982,"byte_end":8888005,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888006,"byte_end":8888057,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888058,"byte_end":8888109,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888110,"byte_end":8888157,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888158,"byte_end":8888239,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888240,"byte_end":8888247,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888248,"byte_end":8888259,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888260,"byte_end":8888277,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888805,"byte_end":8888821,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888432,"byte_end":8888454,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888455,"byte_end":8888458,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888459,"byte_end":8888475,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888476,"byte_end":8888483,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888484,"byte_end":8888507,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888508,"byte_end":8888559,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888560,"byte_end":8888611,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888612,"byte_end":8888657,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888658,"byte_end":8888704,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888705,"byte_end":8888712,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888713,"byte_end":8888724,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888725,"byte_end":8888742,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889328,"byte_end":8889346,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888895,"byte_end":8888940,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888941,"byte_end":8888944,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888945,"byte_end":8888961,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888962,"byte_end":8888969,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888970,"byte_end":8888993,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8888994,"byte_end":8889045,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889046,"byte_end":8889097,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889098,"byte_end":8889145,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889146,"byte_end":8889227,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889228,"byte_end":8889235,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889236,"byte_end":8889247,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889248,"byte_end":8889265,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889785,"byte_end":8889801,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889420,"byte_end":8889441,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889442,"byte_end":8889445,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889446,"byte_end":8889462,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889463,"byte_end":8889470,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889471,"byte_end":8889494,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889495,"byte_end":8889546,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889547,"byte_end":8889598,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889599,"byte_end":8889644,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889645,"byte_end":8889684,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889685,"byte_end":8889692,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889693,"byte_end":8889704,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889705,"byte_end":8889722,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890307,"byte_end":8890325,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889875,"byte_end":8889919,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889920,"byte_end":8889923,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889924,"byte_end":8889940,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889941,"byte_end":8889948,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889949,"byte_end":8889972,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8889973,"byte_end":8890024,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890025,"byte_end":8890076,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890077,"byte_end":8890124,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890125,"byte_end":8890206,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890207,"byte_end":8890214,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890215,"byte_end":8890226,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890227,"byte_end":8890244,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890773,"byte_end":8890790,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890399,"byte_end":8890421,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890422,"byte_end":8890425,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890426,"byte_end":8890442,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890443,"byte_end":8890450,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890451,"byte_end":8890474,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890475,"byte_end":8890526,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890527,"byte_end":8890578,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890579,"byte_end":8890625,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890626,"byte_end":8890672,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890673,"byte_end":8890680,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890681,"byte_end":8890692,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890693,"byte_end":8890710,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891264,"byte_end":8891283,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890865,"byte_end":8890910,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890911,"byte_end":8890914,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890915,"byte_end":8890931,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890932,"byte_end":8890939,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890940,"byte_end":8890963,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8890964,"byte_end":8891015,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891016,"byte_end":8891067,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891068,"byte_end":8891116,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891117,"byte_end":8891163,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891164,"byte_end":8891171,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891172,"byte_end":8891183,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891184,"byte_end":8891201,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891728,"byte_end":8891745,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891358,"byte_end":8891383,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891384,"byte_end":8891387,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891388,"byte_end":8891404,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891405,"byte_end":8891412,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891413,"byte_end":8891436,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891437,"byte_end":8891488,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891489,"byte_end":8891540,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891541,"byte_end":8891587,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891588,"byte_end":8891627,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891628,"byte_end":8891635,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891636,"byte_end":8891647,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891648,"byte_end":8891665,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892250,"byte_end":8892269,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891820,"byte_end":8891868,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891869,"byte_end":8891872,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891873,"byte_end":8891889,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891890,"byte_end":8891897,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891898,"byte_end":8891921,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891922,"byte_end":8891973,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8891974,"byte_end":8892025,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892026,"byte_end":8892074,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892075,"byte_end":8892149,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892150,"byte_end":8892157,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892158,"byte_end":8892169,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892170,"byte_end":8892187,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892720,"byte_end":8892737,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892344,"byte_end":8892368,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892369,"byte_end":8892372,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892373,"byte_end":8892389,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892390,"byte_end":8892397,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892398,"byte_end":8892421,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892422,"byte_end":8892473,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892474,"byte_end":8892525,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892526,"byte_end":8892572,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892573,"byte_end":8892619,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892620,"byte_end":8892627,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892628,"byte_end":8892639,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892640,"byte_end":8892657,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893241,"byte_end":8893260,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892812,"byte_end":8892859,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892860,"byte_end":8892863,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892864,"byte_end":8892880,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892881,"byte_end":8892888,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892889,"byte_end":8892912,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892913,"byte_end":8892964,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8892965,"byte_end":8893016,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893017,"byte_end":8893065,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893066,"byte_end":8893140,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893141,"byte_end":8893148,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893149,"byte_end":8893160,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893161,"byte_end":8893178,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893712,"byte_end":8893729,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893335,"byte_end":8893360,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893361,"byte_end":8893364,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893365,"byte_end":8893381,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893382,"byte_end":8893389,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893390,"byte_end":8893413,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893414,"byte_end":8893465,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893466,"byte_end":8893517,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893518,"byte_end":8893564,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893565,"byte_end":8893611,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893612,"byte_end":8893619,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893620,"byte_end":8893631,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893632,"byte_end":8893649,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894234,"byte_end":8894253,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893804,"byte_end":8893852,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893853,"byte_end":8893856,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893857,"byte_end":8893873,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893874,"byte_end":8893881,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893882,"byte_end":8893905,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893906,"byte_end":8893957,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8893958,"byte_end":8894009,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894010,"byte_end":8894058,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894059,"byte_end":8894133,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894134,"byte_end":8894141,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894142,"byte_end":8894153,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894154,"byte_end":8894171,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894711,"byte_end":8894728,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894328,"byte_end":8894352,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894353,"byte_end":8894356,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894357,"byte_end":8894373,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894374,"byte_end":8894381,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894382,"byte_end":8894405,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894406,"byte_end":8894457,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894458,"byte_end":8894509,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894510,"byte_end":8894556,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894557,"byte_end":8894610,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894611,"byte_end":8894618,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894619,"byte_end":8894630,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894631,"byte_end":8894648,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895232,"byte_end":8895251,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894803,"byte_end":8894850,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894851,"byte_end":8894854,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894855,"byte_end":8894871,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894872,"byte_end":8894879,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894880,"byte_end":8894903,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894904,"byte_end":8894955,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8894956,"byte_end":8895007,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895008,"byte_end":8895056,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895057,"byte_end":8895131,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895132,"byte_end":8895139,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895140,"byte_end":8895151,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895152,"byte_end":8895169,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895740,"byte_end":8895761,"line_start":418,"line_end":418,"column_start":8,"column_end":29},"name":"cmp_ordered_mask_m128","qualname":"::x86_x64::sse::cmp_ordered_mask_m128","value":"pub fn cmp_ordered_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895326,"byte_end":8895371,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895372,"byte_end":8895375,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895376,"byte_end":8895392,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895393,"byte_end":8895400,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895401,"byte_end":8895424,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895425,"byte_end":8895486,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895487,"byte_end":8895548,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordered_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895549,"byte_end":8895599,"line_start":412,"line_end":412,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895600,"byte_end":8895639,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895640,"byte_end":8895647,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895648,"byte_end":8895659,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895660,"byte_end":8895677,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896312,"byte_end":8896335,"line_start":435,"line_end":435,"column_start":8,"column_end":31},"name":"cmp_ordered_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordered_mask_m128_s","value":"pub fn cmp_ordered_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895836,"byte_end":8895904,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895905,"byte_end":8895908,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895909,"byte_end":8895925,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895926,"byte_end":8895933,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895934,"byte_end":8895957,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8895958,"byte_end":8896009,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896010,"byte_end":8896076,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordered_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896077,"byte_end":8896129,"line_start":429,"line_end":429,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896130,"byte_end":8896211,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896212,"byte_end":8896219,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896220,"byte_end":8896231,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896232,"byte_end":8896249,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896830,"byte_end":8896849,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896410,"byte_end":8896449,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896450,"byte_end":8896453,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896454,"byte_end":8896470,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896471,"byte_end":8896478,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896479,"byte_end":8896502,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896503,"byte_end":8896564,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896565,"byte_end":8896626,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896627,"byte_end":8896675,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896676,"byte_end":8896729,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896730,"byte_end":8896737,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896738,"byte_end":8896749,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896750,"byte_end":8896767,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897387,"byte_end":8897408,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896926,"byte_end":8896988,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896989,"byte_end":8896992,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8896993,"byte_end":8897009,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897010,"byte_end":8897017,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897018,"byte_end":8897041,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897042,"byte_end":8897093,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897094,"byte_end":8897160,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897161,"byte_end":8897211,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897212,"byte_end":8897286,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897287,"byte_end":8897294,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897295,"byte_end":8897306,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897307,"byte_end":8897324,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897814,"byte_end":8897831,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897485,"byte_end":8897507,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897508,"byte_end":8897511,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897512,"byte_end":8897529,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897530,"byte_end":8897537,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897538,"byte_end":8897561,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897562,"byte_end":8897613,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897614,"byte_end":8897665,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897666,"byte_end":8897713,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897714,"byte_end":8897721,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897722,"byte_end":8897733,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897734,"byte_end":8897751,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898244,"byte_end":8898261,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897899,"byte_end":8897937,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897938,"byte_end":8897941,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897942,"byte_end":8897959,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897960,"byte_end":8897967,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897968,"byte_end":8897991,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8897992,"byte_end":8898043,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898044,"byte_end":8898095,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898096,"byte_end":8898143,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898144,"byte_end":8898151,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898152,"byte_end":8898163,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898164,"byte_end":8898181,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898662,"byte_end":8898679,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898329,"byte_end":8898355,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898356,"byte_end":8898359,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898360,"byte_end":8898377,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898378,"byte_end":8898385,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898386,"byte_end":8898409,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898410,"byte_end":8898461,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898462,"byte_end":8898513,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898514,"byte_end":8898561,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898562,"byte_end":8898569,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898570,"byte_end":8898581,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898582,"byte_end":8898599,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899089,"byte_end":8899106,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898747,"byte_end":8898782,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898783,"byte_end":8898786,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898787,"byte_end":8898804,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898805,"byte_end":8898812,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898813,"byte_end":8898836,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898837,"byte_end":8898888,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898889,"byte_end":8898940,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898941,"byte_end":8898988,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898989,"byte_end":8898996,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8898997,"byte_end":8899008,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899009,"byte_end":8899026,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899504,"byte_end":8899521,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899174,"byte_end":8899197,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899198,"byte_end":8899201,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899202,"byte_end":8899219,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899220,"byte_end":8899227,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899228,"byte_end":8899251,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899252,"byte_end":8899303,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899304,"byte_end":8899355,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899356,"byte_end":8899403,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899404,"byte_end":8899411,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899412,"byte_end":8899423,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899424,"byte_end":8899441,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899923,"byte_end":8899941,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899589,"byte_end":8899615,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899616,"byte_end":8899619,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899620,"byte_end":8899637,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899638,"byte_end":8899645,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899646,"byte_end":8899669,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899670,"byte_end":8899721,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899722,"byte_end":8899773,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899774,"byte_end":8899822,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899823,"byte_end":8899830,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899831,"byte_end":8899842,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8899843,"byte_end":8899860,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900442,"byte_end":8900468,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900010,"byte_end":8900075,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900076,"byte_end":8900083,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900084,"byte_end":8900107,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900108,"byte_end":8900159,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900160,"byte_end":8900220,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900221,"byte_end":8900261,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900262,"byte_end":8900269,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900270,"byte_end":8900309,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900310,"byte_end":8900349,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900350,"byte_end":8900361,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8900362,"byte_end":8900379,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901379,"byte_end":8901398,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901096,"byte_end":8901147,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901148,"byte_end":8901155,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901156,"byte_end":8901179,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901180,"byte_end":8901231,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901232,"byte_end":8901278,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901279,"byte_end":8901286,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901287,"byte_end":8901298,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901299,"byte_end":8901316,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901755,"byte_end":8901774,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901452,"byte_end":8901523,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901524,"byte_end":8901531,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901532,"byte_end":8901555,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901556,"byte_end":8901607,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901608,"byte_end":8901654,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901655,"byte_end":8901662,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901663,"byte_end":8901674,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8901675,"byte_end":8901692,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902574,"byte_end":8902582,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902231,"byte_end":8902252,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902253,"byte_end":8902260,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902261,"byte_end":8902284,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902285,"byte_end":8902340,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902341,"byte_end":8902393,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902394,"byte_end":8902432,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902433,"byte_end":8902473,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902474,"byte_end":8902481,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902482,"byte_end":8902493,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902494,"byte_end":8902511,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903025,"byte_end":8903035,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902654,"byte_end":8902698,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902699,"byte_end":8902706,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902707,"byte_end":8902730,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902731,"byte_end":8902786,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902787,"byte_end":8902839,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902840,"byte_end":8902880,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902881,"byte_end":8902924,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902925,"byte_end":8902932,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902933,"byte_end":8902944,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8902945,"byte_end":8902962,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903405,"byte_end":8903414,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903107,"byte_end":8903147,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903148,"byte_end":8903155,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903156,"byte_end":8903179,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903180,"byte_end":8903235,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903236,"byte_end":8903262,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903263,"byte_end":8903304,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903305,"byte_end":8903312,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903313,"byte_end":8903324,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903325,"byte_end":8903342,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903871,"byte_end":8903890,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903501,"byte_end":8903560,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903561,"byte_end":8903568,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903569,"byte_end":8903592,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903593,"byte_end":8903609,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903610,"byte_end":8903646,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903647,"byte_end":8903725,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903726,"byte_end":8903733,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903734,"byte_end":8903745,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903746,"byte_end":8903763,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8903764,"byte_end":8903808,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904379,"byte_end":8904394,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904008,"byte_end":8904072,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904073,"byte_end":8904080,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904081,"byte_end":8904104,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904105,"byte_end":8904121,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904122,"byte_end":8904154,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904155,"byte_end":8904233,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904234,"byte_end":8904241,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904242,"byte_end":8904253,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904254,"byte_end":8904271,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904272,"byte_end":8904316,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904818,"byte_end":8904835,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904451,"byte_end":8904511,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904512,"byte_end":8904519,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904520,"byte_end":8904543,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904544,"byte_end":8904599,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904600,"byte_end":8904634,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904635,"byte_end":8904717,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904718,"byte_end":8904725,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904726,"byte_end":8904737,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904738,"byte_end":8904755,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905408,"byte_end":8905427,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904923,"byte_end":8904963,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904964,"byte_end":8904967,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8904968,"byte_end":8905046,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905047,"byte_end":8905127,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905128,"byte_end":8905140,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905141,"byte_end":8905148,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905149,"byte_end":8905172,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905173,"byte_end":8905210,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905211,"byte_end":8905247,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905248,"byte_end":8905307,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905308,"byte_end":8905315,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905316,"byte_end":8905327,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905328,"byte_end":8905345,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905867,"byte_end":8905875,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905523,"byte_end":8905548,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905549,"byte_end":8905556,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905557,"byte_end":8905580,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905581,"byte_end":8905633,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905634,"byte_end":8905685,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905686,"byte_end":8905724,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905725,"byte_end":8905766,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905767,"byte_end":8905774,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905775,"byte_end":8905786,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905787,"byte_end":8905804,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906316,"byte_end":8906326,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905947,"byte_end":8905995,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8905996,"byte_end":8906003,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906004,"byte_end":8906027,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906028,"byte_end":8906080,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906081,"byte_end":8906132,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906133,"byte_end":8906173,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906174,"byte_end":8906215,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906216,"byte_end":8906223,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906224,"byte_end":8906235,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906236,"byte_end":8906253,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906741,"byte_end":8906749,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906398,"byte_end":8906423,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906424,"byte_end":8906431,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906432,"byte_end":8906455,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906456,"byte_end":8906508,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906509,"byte_end":8906560,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906561,"byte_end":8906599,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906600,"byte_end":8906640,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906641,"byte_end":8906648,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906649,"byte_end":8906660,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906661,"byte_end":8906678,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907190,"byte_end":8907200,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906821,"byte_end":8906869,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906870,"byte_end":8906877,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906878,"byte_end":8906901,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906902,"byte_end":8906954,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8906955,"byte_end":8907006,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907007,"byte_end":8907047,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907048,"byte_end":8907089,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907090,"byte_end":8907097,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907098,"byte_end":8907109,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907110,"byte_end":8907127,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907653,"byte_end":8907664,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907272,"byte_end":8907331,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907332,"byte_end":8907339,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907340,"byte_end":8907363,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907364,"byte_end":8907416,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907417,"byte_end":8907468,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907469,"byte_end":8907510,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907511,"byte_end":8907552,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907553,"byte_end":8907560,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907561,"byte_end":8907572,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907573,"byte_end":8907590,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908143,"byte_end":8908161,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907737,"byte_end":8907815,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907816,"byte_end":8907823,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907824,"byte_end":8907847,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907848,"byte_end":8907900,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907901,"byte_end":8907952,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8907953,"byte_end":8908001,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908002,"byte_end":8908042,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908043,"byte_end":8908050,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908051,"byte_end":8908062,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908063,"byte_end":8908080,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908643,"byte_end":8908661,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908236,"byte_end":8908314,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908315,"byte_end":8908322,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908323,"byte_end":8908346,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908347,"byte_end":8908399,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908400,"byte_end":8908451,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908452,"byte_end":8908500,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908501,"byte_end":8908542,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908543,"byte_end":8908550,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908551,"byte_end":8908562,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908563,"byte_end":8908580,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909089,"byte_end":8909103,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908736,"byte_end":8908774,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908775,"byte_end":8908778,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908779,"byte_end":8908842,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908843,"byte_end":8908850,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908851,"byte_end":8908874,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908875,"byte_end":8908930,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908931,"byte_end":8908961,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908962,"byte_end":8908988,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908989,"byte_end":8908996,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8908997,"byte_end":8909008,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909009,"byte_end":8909026,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909500,"byte_end":8909508,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909159,"byte_end":8909180,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909181,"byte_end":8909188,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909189,"byte_end":8909212,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909213,"byte_end":8909264,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909265,"byte_end":8909316,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909317,"byte_end":8909355,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909356,"byte_end":8909399,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909400,"byte_end":8909407,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909408,"byte_end":8909419,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909420,"byte_end":8909437,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909943,"byte_end":8909953,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909580,"byte_end":8909624,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909625,"byte_end":8909632,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909633,"byte_end":8909656,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909657,"byte_end":8909708,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909709,"byte_end":8909760,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909761,"byte_end":8909801,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909802,"byte_end":8909842,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909843,"byte_end":8909850,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909851,"byte_end":8909862,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8909863,"byte_end":8909880,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910364,"byte_end":8910374,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910025,"byte_end":8910045,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910046,"byte_end":8910053,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910054,"byte_end":8910077,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910078,"byte_end":8910129,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910130,"byte_end":8910181,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910182,"byte_end":8910222,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910223,"byte_end":8910263,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910264,"byte_end":8910271,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910272,"byte_end":8910283,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910284,"byte_end":8910301,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910831,"byte_end":8910846,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910445,"byte_end":8910482,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910483,"byte_end":8910490,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910491,"byte_end":8910514,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910515,"byte_end":8910566,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910567,"byte_end":8910609,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910610,"byte_end":8910653,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910654,"byte_end":8910673,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910674,"byte_end":8910724,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910725,"byte_end":8910730,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910731,"byte_end":8910738,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910739,"byte_end":8910750,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910751,"byte_end":8910768,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911312,"byte_end":8911329,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910904,"byte_end":8910964,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910965,"byte_end":8910972,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910973,"byte_end":8910996,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8910997,"byte_end":8911048,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911049,"byte_end":8911093,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911094,"byte_end":8911134,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911135,"byte_end":8911154,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911155,"byte_end":8911205,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911206,"byte_end":8911211,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911212,"byte_end":8911219,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911220,"byte_end":8911231,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911232,"byte_end":8911249,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911788,"byte_end":8911808,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911387,"byte_end":8911430,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911431,"byte_end":8911438,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911439,"byte_end":8911462,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911463,"byte_end":8911516,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911517,"byte_end":8911564,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911565,"byte_end":8911610,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911611,"byte_end":8911630,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911631,"byte_end":8911681,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911682,"byte_end":8911687,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911688,"byte_end":8911695,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911696,"byte_end":8911707,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911708,"byte_end":8911725,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912291,"byte_end":8912313,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911868,"byte_end":8911934,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911935,"byte_end":8911942,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911943,"byte_end":8911966,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8911967,"byte_end":8912020,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912021,"byte_end":8912070,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912071,"byte_end":8912113,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912114,"byte_end":8912133,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912134,"byte_end":8912184,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912185,"byte_end":8912190,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912191,"byte_end":8912198,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912199,"byte_end":8912210,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912211,"byte_end":8912228,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912705,"byte_end":8912713,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912373,"byte_end":8912434,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912435,"byte_end":8912442,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912443,"byte_end":8912466,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912467,"byte_end":8912519,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912520,"byte_end":8912582,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912583,"byte_end":8912604,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912605,"byte_end":8912612,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912613,"byte_end":8912624,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912625,"byte_end":8912642,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913142,"byte_end":8913152,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912823,"byte_end":8912884,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912885,"byte_end":8912892,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912893,"byte_end":8912916,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912917,"byte_end":8912956,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8912957,"byte_end":8913019,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913020,"byte_end":8913041,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913042,"byte_end":8913049,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913050,"byte_end":8913061,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913062,"byte_end":8913079,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913507,"byte_end":8913521,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913211,"byte_end":8913245,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913246,"byte_end":8913253,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913254,"byte_end":8913277,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913278,"byte_end":8913321,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913322,"byte_end":8913384,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913385,"byte_end":8913406,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913407,"byte_end":8913414,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913415,"byte_end":8913426,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913427,"byte_end":8913444,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913921,"byte_end":8913938,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913581,"byte_end":8913641,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913642,"byte_end":8913649,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913650,"byte_end":8913673,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913674,"byte_end":8913735,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913736,"byte_end":8913798,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913799,"byte_end":8913820,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913821,"byte_end":8913828,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913829,"byte_end":8913840,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8913841,"byte_end":8913858,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914280,"byte_end":8914291,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914049,"byte_end":8914068,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914069,"byte_end":8914076,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914077,"byte_end":8914100,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914101,"byte_end":8914138,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914139,"byte_end":8914179,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914180,"byte_end":8914187,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914188,"byte_end":8914199,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914200,"byte_end":8914217,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915585,"byte_end":8915609,"line_start":1081,"line_end":1081,"column_start":8,"column_end":32},"name":"shuffle_abi_f32_all_m128","qualname":"::x86_x64::sse::shuffle_abi_f32_all_m128","value":"pub fn shuffle_abi_f32_all_m128<const MASK: i32>(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f32` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f32` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914343,"byte_end":8914417,"line_start":1052,"line_end":1052,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914418,"byte_end":8914436,"line_start":1053,"line_end":1053,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914437,"byte_end":8914440,"line_start":1054,"line_end":1054,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914441,"byte_end":8914520,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914521,"byte_end":8914598,"line_start":1056,"line_end":1056,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914599,"byte_end":8914679,"line_start":1057,"line_end":1057,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914680,"byte_end":8914683,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914684,"byte_end":8914761,"line_start":1059,"line_end":1059,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914762,"byte_end":8914839,"line_start":1060,"line_end":1060,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f32_all_m128`] instead. You'll get much better performance.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914840,"byte_end":8914916,"line_start":1061,"line_end":1061,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914917,"byte_end":8914924,"line_start":1062,"line_end":1062,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914925,"byte_end":8914948,"line_start":1063,"line_end":1063,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8914949,"byte_end":8915000,"line_start":1064,"line_end":1064,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915001,"byte_end":8915052,"line_start":1065,"line_end":1065,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915053,"byte_end":8915059,"line_start":1066,"line_end":1066,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0>(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915060,"byte_end":8915119,"line_start":1067,"line_end":1067,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1.0, 1.0, 5.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915120,"byte_end":8915160,"line_start":1068,"line_end":1068,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915161,"byte_end":8915167,"line_start":1069,"line_end":1069,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b11_10_01_00>(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915168,"byte_end":8915239,"line_start":1070,"line_end":1070,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [1.0, 2.0, 7.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915240,"byte_end":8915280,"line_start":1071,"line_end":1071,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915281,"byte_end":8915287,"line_start":1072,"line_end":1072,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b00_10_10_01>(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915288,"byte_end":8915359,"line_start":1073,"line_end":1073,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [2.0, 3.0, 7.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915360,"byte_end":8915400,"line_start":1074,"line_end":1074,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915401,"byte_end":8915408,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_ps`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915409,"byte_end":8915448,"line_start":1076,"line_end":1076,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `shufps xmm, xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915449,"byte_end":8915492,"line_start":1077,"line_end":1077,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915493,"byte_end":8915504,"line_start":1078,"line_end":1078,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915505,"byte_end":8915522,"line_start":1079,"line_end":1079,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915996,"byte_end":8916005,"line_start":1095,"line_end":1095,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915708,"byte_end":8915731,"line_start":1085,"line_end":1085,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915732,"byte_end":8915739,"line_start":1086,"line_end":1086,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915740,"byte_end":8915763,"line_start":1087,"line_end":1087,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915764,"byte_end":8915817,"line_start":1088,"line_end":1088,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915818,"byte_end":8915854,"line_start":1089,"line_end":1089,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915855,"byte_end":8915895,"line_start":1090,"line_end":1090,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915896,"byte_end":8915903,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915904,"byte_end":8915915,"line_start":1092,"line_end":1092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8915916,"byte_end":8915933,"line_start":1093,"line_end":1093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916375,"byte_end":8916386,"line_start":1109,"line_end":1109,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916064,"byte_end":8916110,"line_start":1099,"line_end":1099,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916111,"byte_end":8916118,"line_start":1100,"line_end":1100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916119,"byte_end":8916142,"line_start":1101,"line_end":1101,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916143,"byte_end":8916194,"line_start":1102,"line_end":1102,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916195,"byte_end":8916233,"line_start":1103,"line_end":1103,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916234,"byte_end":8916274,"line_start":1104,"line_end":1104,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916275,"byte_end":8916282,"line_start":1105,"line_end":1105,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916283,"byte_end":8916294,"line_start":1106,"line_end":1106,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916295,"byte_end":8916312,"line_start":1107,"line_end":1107,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916795,"byte_end":8916805,"line_start":1124,"line_end":1124,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916445,"byte_end":8916489,"line_start":1113,"line_end":1113,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916490,"byte_end":8916497,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916498,"byte_end":8916521,"line_start":1115,"line_end":1115,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916522,"byte_end":8916577,"line_start":1116,"line_end":1116,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916578,"byte_end":8916608,"line_start":1117,"line_end":1117,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916609,"byte_end":8916635,"line_start":1118,"line_end":1118,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916636,"byte_end":8916661,"line_start":1119,"line_end":1119,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916662,"byte_end":8916706,"line_start":1120,"line_end":1120,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916707,"byte_end":8916714,"line_start":1121,"line_end":1121,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916715,"byte_end":8916732,"line_start":1122,"line_end":1122,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917198,"byte_end":8917210,"line_start":1138,"line_end":1138,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916893,"byte_end":8916946,"line_start":1128,"line_end":1128,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916947,"byte_end":8916954,"line_start":1129,"line_end":1129,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916955,"byte_end":8916978,"line_start":1130,"line_end":1130,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8916979,"byte_end":8917034,"line_start":1131,"line_end":1131,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917035,"byte_end":8917055,"line_start":1132,"line_end":1132,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917056,"byte_end":8917084,"line_start":1133,"line_end":1133,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917085,"byte_end":8917109,"line_start":1134,"line_end":1134,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917110,"byte_end":8917117,"line_start":1135,"line_end":1135,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917118,"byte_end":8917135,"line_start":1136,"line_end":1136,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917662,"byte_end":8917678,"line_start":1153,"line_end":1153,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917284,"byte_end":8917350,"line_start":1142,"line_end":1142,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917351,"byte_end":8917358,"line_start":1143,"line_end":1143,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917359,"byte_end":8917382,"line_start":1144,"line_end":1144,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917383,"byte_end":8917438,"line_start":1145,"line_end":1145,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917439,"byte_end":8917469,"line_start":1146,"line_end":1146,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917470,"byte_end":8917502,"line_start":1147,"line_end":1147,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917503,"byte_end":8917528,"line_start":1148,"line_end":1148,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917529,"byte_end":8917573,"line_start":1149,"line_end":1149,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917574,"byte_end":8917581,"line_start":1150,"line_end":1150,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917582,"byte_end":8917599,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918142,"byte_end":8918160,"line_start":1168,"line_end":1168,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917767,"byte_end":8917828,"line_start":1157,"line_end":1157,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917829,"byte_end":8917836,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917837,"byte_end":8917860,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917861,"byte_end":8917916,"line_start":1160,"line_end":1160,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917917,"byte_end":8917947,"line_start":1161,"line_end":1161,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917948,"byte_end":8917982,"line_start":1162,"line_end":1162,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8917983,"byte_end":8918008,"line_start":1163,"line_end":1163,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918009,"byte_end":8918053,"line_start":1164,"line_end":1164,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918054,"byte_end":8918061,"line_start":1165,"line_end":1165,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918062,"byte_end":8918079,"line_start":1166,"line_end":1166,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918755,"byte_end":8918775,"line_start":1186,"line_end":1186,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918249,"byte_end":8918293,"line_start":1172,"line_end":1172,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918294,"byte_end":8918297,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918298,"byte_end":8918376,"line_start":1174,"line_end":1174,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918377,"byte_end":8918457,"line_start":1175,"line_end":1175,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918458,"byte_end":8918470,"line_start":1176,"line_end":1176,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918471,"byte_end":8918478,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918479,"byte_end":8918502,"line_start":1178,"line_end":1178,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918503,"byte_end":8918558,"line_start":1179,"line_end":1179,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918559,"byte_end":8918584,"line_start":1180,"line_end":1180,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918585,"byte_end":8918621,"line_start":1181,"line_end":1181,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918622,"byte_end":8918666,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918667,"byte_end":8918674,"line_start":1183,"line_end":1183,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918675,"byte_end":8918692,"line_start":1184,"line_end":1184,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919198,"byte_end":8919206,"line_start":1201,"line_end":1201,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918856,"byte_end":8918877,"line_start":1190,"line_end":1190,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918878,"byte_end":8918885,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918886,"byte_end":8918909,"line_start":1192,"line_end":1192,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918910,"byte_end":8918961,"line_start":1193,"line_end":1193,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8918962,"byte_end":8919014,"line_start":1194,"line_end":1194,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919015,"byte_end":8919053,"line_start":1195,"line_end":1195,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919054,"byte_end":8919097,"line_start":1196,"line_end":1196,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919098,"byte_end":8919105,"line_start":1197,"line_end":1197,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919106,"byte_end":8919117,"line_start":1198,"line_end":1198,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919118,"byte_end":8919135,"line_start":1199,"line_end":1199,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919643,"byte_end":8919653,"line_start":1216,"line_end":1216,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919278,"byte_end":8919322,"line_start":1205,"line_end":1205,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919323,"byte_end":8919330,"line_start":1206,"line_end":1206,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919331,"byte_end":8919354,"line_start":1207,"line_end":1207,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919355,"byte_end":8919406,"line_start":1208,"line_end":1208,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919407,"byte_end":8919459,"line_start":1209,"line_end":1209,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919460,"byte_end":8919500,"line_start":1210,"line_end":1210,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919501,"byte_end":8919542,"line_start":1211,"line_end":1211,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919543,"byte_end":8919550,"line_start":1212,"line_end":1212,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919551,"byte_end":8919562,"line_start":1213,"line_end":1213,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919563,"byte_end":8919580,"line_start":1214,"line_end":1214,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920404,"byte_end":8920423,"line_start":1235,"line_end":1235,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919725,"byte_end":8919780,"line_start":1220,"line_end":1220,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919781,"byte_end":8919788,"line_start":1221,"line_end":1221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919789,"byte_end":8919812,"line_start":1222,"line_end":1222,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919813,"byte_end":8919868,"line_start":1223,"line_end":1223,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919869,"byte_end":8919924,"line_start":1224,"line_end":1224,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919925,"byte_end":8919983,"line_start":1225,"line_end":1225,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8919984,"byte_end":8920043,"line_start":1226,"line_end":1226,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920044,"byte_end":8920100,"line_start":1227,"line_end":1227,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920101,"byte_end":8920153,"line_start":1228,"line_end":1228,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920154,"byte_end":8920207,"line_start":1229,"line_end":1229,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920208,"byte_end":8920261,"line_start":1230,"line_end":1230,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920262,"byte_end":8920315,"line_start":1231,"line_end":1231,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920316,"byte_end":8920323,"line_start":1232,"line_end":1232,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920324,"byte_end":8920341,"line_start":1233,"line_end":1233,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920933,"byte_end":8920949,"line_start":1250,"line_end":1250,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920556,"byte_end":8920608,"line_start":1239,"line_end":1239,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920609,"byte_end":8920616,"line_start":1240,"line_end":1240,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920617,"byte_end":8920640,"line_start":1241,"line_end":1241,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920641,"byte_end":8920692,"line_start":1242,"line_end":1242,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920693,"byte_end":8920744,"line_start":1243,"line_end":1243,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920745,"byte_end":8920791,"line_start":1244,"line_end":1244,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920792,"byte_end":8920832,"line_start":1245,"line_end":1245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920833,"byte_end":8920840,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920841,"byte_end":8920852,"line_start":1247,"line_end":1247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8920853,"byte_end":8920870,"line_start":1248,"line_end":1248,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921401,"byte_end":8921416,"line_start":1265,"line_end":1265,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921026,"byte_end":8921077,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921078,"byte_end":8921085,"line_start":1255,"line_end":1255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921086,"byte_end":8921109,"line_start":1256,"line_end":1256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921110,"byte_end":8921161,"line_start":1257,"line_end":1257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921162,"byte_end":8921213,"line_start":1258,"line_end":1258,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921214,"byte_end":8921259,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921260,"byte_end":8921300,"line_start":1260,"line_end":1260,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921301,"byte_end":8921308,"line_start":1261,"line_end":1261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921309,"byte_end":8921320,"line_start":1262,"line_end":1262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921321,"byte_end":8921338,"line_start":1263,"line_end":1263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":570},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921833,"byte_end":8921844,"line_start":1280,"line_end":1280,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921493,"byte_end":8921513,"line_start":1269,"line_end":1269,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921514,"byte_end":8921521,"line_start":1270,"line_end":1270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921522,"byte_end":8921545,"line_start":1271,"line_end":1271,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921546,"byte_end":8921597,"line_start":1272,"line_end":1272,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921598,"byte_end":8921649,"line_start":1273,"line_end":1273,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921650,"byte_end":8921691,"line_start":1274,"line_end":1274,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921692,"byte_end":8921732,"line_start":1275,"line_end":1275,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921733,"byte_end":8921740,"line_start":1276,"line_end":1276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921741,"byte_end":8921752,"line_start":1277,"line_end":1277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8921753,"byte_end":8921770,"line_start":1278,"line_end":1278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927094,"byte_end":8927106,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926609,"byte_end":8926649,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926650,"byte_end":8926657,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926658,"byte_end":8926681,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926682,"byte_end":8926765,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926766,"byte_end":8926857,"line_start":9,"line_end":9,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926858,"byte_end":8926906,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926907,"byte_end":8926992,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8926993,"byte_end":8927000,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927001,"byte_end":8927012,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927013,"byte_end":8927030,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927584,"byte_end":8927597,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927184,"byte_end":8927225,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927226,"byte_end":8927233,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927234,"byte_end":8927257,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927258,"byte_end":8927316,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927317,"byte_end":8927378,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927379,"byte_end":8927428,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927429,"byte_end":8927482,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927483,"byte_end":8927490,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927491,"byte_end":8927502,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927503,"byte_end":8927520,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928014,"byte_end":8928027,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927676,"byte_end":8927717,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927718,"byte_end":8927725,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927726,"byte_end":8927749,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927750,"byte_end":8927788,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927789,"byte_end":8927827,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927828,"byte_end":8927877,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927878,"byte_end":8927912,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927913,"byte_end":8927920,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927921,"byte_end":8927932,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8927933,"byte_end":8927950,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928443,"byte_end":8928456,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928106,"byte_end":8928147,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928148,"byte_end":8928155,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928156,"byte_end":8928179,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928180,"byte_end":8928218,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928219,"byte_end":8928259,"line_start":54,"line_end":54,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928260,"byte_end":8928309,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928310,"byte_end":8928341,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928342,"byte_end":8928349,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928350,"byte_end":8928361,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928362,"byte_end":8928379,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928855,"byte_end":8928864,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928535,"byte_end":8928556,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928557,"byte_end":8928564,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928565,"byte_end":8928588,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928589,"byte_end":8928633,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928634,"byte_end":8928679,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928680,"byte_end":8928719,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928720,"byte_end":8928753,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928754,"byte_end":8928761,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928762,"byte_end":8928773,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928774,"byte_end":8928791,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929288,"byte_end":8929299,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928940,"byte_end":8928985,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928986,"byte_end":8928993,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8928994,"byte_end":8929017,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929018,"byte_end":8929062,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929063,"byte_end":8929110,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929111,"byte_end":8929152,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929153,"byte_end":8929186,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929187,"byte_end":8929194,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929195,"byte_end":8929206,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929207,"byte_end":8929224,"line_start":89,"line_end":89,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":894},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930022,"byte_end":8930045,"line_start":119,"line_end":119,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929375,"byte_end":8929426,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929427,"byte_end":8929434,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929435,"byte_end":8929458,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929459,"byte_end":8929484,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929485,"byte_end":8929530,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929531,"byte_end":8929566,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929567,"byte_end":8929574,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929575,"byte_end":8929600,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929601,"byte_end":8929649,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929650,"byte_end":8929690,"line_start":104,"line_end":104,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929691,"byte_end":8929698,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929699,"byte_end":8929758,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929759,"byte_end":8929774,"line_start":107,"line_end":107,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929775,"byte_end":8929783,"line_start":108,"line_end":108,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929784,"byte_end":8929791,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929792,"byte_end":8929844,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929845,"byte_end":8929888,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929889,"byte_end":8929896,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929897,"byte_end":8929903,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929904,"byte_end":8929911,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929912,"byte_end":8929923,"line_start":115,"line_end":115,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929924,"byte_end":8929941,"line_start":116,"line_end":116,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8929942,"byte_end":8929958,"line_start":117,"line_end":117,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930580,"byte_end":8930604,"line_start":134,"line_end":134,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930124,"byte_end":8930176,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930177,"byte_end":8930184,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930185,"byte_end":8930208,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930209,"byte_end":8930277,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930278,"byte_end":8930349,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930350,"byte_end":8930410,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930411,"byte_end":8930478,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930479,"byte_end":8930486,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930487,"byte_end":8930498,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930499,"byte_end":8930516,"line_start":132,"line_end":132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":895},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931293,"byte_end":8931316,"line_start":162,"line_end":162,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930684,"byte_end":8930735,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930736,"byte_end":8930743,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930744,"byte_end":8930767,"line_start":140,"line_end":140,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930768,"byte_end":8930793,"line_start":141,"line_end":141,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930794,"byte_end":8930831,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930832,"byte_end":8930863,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930864,"byte_end":8930871,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930872,"byte_end":8930897,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930898,"byte_end":8930937,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930938,"byte_end":8930973,"line_start":147,"line_end":147,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930974,"byte_end":8930981,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8930982,"byte_end":8931041,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931042,"byte_end":8931057,"line_start":150,"line_end":150,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931058,"byte_end":8931066,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931067,"byte_end":8931074,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931075,"byte_end":8931119,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931120,"byte_end":8931159,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931160,"byte_end":8931167,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931168,"byte_end":8931174,"line_start":156,"line_end":156,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931175,"byte_end":8931182,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931183,"byte_end":8931194,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931195,"byte_end":8931212,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931213,"byte_end":8931229,"line_start":160,"line_end":160,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931820,"byte_end":8931844,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931395,"byte_end":8931447,"line_start":166,"line_end":166,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931448,"byte_end":8931455,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931456,"byte_end":8931479,"line_start":168,"line_end":168,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931480,"byte_end":8931537,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931538,"byte_end":8931599,"line_start":170,"line_end":170,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931600,"byte_end":8931660,"line_start":171,"line_end":171,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931661,"byte_end":8931718,"line_start":172,"line_end":172,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931719,"byte_end":8931726,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931727,"byte_end":8931738,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931739,"byte_end":8931756,"line_start":175,"line_end":175,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932238,"byte_end":8932250,"line_start":192,"line_end":192,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931924,"byte_end":8931944,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931945,"byte_end":8931952,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931953,"byte_end":8931976,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8931977,"byte_end":8932019,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932020,"byte_end":8932062,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932063,"byte_end":8932105,"line_start":186,"line_end":186,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932106,"byte_end":8932136,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932137,"byte_end":8932144,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932145,"byte_end":8932156,"line_start":189,"line_end":189,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932157,"byte_end":8932174,"line_start":190,"line_end":190,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932640,"byte_end":8932652,"line_start":207,"line_end":207,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932326,"byte_end":8932346,"line_start":196,"line_end":196,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932347,"byte_end":8932354,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932355,"byte_end":8932378,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932379,"byte_end":8932417,"line_start":199,"line_end":199,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932418,"byte_end":8932456,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932457,"byte_end":8932505,"line_start":201,"line_end":201,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932506,"byte_end":8932538,"line_start":202,"line_end":202,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932539,"byte_end":8932546,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932547,"byte_end":8932558,"line_start":204,"line_end":204,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932559,"byte_end":8932576,"line_start":205,"line_end":205,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933051,"byte_end":8933066,"line_start":222,"line_end":222,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932731,"byte_end":8932754,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932755,"byte_end":8932762,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932763,"byte_end":8932786,"line_start":213,"line_end":213,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932787,"byte_end":8932829,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932830,"byte_end":8932872,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932873,"byte_end":8932918,"line_start":216,"line_end":216,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932919,"byte_end":8932949,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932950,"byte_end":8932957,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932958,"byte_end":8932969,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8932970,"byte_end":8932987,"line_start":220,"line_end":220,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933465,"byte_end":8933480,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933145,"byte_end":8933168,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933169,"byte_end":8933176,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933177,"byte_end":8933200,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933201,"byte_end":8933239,"line_start":229,"line_end":229,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933240,"byte_end":8933278,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933279,"byte_end":8933330,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933331,"byte_end":8933363,"line_start":232,"line_end":232,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933364,"byte_end":8933371,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933372,"byte_end":8933383,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933384,"byte_end":8933401,"line_start":235,"line_end":235,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":896},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934146,"byte_end":8934162,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933562,"byte_end":8933602,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933603,"byte_end":8933610,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933611,"byte_end":8933634,"line_start":243,"line_end":243,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933635,"byte_end":8933660,"line_start":244,"line_end":244,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933661,"byte_end":8933698,"line_start":245,"line_end":245,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933699,"byte_end":8933730,"line_start":246,"line_end":246,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933731,"byte_end":8933738,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933739,"byte_end":8933764,"line_start":248,"line_end":248,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933765,"byte_end":8933804,"line_start":249,"line_end":249,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933805,"byte_end":8933840,"line_start":250,"line_end":250,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933841,"byte_end":8933848,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933849,"byte_end":8933901,"line_start":252,"line_end":252,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933902,"byte_end":8933917,"line_start":253,"line_end":253,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933918,"byte_end":8933926,"line_start":254,"line_end":254,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933927,"byte_end":8933934,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933935,"byte_end":8933977,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8933978,"byte_end":8934012,"line_start":257,"line_end":257,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934013,"byte_end":8934020,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934021,"byte_end":8934027,"line_start":259,"line_end":259,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934028,"byte_end":8934035,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934036,"byte_end":8934047,"line_start":261,"line_end":261,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934048,"byte_end":8934065,"line_start":262,"line_end":262,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934066,"byte_end":8934082,"line_start":263,"line_end":263,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":629},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934644,"byte_end":8934661,"line_start":280,"line_end":280,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934240,"byte_end":8934281,"line_start":269,"line_end":269,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934282,"byte_end":8934289,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934290,"byte_end":8934313,"line_start":271,"line_end":271,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934314,"byte_end":8934371,"line_start":272,"line_end":272,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934372,"byte_end":8934433,"line_start":273,"line_end":273,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934434,"byte_end":8934487,"line_start":274,"line_end":274,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934488,"byte_end":8934542,"line_start":275,"line_end":275,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934543,"byte_end":8934550,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934551,"byte_end":8934562,"line_start":277,"line_end":277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934563,"byte_end":8934580,"line_start":278,"line_end":278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935143,"byte_end":8935166,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"byte_shl_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shl_imm_u128_m128i","value":"pub fn byte_shl_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register left by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register left by a number of **bytes**.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934740,"byte_end":8934813,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934814,"byte_end":8934817,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934818,"byte_end":8934825,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934826,"byte_end":8934849,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934850,"byte_end":8934918,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934919,"byte_end":8934925,"line_start":289,"line_end":289,"column_start":1,"column_end":7}},{"value":"/ let b: u128 = byte_shl_imm_u128_m128i::<1>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934926,"byte_end":8934983,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(b, 0x00000B00_00000A00_00000F11_11111100);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8934984,"byte_end":8935041,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935042,"byte_end":8935049,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935050,"byte_end":8935061,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935062,"byte_end":8935079,"line_start":294,"line_end":294,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935657,"byte_end":8935680,"line_start":312,"line_end":312,"column_start":8,"column_end":31},"name":"byte_shr_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shr_imm_u128_m128i","value":"pub fn byte_shr_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register right by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register right by a number of **bytes**.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935253,"byte_end":8935327,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935328,"byte_end":8935331,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935332,"byte_end":8935339,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935340,"byte_end":8935363,"line_start":303,"line_end":303,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935364,"byte_end":8935432,"line_start":304,"line_end":304,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935433,"byte_end":8935439,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ let c: u128 = byte_shr_imm_u128_m128i::<1>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935440,"byte_end":8935497,"line_start":306,"line_end":306,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, 0x00000000_0B000000_0A000000_0F111111);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935498,"byte_end":8935555,"line_start":307,"line_end":307,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935556,"byte_end":8935563,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935564,"byte_end":8935575,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935576,"byte_end":8935593,"line_start":310,"line_end":310,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936101,"byte_end":8936124,"line_start":326,"line_end":326,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935767,"byte_end":8935813,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935814,"byte_end":8935821,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935822,"byte_end":8935845,"line_start":318,"line_end":318,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935846,"byte_end":8935888,"line_start":319,"line_end":319,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935889,"byte_end":8935948,"line_start":320,"line_end":320,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8935949,"byte_end":8935999,"line_start":321,"line_end":321,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936000,"byte_end":8936007,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936008,"byte_end":8936019,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936020,"byte_end":8936037,"line_start":324,"line_end":324,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936519,"byte_end":8936543,"line_start":340,"line_end":340,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936186,"byte_end":8936233,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936234,"byte_end":8936241,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936242,"byte_end":8936265,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936266,"byte_end":8936308,"line_start":333,"line_end":333,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936309,"byte_end":8936366,"line_start":334,"line_end":334,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936367,"byte_end":8936417,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936418,"byte_end":8936425,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936426,"byte_end":8936437,"line_start":337,"line_end":337,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936438,"byte_end":8936455,"line_start":338,"line_end":338,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936963,"byte_end":8936986,"line_start":354,"line_end":354,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936610,"byte_end":8936656,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936657,"byte_end":8936664,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936665,"byte_end":8936688,"line_start":346,"line_end":346,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936689,"byte_end":8936740,"line_start":347,"line_end":347,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936741,"byte_end":8936800,"line_start":348,"line_end":348,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936801,"byte_end":8936861,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936862,"byte_end":8936869,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936870,"byte_end":8936881,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8936882,"byte_end":8936899,"line_start":352,"line_end":352,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937407,"byte_end":8937430,"line_start":368,"line_end":368,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937049,"byte_end":8937095,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937096,"byte_end":8937103,"line_start":359,"line_end":359,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937104,"byte_end":8937127,"line_start":360,"line_end":360,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937128,"byte_end":8937179,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937180,"byte_end":8937236,"line_start":362,"line_end":362,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937237,"byte_end":8937305,"line_start":363,"line_end":363,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937306,"byte_end":8937313,"line_start":364,"line_end":364,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937314,"byte_end":8937325,"line_start":365,"line_end":365,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937326,"byte_end":8937343,"line_start":366,"line_end":366,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937824,"byte_end":8937848,"line_start":382,"line_end":382,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937496,"byte_end":8937543,"line_start":372,"line_end":372,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937544,"byte_end":8937551,"line_start":373,"line_end":373,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937552,"byte_end":8937575,"line_start":374,"line_end":374,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937576,"byte_end":8937614,"line_start":375,"line_end":375,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937615,"byte_end":8937675,"line_start":376,"line_end":376,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937676,"byte_end":8937722,"line_start":377,"line_end":377,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937723,"byte_end":8937730,"line_start":378,"line_end":378,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937731,"byte_end":8937742,"line_start":379,"line_end":379,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937743,"byte_end":8937760,"line_start":380,"line_end":380,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938227,"byte_end":8938250,"line_start":396,"line_end":396,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937915,"byte_end":8937961,"line_start":386,"line_end":386,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937962,"byte_end":8937969,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937970,"byte_end":8937993,"line_start":388,"line_end":388,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8937994,"byte_end":8938032,"line_start":389,"line_end":389,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938033,"byte_end":8938092,"line_start":390,"line_end":390,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938093,"byte_end":8938125,"line_start":391,"line_end":391,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938126,"byte_end":8938133,"line_start":392,"line_end":392,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938134,"byte_end":8938145,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938146,"byte_end":8938163,"line_start":394,"line_end":394,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938862,"byte_end":8938882,"line_start":413,"line_end":413,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938315,"byte_end":8938356,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938357,"byte_end":8938360,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938361,"byte_end":8938419,"line_start":402,"line_end":402,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938420,"byte_end":8938427,"line_start":403,"line_end":403,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938428,"byte_end":8938451,"line_start":404,"line_end":404,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938452,"byte_end":8938536,"line_start":405,"line_end":405,"column_start":1,"column_end":85}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938537,"byte_end":8938628,"line_start":406,"line_end":406,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938629,"byte_end":8938685,"line_start":407,"line_end":407,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938686,"byte_end":8938760,"line_start":408,"line_end":408,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938761,"byte_end":8938768,"line_start":409,"line_end":409,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938769,"byte_end":8938780,"line_start":410,"line_end":410,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938781,"byte_end":8938798,"line_start":411,"line_end":411,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939428,"byte_end":8939449,"line_start":430,"line_end":430,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8938962,"byte_end":8939004,"line_start":417,"line_end":417,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939005,"byte_end":8939008,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939009,"byte_end":8939067,"line_start":419,"line_end":419,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939068,"byte_end":8939075,"line_start":420,"line_end":420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939076,"byte_end":8939099,"line_start":421,"line_end":421,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939100,"byte_end":8939158,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939159,"byte_end":8939220,"line_start":423,"line_end":423,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939221,"byte_end":8939278,"line_start":424,"line_end":424,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939279,"byte_end":8939326,"line_start":425,"line_end":425,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939327,"byte_end":8939334,"line_start":426,"line_end":426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939335,"byte_end":8939346,"line_start":427,"line_end":427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939347,"byte_end":8939364,"line_start":428,"line_end":428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939940,"byte_end":8939961,"line_start":447,"line_end":447,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939530,"byte_end":8939572,"line_start":434,"line_end":434,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939573,"byte_end":8939576,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939577,"byte_end":8939635,"line_start":436,"line_end":436,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939636,"byte_end":8939643,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939644,"byte_end":8939667,"line_start":438,"line_end":438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939668,"byte_end":8939706,"line_start":439,"line_end":439,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939707,"byte_end":8939745,"line_start":440,"line_end":440,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939746,"byte_end":8939803,"line_start":441,"line_end":441,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939804,"byte_end":8939838,"line_start":442,"line_end":442,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939839,"byte_end":8939846,"line_start":443,"line_end":443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939847,"byte_end":8939858,"line_start":444,"line_end":444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8939859,"byte_end":8939876,"line_start":445,"line_end":445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940399,"byte_end":8940416,"line_start":464,"line_end":464,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940042,"byte_end":8940077,"line_start":451,"line_end":451,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940078,"byte_end":8940081,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940082,"byte_end":8940098,"line_start":453,"line_end":453,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940099,"byte_end":8940106,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940107,"byte_end":8940130,"line_start":455,"line_end":455,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940131,"byte_end":8940173,"line_start":456,"line_end":456,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940174,"byte_end":8940216,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940217,"byte_end":8940263,"line_start":458,"line_end":458,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940264,"byte_end":8940297,"line_start":459,"line_end":459,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940298,"byte_end":8940305,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940306,"byte_end":8940317,"line_start":461,"line_end":461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940318,"byte_end":8940335,"line_start":462,"line_end":462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940877,"byte_end":8940896,"line_start":481,"line_end":481,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940494,"byte_end":8940539,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940540,"byte_end":8940543,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940544,"byte_end":8940560,"line_start":470,"line_end":470,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940561,"byte_end":8940568,"line_start":471,"line_end":471,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940569,"byte_end":8940592,"line_start":472,"line_end":472,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940593,"byte_end":8940635,"line_start":473,"line_end":473,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940636,"byte_end":8940678,"line_start":474,"line_end":474,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940679,"byte_end":8940727,"line_start":475,"line_end":475,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940728,"byte_end":8940775,"line_start":476,"line_end":476,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940776,"byte_end":8940783,"line_start":477,"line_end":477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940784,"byte_end":8940795,"line_start":478,"line_end":478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940796,"byte_end":8940813,"line_start":479,"line_end":479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941325,"byte_end":8941342,"line_start":498,"line_end":498,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940974,"byte_end":8940996,"line_start":485,"line_end":485,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8940997,"byte_end":8941000,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941001,"byte_end":8941017,"line_start":487,"line_end":487,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941018,"byte_end":8941025,"line_start":488,"line_end":488,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941026,"byte_end":8941049,"line_start":489,"line_end":489,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941050,"byte_end":8941092,"line_start":490,"line_end":490,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941093,"byte_end":8941135,"line_start":491,"line_end":491,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941136,"byte_end":8941182,"line_start":492,"line_end":492,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941183,"byte_end":8941223,"line_start":493,"line_end":493,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941224,"byte_end":8941231,"line_start":494,"line_end":494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941232,"byte_end":8941243,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941244,"byte_end":8941261,"line_start":496,"line_end":496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941803,"byte_end":8941822,"line_start":515,"line_end":515,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941420,"byte_end":8941465,"line_start":502,"line_end":502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941466,"byte_end":8941469,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941470,"byte_end":8941486,"line_start":504,"line_end":504,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941487,"byte_end":8941494,"line_start":505,"line_end":505,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941495,"byte_end":8941518,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941519,"byte_end":8941561,"line_start":507,"line_end":507,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941562,"byte_end":8941604,"line_start":508,"line_end":508,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941605,"byte_end":8941653,"line_start":509,"line_end":509,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941654,"byte_end":8941701,"line_start":510,"line_end":510,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941702,"byte_end":8941709,"line_start":511,"line_end":511,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941710,"byte_end":8941721,"line_start":512,"line_end":512,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941722,"byte_end":8941739,"line_start":513,"line_end":513,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942452,"byte_end":8942472,"line_start":532,"line_end":532,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941900,"byte_end":8941940,"line_start":519,"line_end":519,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941941,"byte_end":8941944,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8941945,"byte_end":8942003,"line_start":521,"line_end":521,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942004,"byte_end":8942011,"line_start":522,"line_end":522,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942012,"byte_end":8942035,"line_start":523,"line_end":523,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942036,"byte_end":8942124,"line_start":524,"line_end":524,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942125,"byte_end":8942216,"line_start":525,"line_end":525,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942217,"byte_end":8942273,"line_start":526,"line_end":526,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942274,"byte_end":8942350,"line_start":527,"line_end":527,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942351,"byte_end":8942358,"line_start":528,"line_end":528,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942359,"byte_end":8942370,"line_start":529,"line_end":529,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942371,"byte_end":8942388,"line_start":530,"line_end":530,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943021,"byte_end":8943042,"line_start":549,"line_end":549,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942552,"byte_end":8942593,"line_start":536,"line_end":536,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942594,"byte_end":8942597,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942598,"byte_end":8942656,"line_start":538,"line_end":538,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942657,"byte_end":8942664,"line_start":539,"line_end":539,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942665,"byte_end":8942688,"line_start":540,"line_end":540,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942689,"byte_end":8942748,"line_start":541,"line_end":541,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942749,"byte_end":8942810,"line_start":542,"line_end":542,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942811,"byte_end":8942868,"line_start":543,"line_end":543,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942869,"byte_end":8942919,"line_start":544,"line_end":544,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942920,"byte_end":8942927,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942928,"byte_end":8942939,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8942940,"byte_end":8942957,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943534,"byte_end":8943555,"line_start":566,"line_end":566,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943123,"byte_end":8943164,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943165,"byte_end":8943168,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943169,"byte_end":8943227,"line_start":555,"line_end":555,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943228,"byte_end":8943235,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943236,"byte_end":8943259,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943260,"byte_end":8943300,"line_start":558,"line_end":558,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943301,"byte_end":8943339,"line_start":559,"line_end":559,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943340,"byte_end":8943397,"line_start":560,"line_end":560,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943398,"byte_end":8943432,"line_start":561,"line_end":561,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943433,"byte_end":8943440,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943441,"byte_end":8943452,"line_start":563,"line_end":563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943453,"byte_end":8943470,"line_start":564,"line_end":564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943979,"byte_end":8943996,"line_start":583,"line_end":583,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943636,"byte_end":8943657,"line_start":570,"line_end":570,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943658,"byte_end":8943661,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943662,"byte_end":8943678,"line_start":572,"line_end":572,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943679,"byte_end":8943686,"line_start":573,"line_end":573,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943687,"byte_end":8943710,"line_start":574,"line_end":574,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943711,"byte_end":8943753,"line_start":575,"line_end":575,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943754,"byte_end":8943796,"line_start":576,"line_end":576,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943797,"byte_end":8943843,"line_start":577,"line_end":577,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943844,"byte_end":8943877,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943878,"byte_end":8943885,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943886,"byte_end":8943897,"line_start":580,"line_end":580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8943898,"byte_end":8943915,"line_start":581,"line_end":581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944456,"byte_end":8944475,"line_start":600,"line_end":600,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944074,"byte_end":8944118,"line_start":587,"line_end":587,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944119,"byte_end":8944122,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944123,"byte_end":8944139,"line_start":589,"line_end":589,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944140,"byte_end":8944147,"line_start":590,"line_end":590,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944148,"byte_end":8944171,"line_start":591,"line_end":591,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944172,"byte_end":8944214,"line_start":592,"line_end":592,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944215,"byte_end":8944257,"line_start":593,"line_end":593,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944258,"byte_end":8944306,"line_start":594,"line_end":594,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944307,"byte_end":8944354,"line_start":595,"line_end":595,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944355,"byte_end":8944362,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944363,"byte_end":8944374,"line_start":597,"line_end":597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944375,"byte_end":8944392,"line_start":598,"line_end":598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944904,"byte_end":8944921,"line_start":617,"line_end":617,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944553,"byte_end":8944575,"line_start":604,"line_end":604,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944576,"byte_end":8944579,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944580,"byte_end":8944596,"line_start":606,"line_end":606,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944597,"byte_end":8944604,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944605,"byte_end":8944628,"line_start":608,"line_end":608,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944629,"byte_end":8944671,"line_start":609,"line_end":609,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944672,"byte_end":8944714,"line_start":610,"line_end":610,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944715,"byte_end":8944761,"line_start":611,"line_end":611,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944762,"byte_end":8944802,"line_start":612,"line_end":612,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944803,"byte_end":8944810,"line_start":613,"line_end":613,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944811,"byte_end":8944822,"line_start":614,"line_end":614,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944823,"byte_end":8944840,"line_start":615,"line_end":615,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945382,"byte_end":8945401,"line_start":634,"line_end":634,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8944999,"byte_end":8945044,"line_start":621,"line_end":621,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945045,"byte_end":8945048,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945049,"byte_end":8945065,"line_start":623,"line_end":623,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945066,"byte_end":8945073,"line_start":624,"line_end":624,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945074,"byte_end":8945097,"line_start":625,"line_end":625,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945098,"byte_end":8945140,"line_start":626,"line_end":626,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945141,"byte_end":8945183,"line_start":627,"line_end":627,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945184,"byte_end":8945232,"line_start":628,"line_end":628,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945233,"byte_end":8945280,"line_start":629,"line_end":629,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945281,"byte_end":8945288,"line_start":630,"line_end":630,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945289,"byte_end":8945300,"line_start":631,"line_end":631,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945301,"byte_end":8945318,"line_start":632,"line_end":632,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946031,"byte_end":8946051,"line_start":651,"line_end":651,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945479,"byte_end":8945519,"line_start":638,"line_end":638,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945520,"byte_end":8945523,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945524,"byte_end":8945582,"line_start":640,"line_end":640,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945583,"byte_end":8945590,"line_start":641,"line_end":641,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945591,"byte_end":8945614,"line_start":642,"line_end":642,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945615,"byte_end":8945703,"line_start":643,"line_end":643,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945704,"byte_end":8945795,"line_start":644,"line_end":644,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945796,"byte_end":8945852,"line_start":645,"line_end":645,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945853,"byte_end":8945929,"line_start":646,"line_end":646,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945930,"byte_end":8945937,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945938,"byte_end":8945949,"line_start":648,"line_end":648,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8945950,"byte_end":8945967,"line_start":649,"line_end":649,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946596,"byte_end":8946617,"line_start":668,"line_end":668,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946131,"byte_end":8946172,"line_start":655,"line_end":655,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946173,"byte_end":8946176,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946177,"byte_end":8946235,"line_start":657,"line_end":657,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946236,"byte_end":8946243,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946244,"byte_end":8946267,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946268,"byte_end":8946327,"line_start":660,"line_end":660,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946328,"byte_end":8946389,"line_start":661,"line_end":661,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946390,"byte_end":8946447,"line_start":662,"line_end":662,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946448,"byte_end":8946494,"line_start":663,"line_end":663,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946495,"byte_end":8946502,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946503,"byte_end":8946514,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946515,"byte_end":8946532,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947108,"byte_end":8947129,"line_start":685,"line_end":685,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946698,"byte_end":8946739,"line_start":672,"line_end":672,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946740,"byte_end":8946743,"line_start":673,"line_end":673,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946744,"byte_end":8946802,"line_start":674,"line_end":674,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946803,"byte_end":8946810,"line_start":675,"line_end":675,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946811,"byte_end":8946834,"line_start":676,"line_end":676,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946835,"byte_end":8946875,"line_start":677,"line_end":677,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946876,"byte_end":8946914,"line_start":678,"line_end":678,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946915,"byte_end":8946972,"line_start":679,"line_end":679,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8946973,"byte_end":8947006,"line_start":680,"line_end":680,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947007,"byte_end":8947014,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947015,"byte_end":8947026,"line_start":682,"line_end":682,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947027,"byte_end":8947044,"line_start":683,"line_end":683,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947553,"byte_end":8947570,"line_start":702,"line_end":702,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947210,"byte_end":8947231,"line_start":689,"line_end":689,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947232,"byte_end":8947235,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947236,"byte_end":8947252,"line_start":691,"line_end":691,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947253,"byte_end":8947260,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947261,"byte_end":8947284,"line_start":693,"line_end":693,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947285,"byte_end":8947327,"line_start":694,"line_end":694,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947328,"byte_end":8947370,"line_start":695,"line_end":695,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947371,"byte_end":8947417,"line_start":696,"line_end":696,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947418,"byte_end":8947451,"line_start":697,"line_end":697,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947452,"byte_end":8947459,"line_start":698,"line_end":698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947460,"byte_end":8947471,"line_start":699,"line_end":699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947472,"byte_end":8947489,"line_start":700,"line_end":700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948029,"byte_end":8948048,"line_start":719,"line_end":719,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947648,"byte_end":8947691,"line_start":706,"line_end":706,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947692,"byte_end":8947695,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947696,"byte_end":8947712,"line_start":708,"line_end":708,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947713,"byte_end":8947720,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947721,"byte_end":8947744,"line_start":710,"line_end":710,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947745,"byte_end":8947787,"line_start":711,"line_end":711,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947788,"byte_end":8947830,"line_start":712,"line_end":712,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947831,"byte_end":8947879,"line_start":713,"line_end":713,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947880,"byte_end":8947927,"line_start":714,"line_end":714,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947928,"byte_end":8947935,"line_start":715,"line_end":715,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947936,"byte_end":8947947,"line_start":716,"line_end":716,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8947948,"byte_end":8947965,"line_start":717,"line_end":717,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948471,"byte_end":8948489,"line_start":736,"line_end":736,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948126,"byte_end":8948148,"line_start":723,"line_end":723,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948149,"byte_end":8948152,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948153,"byte_end":8948169,"line_start":725,"line_end":725,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948170,"byte_end":8948177,"line_start":726,"line_end":726,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948178,"byte_end":8948201,"line_start":727,"line_end":727,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948202,"byte_end":8948244,"line_start":728,"line_end":728,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948245,"byte_end":8948287,"line_start":729,"line_end":729,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948288,"byte_end":8948335,"line_start":730,"line_end":730,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948336,"byte_end":8948369,"line_start":731,"line_end":731,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948370,"byte_end":8948377,"line_start":732,"line_end":732,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948378,"byte_end":8948389,"line_start":733,"line_end":733,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948390,"byte_end":8948407,"line_start":734,"line_end":734,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948951,"byte_end":8948971,"line_start":753,"line_end":753,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948568,"byte_end":8948612,"line_start":740,"line_end":740,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948613,"byte_end":8948616,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948617,"byte_end":8948633,"line_start":742,"line_end":742,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948634,"byte_end":8948641,"line_start":743,"line_end":743,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948642,"byte_end":8948665,"line_start":744,"line_end":744,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948666,"byte_end":8948708,"line_start":745,"line_end":745,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948709,"byte_end":8948751,"line_start":746,"line_end":746,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948752,"byte_end":8948801,"line_start":747,"line_end":747,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948802,"byte_end":8948849,"line_start":748,"line_end":748,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948850,"byte_end":8948857,"line_start":749,"line_end":749,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948858,"byte_end":8948869,"line_start":750,"line_end":750,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8948870,"byte_end":8948887,"line_start":751,"line_end":751,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949398,"byte_end":8949416,"line_start":770,"line_end":770,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949050,"byte_end":8949075,"line_start":757,"line_end":757,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949076,"byte_end":8949079,"line_start":758,"line_end":758,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949080,"byte_end":8949096,"line_start":759,"line_end":759,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949097,"byte_end":8949104,"line_start":760,"line_end":760,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949105,"byte_end":8949128,"line_start":761,"line_end":761,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949129,"byte_end":8949171,"line_start":762,"line_end":762,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949172,"byte_end":8949214,"line_start":763,"line_end":763,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949215,"byte_end":8949262,"line_start":764,"line_end":764,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949263,"byte_end":8949296,"line_start":765,"line_end":765,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949297,"byte_end":8949304,"line_start":766,"line_end":766,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949305,"byte_end":8949316,"line_start":767,"line_end":767,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949317,"byte_end":8949334,"line_start":768,"line_end":768,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949874,"byte_end":8949894,"line_start":787,"line_end":787,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949495,"byte_end":8949542,"line_start":774,"line_end":774,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949543,"byte_end":8949546,"line_start":775,"line_end":775,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949547,"byte_end":8949563,"line_start":776,"line_end":776,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949564,"byte_end":8949571,"line_start":777,"line_end":777,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949572,"byte_end":8949595,"line_start":778,"line_end":778,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949596,"byte_end":8949638,"line_start":779,"line_end":779,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949639,"byte_end":8949681,"line_start":780,"line_end":780,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949682,"byte_end":8949731,"line_start":781,"line_end":781,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949732,"byte_end":8949772,"line_start":782,"line_end":782,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949773,"byte_end":8949780,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949781,"byte_end":8949792,"line_start":784,"line_end":784,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949793,"byte_end":8949810,"line_start":785,"line_end":785,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950320,"byte_end":8950338,"line_start":804,"line_end":804,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949973,"byte_end":8949997,"line_start":791,"line_end":791,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8949998,"byte_end":8950001,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950002,"byte_end":8950018,"line_start":793,"line_end":793,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950019,"byte_end":8950026,"line_start":794,"line_end":794,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950027,"byte_end":8950050,"line_start":795,"line_end":795,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950051,"byte_end":8950093,"line_start":796,"line_end":796,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950094,"byte_end":8950136,"line_start":797,"line_end":797,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950137,"byte_end":8950184,"line_start":798,"line_end":798,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950185,"byte_end":8950218,"line_start":799,"line_end":799,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950219,"byte_end":8950226,"line_start":800,"line_end":800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950227,"byte_end":8950238,"line_start":801,"line_end":801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950239,"byte_end":8950256,"line_start":802,"line_end":802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950795,"byte_end":8950815,"line_start":821,"line_end":821,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950417,"byte_end":8950463,"line_start":808,"line_end":808,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950464,"byte_end":8950467,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950468,"byte_end":8950484,"line_start":810,"line_end":810,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950485,"byte_end":8950492,"line_start":811,"line_end":811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950493,"byte_end":8950516,"line_start":812,"line_end":812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950517,"byte_end":8950559,"line_start":813,"line_end":813,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950560,"byte_end":8950602,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950603,"byte_end":8950652,"line_start":815,"line_end":815,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950653,"byte_end":8950693,"line_start":816,"line_end":816,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950694,"byte_end":8950701,"line_start":817,"line_end":817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950702,"byte_end":8950713,"line_start":818,"line_end":818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950714,"byte_end":8950731,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951242,"byte_end":8951260,"line_start":838,"line_end":838,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950894,"byte_end":8950919,"line_start":825,"line_end":825,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950920,"byte_end":8950923,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950924,"byte_end":8950940,"line_start":827,"line_end":827,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950941,"byte_end":8950948,"line_start":828,"line_end":828,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950949,"byte_end":8950972,"line_start":829,"line_end":829,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8950973,"byte_end":8951015,"line_start":830,"line_end":830,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951016,"byte_end":8951058,"line_start":831,"line_end":831,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951059,"byte_end":8951106,"line_start":832,"line_end":832,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951107,"byte_end":8951140,"line_start":833,"line_end":833,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951141,"byte_end":8951148,"line_start":834,"line_end":834,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951149,"byte_end":8951160,"line_start":835,"line_end":835,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951161,"byte_end":8951178,"line_start":836,"line_end":836,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951725,"byte_end":8951745,"line_start":855,"line_end":855,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951339,"byte_end":8951386,"line_start":842,"line_end":842,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951387,"byte_end":8951390,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951391,"byte_end":8951407,"line_start":844,"line_end":844,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951408,"byte_end":8951415,"line_start":845,"line_end":845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951416,"byte_end":8951439,"line_start":846,"line_end":846,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951440,"byte_end":8951482,"line_start":847,"line_end":847,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951483,"byte_end":8951525,"line_start":848,"line_end":848,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951526,"byte_end":8951575,"line_start":849,"line_end":849,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951576,"byte_end":8951623,"line_start":850,"line_end":850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951624,"byte_end":8951631,"line_start":851,"line_end":851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951632,"byte_end":8951643,"line_start":852,"line_end":852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951644,"byte_end":8951661,"line_start":853,"line_end":853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952171,"byte_end":8952189,"line_start":872,"line_end":872,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951824,"byte_end":8951848,"line_start":859,"line_end":859,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951849,"byte_end":8951852,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951853,"byte_end":8951869,"line_start":861,"line_end":861,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951870,"byte_end":8951877,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951878,"byte_end":8951901,"line_start":863,"line_end":863,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951902,"byte_end":8951944,"line_start":864,"line_end":864,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951945,"byte_end":8951987,"line_start":865,"line_end":865,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8951988,"byte_end":8952035,"line_start":866,"line_end":866,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952036,"byte_end":8952069,"line_start":867,"line_end":867,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952070,"byte_end":8952077,"line_start":868,"line_end":868,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952078,"byte_end":8952089,"line_start":869,"line_end":869,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952090,"byte_end":8952107,"line_start":870,"line_end":870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952653,"byte_end":8952673,"line_start":889,"line_end":889,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952268,"byte_end":8952314,"line_start":876,"line_end":876,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952315,"byte_end":8952318,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952319,"byte_end":8952335,"line_start":878,"line_end":878,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952336,"byte_end":8952343,"line_start":879,"line_end":879,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952344,"byte_end":8952367,"line_start":880,"line_end":880,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952368,"byte_end":8952410,"line_start":881,"line_end":881,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952411,"byte_end":8952453,"line_start":882,"line_end":882,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952454,"byte_end":8952503,"line_start":883,"line_end":883,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952504,"byte_end":8952551,"line_start":884,"line_end":884,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952552,"byte_end":8952559,"line_start":885,"line_end":885,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952560,"byte_end":8952571,"line_start":886,"line_end":886,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952572,"byte_end":8952589,"line_start":887,"line_end":887,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953129,"byte_end":8953151,"line_start":906,"line_end":906,"column_start":8,"column_end":30},"name":"cmp_ordered_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d","value":"pub fn cmp_ordered_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952752,"byte_end":8952797,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952798,"byte_end":8952801,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952802,"byte_end":8952818,"line_start":895,"line_end":895,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952819,"byte_end":8952826,"line_start":896,"line_end":896,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952827,"byte_end":8952850,"line_start":897,"line_end":897,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952851,"byte_end":8952898,"line_start":898,"line_end":898,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952899,"byte_end":8952941,"line_start":899,"line_end":899,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952942,"byte_end":8952993,"line_start":900,"line_end":900,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8952994,"byte_end":8953027,"line_start":901,"line_end":901,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953028,"byte_end":8953035,"line_start":902,"line_end":902,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953036,"byte_end":8953047,"line_start":903,"line_end":903,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953048,"byte_end":8953065,"line_start":904,"line_end":904,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953640,"byte_end":8953664,"line_start":923,"line_end":923,"column_start":8,"column_end":32},"name":"cmp_ordered_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d_s","value":"pub fn cmp_ordered_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953230,"byte_end":8953297,"line_start":910,"line_end":910,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953298,"byte_end":8953301,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953302,"byte_end":8953318,"line_start":912,"line_end":912,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953319,"byte_end":8953326,"line_start":913,"line_end":913,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953327,"byte_end":8953350,"line_start":914,"line_end":914,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953351,"byte_end":8953393,"line_start":915,"line_end":915,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953394,"byte_end":8953436,"line_start":916,"line_end":916,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953437,"byte_end":8953490,"line_start":917,"line_end":917,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953491,"byte_end":8953538,"line_start":918,"line_end":918,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953539,"byte_end":8953546,"line_start":919,"line_end":919,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953547,"byte_end":8953558,"line_start":920,"line_end":920,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953559,"byte_end":8953576,"line_start":921,"line_end":921,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954112,"byte_end":8954132,"line_start":940,"line_end":940,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953743,"byte_end":8953782,"line_start":927,"line_end":927,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953783,"byte_end":8953786,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953787,"byte_end":8953803,"line_start":929,"line_end":929,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953804,"byte_end":8953811,"line_start":930,"line_end":930,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953812,"byte_end":8953835,"line_start":931,"line_end":931,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953836,"byte_end":8953883,"line_start":932,"line_end":932,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953884,"byte_end":8953926,"line_start":933,"line_end":933,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953927,"byte_end":8953976,"line_start":934,"line_end":934,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8953977,"byte_end":8954010,"line_start":935,"line_end":935,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954011,"byte_end":8954018,"line_start":936,"line_end":936,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954019,"byte_end":8954030,"line_start":937,"line_end":937,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954031,"byte_end":8954048,"line_start":938,"line_end":938,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954620,"byte_end":8954642,"line_start":957,"line_end":957,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954213,"byte_end":8954274,"line_start":944,"line_end":944,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954275,"byte_end":8954278,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954279,"byte_end":8954295,"line_start":946,"line_end":946,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954296,"byte_end":8954303,"line_start":947,"line_end":947,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954304,"byte_end":8954327,"line_start":948,"line_end":948,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954328,"byte_end":8954375,"line_start":949,"line_end":949,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954376,"byte_end":8954418,"line_start":950,"line_end":950,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954419,"byte_end":8954470,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954471,"byte_end":8954518,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954519,"byte_end":8954526,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954527,"byte_end":8954538,"line_start":954,"line_end":954,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954539,"byte_end":8954556,"line_start":955,"line_end":955,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955042,"byte_end":8955060,"line_start":973,"line_end":973,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954723,"byte_end":8954751,"line_start":961,"line_end":961,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954752,"byte_end":8954755,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954756,"byte_end":8954773,"line_start":963,"line_end":963,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954774,"byte_end":8954781,"line_start":964,"line_end":964,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954782,"byte_end":8954805,"line_start":965,"line_end":965,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954806,"byte_end":8954848,"line_start":966,"line_end":966,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954849,"byte_end":8954891,"line_start":967,"line_end":967,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954892,"byte_end":8954940,"line_start":968,"line_end":968,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954941,"byte_end":8954948,"line_start":969,"line_end":969,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954949,"byte_end":8954960,"line_start":970,"line_end":970,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8954961,"byte_end":8954978,"line_start":971,"line_end":971,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955465,"byte_end":8955483,"line_start":989,"line_end":989,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955130,"byte_end":8955174,"line_start":977,"line_end":977,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955175,"byte_end":8955178,"line_start":978,"line_end":978,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955179,"byte_end":8955196,"line_start":979,"line_end":979,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955197,"byte_end":8955204,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955205,"byte_end":8955228,"line_start":981,"line_end":981,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955229,"byte_end":8955271,"line_start":982,"line_end":982,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955272,"byte_end":8955314,"line_start":983,"line_end":983,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955315,"byte_end":8955363,"line_start":984,"line_end":984,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955364,"byte_end":8955371,"line_start":985,"line_end":985,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955372,"byte_end":8955383,"line_start":986,"line_end":986,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955384,"byte_end":8955401,"line_start":987,"line_end":987,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955876,"byte_end":8955894,"line_start":1005,"line_end":1005,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955553,"byte_end":8955585,"line_start":993,"line_end":993,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955586,"byte_end":8955589,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955590,"byte_end":8955607,"line_start":995,"line_end":995,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955608,"byte_end":8955615,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955616,"byte_end":8955639,"line_start":997,"line_end":997,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955640,"byte_end":8955682,"line_start":998,"line_end":998,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955683,"byte_end":8955725,"line_start":999,"line_end":999,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955726,"byte_end":8955774,"line_start":1000,"line_end":1000,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955775,"byte_end":8955782,"line_start":1001,"line_end":1001,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955783,"byte_end":8955794,"line_start":1002,"line_end":1002,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955795,"byte_end":8955812,"line_start":1003,"line_end":1003,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956296,"byte_end":8956314,"line_start":1021,"line_end":1021,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8955964,"byte_end":8956005,"line_start":1009,"line_end":1009,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956006,"byte_end":8956009,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956010,"byte_end":8956027,"line_start":1011,"line_end":1011,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956028,"byte_end":8956035,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956036,"byte_end":8956059,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956060,"byte_end":8956102,"line_start":1014,"line_end":1014,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956103,"byte_end":8956145,"line_start":1015,"line_end":1015,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956146,"byte_end":8956194,"line_start":1016,"line_end":1016,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956195,"byte_end":8956202,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956203,"byte_end":8956214,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956215,"byte_end":8956232,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956704,"byte_end":8956722,"line_start":1037,"line_end":1037,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956384,"byte_end":8956413,"line_start":1025,"line_end":1025,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956414,"byte_end":8956417,"line_start":1026,"line_end":1026,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956418,"byte_end":8956435,"line_start":1027,"line_end":1027,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956436,"byte_end":8956443,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956444,"byte_end":8956467,"line_start":1029,"line_end":1029,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956468,"byte_end":8956510,"line_start":1030,"line_end":1030,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956511,"byte_end":8956553,"line_start":1031,"line_end":1031,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956554,"byte_end":8956602,"line_start":1032,"line_end":1032,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956603,"byte_end":8956610,"line_start":1033,"line_end":1033,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956611,"byte_end":8956622,"line_start":1034,"line_end":1034,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956623,"byte_end":8956640,"line_start":1035,"line_end":1035,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957113,"byte_end":8957132,"line_start":1053,"line_end":1053,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956792,"byte_end":8956821,"line_start":1041,"line_end":1041,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956822,"byte_end":8956825,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956826,"byte_end":8956843,"line_start":1043,"line_end":1043,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956844,"byte_end":8956851,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956852,"byte_end":8956875,"line_start":1045,"line_end":1045,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956876,"byte_end":8956918,"line_start":1046,"line_end":1046,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956919,"byte_end":8956961,"line_start":1047,"line_end":1047,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8956962,"byte_end":8957011,"line_start":1048,"line_end":1048,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957012,"byte_end":8957019,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957020,"byte_end":8957031,"line_start":1050,"line_end":1050,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957032,"byte_end":8957049,"line_start":1051,"line_end":1051,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957653,"byte_end":8957691,"line_start":1070,"line_end":1070,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957203,"byte_end":8957259,"line_start":1057,"line_end":1057,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957260,"byte_end":8957267,"line_start":1058,"line_end":1058,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957268,"byte_end":8957291,"line_start":1059,"line_end":1059,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957292,"byte_end":8957330,"line_start":1060,"line_end":1060,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957331,"byte_end":8957385,"line_start":1061,"line_end":1061,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957386,"byte_end":8957428,"line_start":1062,"line_end":1062,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957429,"byte_end":8957470,"line_start":1063,"line_end":1063,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957471,"byte_end":8957478,"line_start":1064,"line_end":1064,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957479,"byte_end":8957519,"line_start":1065,"line_end":1065,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957520,"byte_end":8957559,"line_start":1066,"line_end":1066,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957560,"byte_end":8957571,"line_start":1067,"line_end":1067,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957572,"byte_end":8957589,"line_start":1068,"line_end":1068,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958204,"byte_end":8958234,"line_start":1087,"line_end":1087,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957757,"byte_end":8957809,"line_start":1074,"line_end":1074,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957810,"byte_end":8957817,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957818,"byte_end":8957841,"line_start":1076,"line_end":1076,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957842,"byte_end":8957880,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957881,"byte_end":8957927,"line_start":1078,"line_end":1078,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957928,"byte_end":8957979,"line_start":1079,"line_end":1079,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8957980,"byte_end":8958021,"line_start":1080,"line_end":1080,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958022,"byte_end":8958029,"line_start":1081,"line_end":1081,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958030,"byte_end":8958070,"line_start":1082,"line_end":1082,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958071,"byte_end":8958110,"line_start":1083,"line_end":1083,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958111,"byte_end":8958122,"line_start":1084,"line_end":1084,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958123,"byte_end":8958140,"line_start":1085,"line_end":1085,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958727,"byte_end":8958758,"line_start":1104,"line_end":1104,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958298,"byte_end":8958356,"line_start":1091,"line_end":1091,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958357,"byte_end":8958364,"line_start":1092,"line_end":1092,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958365,"byte_end":8958388,"line_start":1093,"line_end":1093,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958389,"byte_end":8958431,"line_start":1094,"line_end":1094,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958432,"byte_end":8958479,"line_start":1095,"line_end":1095,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958480,"byte_end":8958511,"line_start":1096,"line_end":1096,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958512,"byte_end":8958544,"line_start":1097,"line_end":1097,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958545,"byte_end":8958552,"line_start":1098,"line_end":1098,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958553,"byte_end":8958593,"line_start":1099,"line_end":1099,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958594,"byte_end":8958633,"line_start":1100,"line_end":1100,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958634,"byte_end":8958645,"line_start":1101,"line_end":1101,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958646,"byte_end":8958663,"line_start":1102,"line_end":1102,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959253,"byte_end":8959279,"line_start":1120,"line_end":1120,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958824,"byte_end":8958882,"line_start":1108,"line_end":1108,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958883,"byte_end":8958890,"line_start":1109,"line_end":1109,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958891,"byte_end":8958914,"line_start":1110,"line_end":1110,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958915,"byte_end":8958957,"line_start":1111,"line_end":1111,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8958958,"byte_end":8959000,"line_start":1112,"line_end":1112,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959001,"byte_end":8959073,"line_start":1113,"line_end":1113,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959074,"byte_end":8959081,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959082,"byte_end":8959119,"line_start":1115,"line_end":1115,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959120,"byte_end":8959159,"line_start":1116,"line_end":1116,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959160,"byte_end":8959171,"line_start":1117,"line_end":1117,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959172,"byte_end":8959189,"line_start":1118,"line_end":1118,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959761,"byte_end":8959791,"line_start":1137,"line_end":1137,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959340,"byte_end":8959382,"line_start":1124,"line_end":1124,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959383,"byte_end":8959390,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959391,"byte_end":8959414,"line_start":1126,"line_end":1126,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959415,"byte_end":8959466,"line_start":1127,"line_end":1127,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959467,"byte_end":8959513,"line_start":1128,"line_end":1128,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959514,"byte_end":8959545,"line_start":1129,"line_end":1129,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959546,"byte_end":8959578,"line_start":1130,"line_end":1130,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959579,"byte_end":8959586,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959587,"byte_end":8959627,"line_start":1132,"line_end":1132,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959628,"byte_end":8959667,"line_start":1133,"line_end":1133,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959668,"byte_end":8959679,"line_start":1134,"line_end":1134,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959680,"byte_end":8959697,"line_start":1135,"line_end":1135,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960295,"byte_end":8960328,"line_start":1153,"line_end":1153,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959856,"byte_end":8959914,"line_start":1141,"line_end":1141,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959915,"byte_end":8959922,"line_start":1142,"line_end":1142,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959923,"byte_end":8959946,"line_start":1143,"line_end":1143,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959947,"byte_end":8959998,"line_start":1144,"line_end":1144,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8959999,"byte_end":8960048,"line_start":1145,"line_end":1145,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960049,"byte_end":8960115,"line_start":1146,"line_end":1146,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960116,"byte_end":8960123,"line_start":1147,"line_end":1147,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960124,"byte_end":8960161,"line_start":1148,"line_end":1148,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960162,"byte_end":8960201,"line_start":1149,"line_end":1149,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960202,"byte_end":8960213,"line_start":1150,"line_end":1150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960214,"byte_end":8960231,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960674,"byte_end":8960694,"line_start":1167,"line_end":1167,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960390,"byte_end":8960432,"line_start":1157,"line_end":1157,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960433,"byte_end":8960440,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960441,"byte_end":8960464,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960465,"byte_end":8960507,"line_start":1160,"line_end":1160,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960508,"byte_end":8960544,"line_start":1161,"line_end":1161,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960545,"byte_end":8960572,"line_start":1162,"line_end":1162,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960573,"byte_end":8960580,"line_start":1163,"line_end":1163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960581,"byte_end":8960592,"line_start":1164,"line_end":1164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960593,"byte_end":8960610,"line_start":1165,"line_end":1165,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961035,"byte_end":8961055,"line_start":1181,"line_end":1181,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960749,"byte_end":8960795,"line_start":1171,"line_end":1171,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960796,"byte_end":8960803,"line_start":1172,"line_end":1172,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960804,"byte_end":8960827,"line_start":1173,"line_end":1173,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960828,"byte_end":8960870,"line_start":1174,"line_end":1174,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960871,"byte_end":8960907,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960908,"byte_end":8960933,"line_start":1176,"line_end":1176,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960934,"byte_end":8960941,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960942,"byte_end":8960953,"line_start":1178,"line_end":1178,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8960954,"byte_end":8960971,"line_start":1179,"line_end":1179,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961428,"byte_end":8961448,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961111,"byte_end":8961157,"line_start":1185,"line_end":1185,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961158,"byte_end":8961165,"line_start":1186,"line_end":1186,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961166,"byte_end":8961189,"line_start":1187,"line_end":1187,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961190,"byte_end":8961232,"line_start":1188,"line_end":1188,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961233,"byte_end":8961269,"line_start":1189,"line_end":1189,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961270,"byte_end":8961295,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961296,"byte_end":8961303,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961304,"byte_end":8961315,"line_start":1192,"line_end":1192,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961316,"byte_end":8961333,"line_start":1193,"line_end":1193,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961334,"byte_end":8961364,"line_start":1194,"line_end":1194,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962019,"byte_end":8962049,"line_start":1214,"line_end":1214,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961504,"byte_end":8961579,"line_start":1200,"line_end":1200,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961580,"byte_end":8961587,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961588,"byte_end":8961611,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961612,"byte_end":8961663,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961664,"byte_end":8961706,"line_start":1204,"line_end":1204,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961707,"byte_end":8961756,"line_start":1205,"line_end":1205,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961757,"byte_end":8961808,"line_start":1206,"line_end":1206,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961809,"byte_end":8961816,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961817,"byte_end":8961854,"line_start":1208,"line_end":1208,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961855,"byte_end":8961894,"line_start":1209,"line_end":1209,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961895,"byte_end":8961906,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961907,"byte_end":8961924,"line_start":1211,"line_end":1211,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8961925,"byte_end":8961955,"line_start":1212,"line_end":1212,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962406,"byte_end":8962426,"line_start":1228,"line_end":1228,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962124,"byte_end":8962170,"line_start":1218,"line_end":1218,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962171,"byte_end":8962178,"line_start":1219,"line_end":1219,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962179,"byte_end":8962202,"line_start":1220,"line_end":1220,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962203,"byte_end":8962241,"line_start":1221,"line_end":1221,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962242,"byte_end":8962278,"line_start":1222,"line_end":1222,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962279,"byte_end":8962304,"line_start":1223,"line_end":1223,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962305,"byte_end":8962312,"line_start":1224,"line_end":1224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962313,"byte_end":8962324,"line_start":1225,"line_end":1225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962325,"byte_end":8962342,"line_start":1226,"line_end":1226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962796,"byte_end":8962816,"line_start":1243,"line_end":1243,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962485,"byte_end":8962531,"line_start":1232,"line_end":1232,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962532,"byte_end":8962539,"line_start":1233,"line_end":1233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962540,"byte_end":8962563,"line_start":1234,"line_end":1234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962564,"byte_end":8962600,"line_start":1235,"line_end":1235,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962601,"byte_end":8962637,"line_start":1236,"line_end":1236,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962638,"byte_end":8962663,"line_start":1237,"line_end":1237,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962664,"byte_end":8962671,"line_start":1238,"line_end":1238,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962672,"byte_end":8962683,"line_start":1239,"line_end":1239,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962684,"byte_end":8962701,"line_start":1240,"line_end":1240,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962702,"byte_end":8962732,"line_start":1241,"line_end":1241,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963290,"byte_end":8963317,"line_start":1259,"line_end":1259,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962875,"byte_end":8962940,"line_start":1247,"line_end":1247,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962941,"byte_end":8962948,"line_start":1248,"line_end":1248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962949,"byte_end":8962972,"line_start":1249,"line_end":1249,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8962973,"byte_end":8963015,"line_start":1250,"line_end":1250,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963016,"byte_end":8963066,"line_start":1251,"line_end":1251,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963067,"byte_end":8963108,"line_start":1252,"line_end":1252,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963109,"byte_end":8963116,"line_start":1253,"line_end":1253,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963117,"byte_end":8963156,"line_start":1254,"line_end":1254,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963157,"byte_end":8963196,"line_start":1255,"line_end":1255,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963197,"byte_end":8963208,"line_start":1256,"line_end":1256,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963209,"byte_end":8963226,"line_start":1257,"line_end":1257,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963731,"byte_end":8963746,"line_start":1273,"line_end":1273,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963393,"byte_end":8963466,"line_start":1263,"line_end":1263,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963467,"byte_end":8963474,"line_start":1264,"line_end":1264,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963475,"byte_end":8963498,"line_start":1265,"line_end":1265,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963499,"byte_end":8963551,"line_start":1266,"line_end":1266,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963552,"byte_end":8963607,"line_start":1267,"line_end":1267,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963608,"byte_end":8963629,"line_start":1268,"line_end":1268,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963630,"byte_end":8963637,"line_start":1269,"line_end":1269,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963638,"byte_end":8963649,"line_start":1270,"line_end":1270,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963650,"byte_end":8963667,"line_start":1271,"line_end":1271,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964256,"byte_end":8964283,"line_start":1290,"line_end":1290,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963810,"byte_end":8963875,"line_start":1277,"line_end":1277,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963876,"byte_end":8963883,"line_start":1278,"line_end":1278,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963884,"byte_end":8963907,"line_start":1279,"line_end":1279,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963908,"byte_end":8963950,"line_start":1280,"line_end":1280,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8963951,"byte_end":8964001,"line_start":1281,"line_end":1281,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964002,"byte_end":8964043,"line_start":1282,"line_end":1282,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964044,"byte_end":8964051,"line_start":1283,"line_end":1283,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964052,"byte_end":8964091,"line_start":1284,"line_end":1284,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964092,"byte_end":8964131,"line_start":1285,"line_end":1285,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964132,"byte_end":8964143,"line_start":1286,"line_end":1286,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964144,"byte_end":8964161,"line_start":1287,"line_end":1287,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964162,"byte_end":8964192,"line_start":1288,"line_end":1288,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964726,"byte_end":8964741,"line_start":1305,"line_end":1305,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964359,"byte_end":8964432,"line_start":1294,"line_end":1294,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964433,"byte_end":8964440,"line_start":1295,"line_end":1295,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964441,"byte_end":8964464,"line_start":1296,"line_end":1296,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964465,"byte_end":8964517,"line_start":1297,"line_end":1297,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964518,"byte_end":8964571,"line_start":1298,"line_end":1298,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964572,"byte_end":8964593,"line_start":1299,"line_end":1299,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964594,"byte_end":8964601,"line_start":1300,"line_end":1300,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964602,"byte_end":8964613,"line_start":1301,"line_end":1301,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964614,"byte_end":8964631,"line_start":1302,"line_end":1302,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964632,"byte_end":8964662,"line_start":1303,"line_end":1303,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965279,"byte_end":8965309,"line_start":1322,"line_end":1322,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964805,"byte_end":8964880,"line_start":1309,"line_end":1309,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964881,"byte_end":8964888,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964889,"byte_end":8964912,"line_start":1311,"line_end":1311,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964913,"byte_end":8964955,"line_start":1312,"line_end":1312,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8964956,"byte_end":8965007,"line_start":1313,"line_end":1313,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965008,"byte_end":8965057,"line_start":1314,"line_end":1314,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965058,"byte_end":8965099,"line_start":1315,"line_end":1315,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965100,"byte_end":8965107,"line_start":1316,"line_end":1316,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965108,"byte_end":8965145,"line_start":1317,"line_end":1317,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965146,"byte_end":8965185,"line_start":1318,"line_end":1318,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965186,"byte_end":8965197,"line_start":1319,"line_end":1319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965198,"byte_end":8965215,"line_start":1320,"line_end":1320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965730,"byte_end":8965753,"line_start":1336,"line_end":1336,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965386,"byte_end":8965462,"line_start":1326,"line_end":1326,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965463,"byte_end":8965470,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965471,"byte_end":8965494,"line_start":1328,"line_end":1328,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965495,"byte_end":8965537,"line_start":1329,"line_end":1329,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965538,"byte_end":8965577,"line_start":1330,"line_end":1330,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965578,"byte_end":8965628,"line_start":1331,"line_end":1331,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965629,"byte_end":8965636,"line_start":1332,"line_end":1332,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965637,"byte_end":8965648,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965649,"byte_end":8965666,"line_start":1334,"line_end":1334,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966140,"byte_end":8966162,"line_start":1350,"line_end":1350,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965820,"byte_end":8965864,"line_start":1340,"line_end":1340,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965865,"byte_end":8965872,"line_start":1341,"line_end":1341,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965873,"byte_end":8965896,"line_start":1342,"line_end":1342,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965897,"byte_end":8965948,"line_start":1343,"line_end":1343,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965949,"byte_end":8965987,"line_start":1344,"line_end":1344,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8965988,"byte_end":8966038,"line_start":1345,"line_end":1345,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966039,"byte_end":8966046,"line_start":1346,"line_end":1346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966047,"byte_end":8966058,"line_start":1347,"line_end":1347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966059,"byte_end":8966076,"line_start":1348,"line_end":1348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966498,"byte_end":8966521,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966228,"byte_end":8966270,"line_start":1354,"line_end":1354,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966271,"byte_end":8966278,"line_start":1355,"line_end":1355,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966279,"byte_end":8966302,"line_start":1356,"line_end":1356,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966303,"byte_end":8966345,"line_start":1357,"line_end":1357,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966346,"byte_end":8966396,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966397,"byte_end":8966404,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966405,"byte_end":8966416,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966417,"byte_end":8966434,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966879,"byte_end":8966902,"line_start":1377,"line_end":1377,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966578,"byte_end":8966620,"line_start":1367,"line_end":1367,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966621,"byte_end":8966628,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966629,"byte_end":8966652,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966653,"byte_end":8966695,"line_start":1370,"line_end":1370,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966696,"byte_end":8966746,"line_start":1371,"line_end":1371,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966747,"byte_end":8966754,"line_start":1372,"line_end":1372,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966755,"byte_end":8966766,"line_start":1373,"line_end":1373,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966767,"byte_end":8966784,"line_start":1374,"line_end":1374,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966785,"byte_end":8966815,"line_start":1375,"line_end":1375,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967278,"byte_end":8967287,"line_start":1392,"line_end":1392,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966959,"byte_end":8966980,"line_start":1381,"line_end":1381,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966981,"byte_end":8966988,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8966989,"byte_end":8967012,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967013,"byte_end":8967057,"line_start":1384,"line_end":1384,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967058,"byte_end":8967103,"line_start":1385,"line_end":1385,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967104,"byte_end":8967143,"line_start":1386,"line_end":1386,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967144,"byte_end":8967176,"line_start":1387,"line_end":1387,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967177,"byte_end":8967184,"line_start":1388,"line_end":1388,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967185,"byte_end":8967196,"line_start":1389,"line_end":1389,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967197,"byte_end":8967214,"line_start":1390,"line_end":1390,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967710,"byte_end":8967721,"line_start":1407,"line_end":1407,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967363,"byte_end":8967408,"line_start":1396,"line_end":1396,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967409,"byte_end":8967416,"line_start":1397,"line_end":1397,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967417,"byte_end":8967440,"line_start":1398,"line_end":1398,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967441,"byte_end":8967485,"line_start":1399,"line_end":1399,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967486,"byte_end":8967533,"line_start":1400,"line_end":1400,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967534,"byte_end":8967575,"line_start":1401,"line_end":1401,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967576,"byte_end":8967608,"line_start":1402,"line_end":1402,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967609,"byte_end":8967616,"line_start":1403,"line_end":1403,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967617,"byte_end":8967628,"line_start":1404,"line_end":1404,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967629,"byte_end":8967646,"line_start":1405,"line_end":1405,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968229,"byte_end":8968253,"line_start":1425,"line_end":1425,"column_start":8,"column_end":32},"name":"extract_i16_as_i32_m128i","qualname":"::x86_x64::sse2::extract_i16_as_i32_m128i","value":"pub fn extract_i16_as_i32_m128i<const LANE: i32>(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gets an `i16` value out of an `m128i`, returns as `i32`.","sig":null,"attributes":[{"value":"/ Gets an `i16` value out of an `m128i`, returns as `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967797,"byte_end":8967857,"line_start":1411,"line_end":1411,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967858,"byte_end":8967861,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967862,"byte_end":8967911,"line_start":1413,"line_end":1413,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967912,"byte_end":8967915,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967916,"byte_end":8967923,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967924,"byte_end":8967947,"line_start":1416,"line_end":1416,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8967948,"byte_end":8968010,"line_start":1417,"line_end":1417,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968011,"byte_end":8968017,"line_start":1418,"line_end":1418,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<0>(a), 0xA);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968018,"byte_end":8968072,"line_start":1419,"line_end":1419,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<1>(a), 0xB);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968073,"byte_end":8968127,"line_start":1420,"line_end":1420,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968128,"byte_end":8968135,"line_start":1421,"line_end":1421,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968136,"byte_end":8968147,"line_start":1422,"line_end":1422,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968148,"byte_end":8968165,"line_start":1423,"line_end":1423,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968780,"byte_end":8968805,"line_start":1443,"line_end":1443,"column_start":8,"column_end":33},"name":"insert_i16_from_i32_m128i","qualname":"::x86_x64::sse2::insert_i16_from_i32_m128i","value":"pub fn insert_i16_from_i32_m128i<const LANE: i32>(m128i, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Inserts the low 16 bits of an `i32` value into an `m128i`.","sig":null,"attributes":[{"value":"/ Inserts the low 16 bits of an `i32` value into an `m128i`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968335,"byte_end":8968397,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968398,"byte_end":8968401,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968402,"byte_end":8968451,"line_start":1431,"line_end":1431,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968452,"byte_end":8968455,"line_start":1432,"line_end":1432,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968456,"byte_end":8968463,"line_start":1433,"line_end":1433,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968464,"byte_end":8968487,"line_start":1434,"line_end":1434,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968488,"byte_end":8968550,"line_start":1435,"line_end":1435,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968551,"byte_end":8968557,"line_start":1436,"line_end":1436,"column_start":1,"column_end":7}},{"value":"/ let b = insert_i16_from_i32_m128i::<0>(a, -1);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968558,"byte_end":8968608,"line_start":1437,"line_end":1437,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(<[i16; 8]>::from(b), [-1, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968609,"byte_end":8968678,"line_start":1438,"line_end":1438,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968679,"byte_end":8968686,"line_start":1439,"line_end":1439,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968687,"byte_end":8968698,"line_start":1440,"line_end":1440,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968699,"byte_end":8968716,"line_start":1441,"line_end":1441,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969195,"byte_end":8969205,"line_start":1457,"line_end":1457,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968906,"byte_end":8968946,"line_start":1447,"line_end":1447,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968947,"byte_end":8968954,"line_start":1448,"line_end":1448,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968955,"byte_end":8968978,"line_start":1449,"line_end":1449,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8968979,"byte_end":8969023,"line_start":1450,"line_end":1450,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969024,"byte_end":8969051,"line_start":1451,"line_end":1451,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969052,"byte_end":8969093,"line_start":1452,"line_end":1452,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969094,"byte_end":8969101,"line_start":1453,"line_end":1453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969102,"byte_end":8969113,"line_start":1454,"line_end":1454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969114,"byte_end":8969131,"line_start":1455,"line_end":1455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969659,"byte_end":8969679,"line_start":1472,"line_end":1472,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969296,"byte_end":8969355,"line_start":1461,"line_end":1461,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969356,"byte_end":8969363,"line_start":1462,"line_end":1462,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969364,"byte_end":8969387,"line_start":1463,"line_end":1463,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969388,"byte_end":8969404,"line_start":1464,"line_end":1464,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969405,"byte_end":8969442,"line_start":1465,"line_end":1465,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969443,"byte_end":8969512,"line_start":1466,"line_end":1466,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969513,"byte_end":8969520,"line_start":1467,"line_end":1467,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969521,"byte_end":8969532,"line_start":1468,"line_end":1468,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969533,"byte_end":8969550,"line_start":1469,"line_end":1469,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969551,"byte_end":8969595,"line_start":1470,"line_end":1470,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970097,"byte_end":8970113,"line_start":1487,"line_end":1487,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969739,"byte_end":8969797,"line_start":1476,"line_end":1476,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969798,"byte_end":8969805,"line_start":1477,"line_end":1477,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969806,"byte_end":8969829,"line_start":1478,"line_end":1478,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969830,"byte_end":8969846,"line_start":1479,"line_end":1479,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969847,"byte_end":8969880,"line_start":1480,"line_end":1480,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969881,"byte_end":8969950,"line_start":1481,"line_end":1481,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969951,"byte_end":8969958,"line_start":1482,"line_end":1482,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969959,"byte_end":8969970,"line_start":1483,"line_end":1483,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969971,"byte_end":8969988,"line_start":1484,"line_end":1484,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8969989,"byte_end":8970033,"line_start":1485,"line_end":1485,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970471,"byte_end":8970481,"line_start":1501,"line_end":1501,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970172,"byte_end":8970212,"line_start":1491,"line_end":1491,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970213,"byte_end":8970220,"line_start":1492,"line_end":1492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970221,"byte_end":8970244,"line_start":1493,"line_end":1493,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970245,"byte_end":8970283,"line_start":1494,"line_end":1494,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970284,"byte_end":8970311,"line_start":1495,"line_end":1495,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970312,"byte_end":8970369,"line_start":1496,"line_end":1496,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970370,"byte_end":8970377,"line_start":1497,"line_end":1497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970378,"byte_end":8970389,"line_start":1498,"line_end":1498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970390,"byte_end":8970407,"line_start":1499,"line_end":1499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970928,"byte_end":8970951,"line_start":1516,"line_end":1516,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970579,"byte_end":8970644,"line_start":1505,"line_end":1505,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970645,"byte_end":8970652,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970653,"byte_end":8970676,"line_start":1507,"line_end":1507,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970677,"byte_end":8970713,"line_start":1508,"line_end":1508,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970714,"byte_end":8970735,"line_start":1509,"line_end":1509,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970736,"byte_end":8970784,"line_start":1510,"line_end":1510,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970785,"byte_end":8970826,"line_start":1511,"line_end":1511,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970827,"byte_end":8970834,"line_start":1512,"line_end":1512,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970835,"byte_end":8970846,"line_start":1513,"line_end":1513,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8970847,"byte_end":8970864,"line_start":1514,"line_end":1514,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971320,"byte_end":8971336,"line_start":1530,"line_end":1530,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971026,"byte_end":8971066,"line_start":1520,"line_end":1520,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971067,"byte_end":8971074,"line_start":1521,"line_end":1521,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971075,"byte_end":8971098,"line_start":1522,"line_end":1522,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971099,"byte_end":8971135,"line_start":1523,"line_end":1523,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971136,"byte_end":8971169,"line_start":1524,"line_end":1524,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971170,"byte_end":8971218,"line_start":1525,"line_end":1525,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971219,"byte_end":8971226,"line_start":1526,"line_end":1526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971227,"byte_end":8971238,"line_start":1527,"line_end":1527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971239,"byte_end":8971256,"line_start":1528,"line_end":1528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971782,"byte_end":8971804,"line_start":1545,"line_end":1545,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971435,"byte_end":8971499,"line_start":1534,"line_end":1534,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971500,"byte_end":8971507,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971508,"byte_end":8971531,"line_start":1536,"line_end":1536,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971532,"byte_end":8971568,"line_start":1537,"line_end":1537,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971569,"byte_end":8971590,"line_start":1538,"line_end":1538,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971591,"byte_end":8971638,"line_start":1539,"line_end":1539,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971639,"byte_end":8971680,"line_start":1540,"line_end":1540,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971681,"byte_end":8971688,"line_start":1541,"line_end":1541,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971689,"byte_end":8971700,"line_start":1542,"line_end":1542,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971701,"byte_end":8971718,"line_start":1543,"line_end":1543,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972226,"byte_end":8972244,"line_start":1559,"line_end":1559,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971879,"byte_end":8971939,"line_start":1549,"line_end":1549,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971940,"byte_end":8971947,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971948,"byte_end":8971971,"line_start":1551,"line_end":1551,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8971972,"byte_end":8972016,"line_start":1552,"line_end":1552,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972017,"byte_end":8972052,"line_start":1553,"line_end":1553,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972053,"byte_end":8972124,"line_start":1554,"line_end":1554,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972125,"byte_end":8972132,"line_start":1555,"line_end":1555,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972133,"byte_end":8972144,"line_start":1556,"line_end":1556,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972145,"byte_end":8972162,"line_start":1557,"line_end":1557,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972812,"byte_end":8972832,"line_start":1577,"line_end":1577,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972336,"byte_end":8972376,"line_start":1563,"line_end":1563,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972377,"byte_end":8972380,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972381,"byte_end":8972459,"line_start":1565,"line_end":1565,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972460,"byte_end":8972540,"line_start":1566,"line_end":1566,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972541,"byte_end":8972553,"line_start":1567,"line_end":1567,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972554,"byte_end":8972561,"line_start":1568,"line_end":1568,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972562,"byte_end":8972585,"line_start":1569,"line_end":1569,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972586,"byte_end":8972611,"line_start":1570,"line_end":1570,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972612,"byte_end":8972649,"line_start":1571,"line_end":1571,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972650,"byte_end":8972710,"line_start":1572,"line_end":1572,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972711,"byte_end":8972718,"line_start":1573,"line_end":1573,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972719,"byte_end":8972730,"line_start":1574,"line_end":1574,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972731,"byte_end":8972748,"line_start":1575,"line_end":1575,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973458,"byte_end":8973478,"line_start":1596,"line_end":1596,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972930,"byte_end":8972970,"line_start":1581,"line_end":1581,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972971,"byte_end":8972974,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8972975,"byte_end":8973053,"line_start":1583,"line_end":1583,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973054,"byte_end":8973127,"line_start":1584,"line_end":1584,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973128,"byte_end":8973140,"line_start":1585,"line_end":1585,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973141,"byte_end":8973148,"line_start":1586,"line_end":1586,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973149,"byte_end":8973172,"line_start":1587,"line_end":1587,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973173,"byte_end":8973241,"line_start":1588,"line_end":1588,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973242,"byte_end":8973279,"line_start":1589,"line_end":1589,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973280,"byte_end":8973319,"line_start":1590,"line_end":1590,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973320,"byte_end":8973327,"line_start":1591,"line_end":1591,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973328,"byte_end":8973339,"line_start":1592,"line_end":1592,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973340,"byte_end":8973357,"line_start":1593,"line_end":1593,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973358,"byte_end":8973394,"line_start":1594,"line_end":1594,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974059,"byte_end":8974087,"line_start":1612,"line_end":1612,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973583,"byte_end":8973661,"line_start":1600,"line_end":1600,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973662,"byte_end":8973701,"line_start":1601,"line_end":1601,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973702,"byte_end":8973709,"line_start":1602,"line_end":1602,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973710,"byte_end":8973733,"line_start":1603,"line_end":1603,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973734,"byte_end":8973792,"line_start":1604,"line_end":1604,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973793,"byte_end":8973854,"line_start":1605,"line_end":1605,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973855,"byte_end":8973919,"line_start":1606,"line_end":1606,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973920,"byte_end":8973957,"line_start":1607,"line_end":1607,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973958,"byte_end":8973965,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973966,"byte_end":8973977,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8973978,"byte_end":8973995,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974649,"byte_end":8974661,"line_start":1627,"line_end":1627,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974167,"byte_end":8974211,"line_start":1616,"line_end":1616,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974212,"byte_end":8974219,"line_start":1617,"line_end":1617,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974220,"byte_end":8974243,"line_start":1618,"line_end":1618,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974244,"byte_end":8974327,"line_start":1619,"line_end":1619,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974328,"byte_end":8974417,"line_start":1620,"line_end":1620,"column_start":1,"column_end":90}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974418,"byte_end":8974466,"line_start":1621,"line_end":1621,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974467,"byte_end":8974547,"line_start":1622,"line_end":1622,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974548,"byte_end":8974555,"line_start":1623,"line_end":1623,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974556,"byte_end":8974567,"line_start":1624,"line_end":1624,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974568,"byte_end":8974585,"line_start":1625,"line_end":1625,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975142,"byte_end":8975155,"line_start":1642,"line_end":1642,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974739,"byte_end":8974784,"line_start":1631,"line_end":1631,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974785,"byte_end":8974792,"line_start":1632,"line_end":1632,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974793,"byte_end":8974816,"line_start":1633,"line_end":1633,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974817,"byte_end":8974875,"line_start":1634,"line_end":1634,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974876,"byte_end":8974937,"line_start":1635,"line_end":1635,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974938,"byte_end":8974987,"line_start":1636,"line_end":1636,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8974988,"byte_end":8975040,"line_start":1637,"line_end":1637,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975041,"byte_end":8975048,"line_start":1638,"line_end":1638,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975049,"byte_end":8975060,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975061,"byte_end":8975078,"line_start":1640,"line_end":1640,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975550,"byte_end":8975559,"line_start":1657,"line_end":1657,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975234,"byte_end":8975259,"line_start":1646,"line_end":1646,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975260,"byte_end":8975267,"line_start":1647,"line_end":1647,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975268,"byte_end":8975291,"line_start":1648,"line_end":1648,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975292,"byte_end":8975334,"line_start":1649,"line_end":1649,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975335,"byte_end":8975377,"line_start":1650,"line_end":1650,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975378,"byte_end":8975417,"line_start":1651,"line_end":1651,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975418,"byte_end":8975448,"line_start":1652,"line_end":1652,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975449,"byte_end":8975456,"line_start":1653,"line_end":1653,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975457,"byte_end":8975468,"line_start":1654,"line_end":1654,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975469,"byte_end":8975486,"line_start":1655,"line_end":1655,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975978,"byte_end":8975989,"line_start":1672,"line_end":1672,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975635,"byte_end":8975683,"line_start":1661,"line_end":1661,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975684,"byte_end":8975691,"line_start":1662,"line_end":1662,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975692,"byte_end":8975715,"line_start":1663,"line_end":1663,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975716,"byte_end":8975759,"line_start":1664,"line_end":1664,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975760,"byte_end":8975802,"line_start":1665,"line_end":1665,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975803,"byte_end":8975844,"line_start":1666,"line_end":1666,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975845,"byte_end":8975876,"line_start":1667,"line_end":1667,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975877,"byte_end":8975884,"line_start":1668,"line_end":1668,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975885,"byte_end":8975896,"line_start":1669,"line_end":1669,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8975897,"byte_end":8975914,"line_start":1670,"line_end":1670,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976536,"byte_end":8976548,"line_start":1687,"line_end":1687,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976065,"byte_end":8976109,"line_start":1676,"line_end":1676,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976110,"byte_end":8976117,"line_start":1677,"line_end":1677,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976118,"byte_end":8976141,"line_start":1678,"line_end":1678,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976142,"byte_end":8976225,"line_start":1679,"line_end":1679,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976226,"byte_end":8976310,"line_start":1680,"line_end":1680,"column_start":1,"column_end":85}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976311,"byte_end":8976359,"line_start":1681,"line_end":1681,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976360,"byte_end":8976434,"line_start":1682,"line_end":1682,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976435,"byte_end":8976442,"line_start":1683,"line_end":1683,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976443,"byte_end":8976454,"line_start":1684,"line_end":1684,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976455,"byte_end":8976472,"line_start":1685,"line_end":1685,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977032,"byte_end":8977045,"line_start":1702,"line_end":1702,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976626,"byte_end":8976671,"line_start":1691,"line_end":1691,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976672,"byte_end":8976679,"line_start":1692,"line_end":1692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976680,"byte_end":8976703,"line_start":1693,"line_end":1693,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976704,"byte_end":8976762,"line_start":1694,"line_end":1694,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976763,"byte_end":8976824,"line_start":1695,"line_end":1695,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976825,"byte_end":8976874,"line_start":1696,"line_end":1696,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976875,"byte_end":8976930,"line_start":1697,"line_end":1697,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976931,"byte_end":8976938,"line_start":1698,"line_end":1698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976939,"byte_end":8976950,"line_start":1699,"line_end":1699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8976951,"byte_end":8976968,"line_start":1700,"line_end":1700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977441,"byte_end":8977450,"line_start":1717,"line_end":1717,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977124,"byte_end":8977149,"line_start":1706,"line_end":1706,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977150,"byte_end":8977157,"line_start":1707,"line_end":1707,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977158,"byte_end":8977181,"line_start":1708,"line_end":1708,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977182,"byte_end":8977225,"line_start":1709,"line_end":1709,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977226,"byte_end":8977268,"line_start":1710,"line_end":1710,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977269,"byte_end":8977308,"line_start":1711,"line_end":1711,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977309,"byte_end":8977339,"line_start":1712,"line_end":1712,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977340,"byte_end":8977347,"line_start":1713,"line_end":1713,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977348,"byte_end":8977359,"line_start":1714,"line_end":1714,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977360,"byte_end":8977377,"line_start":1715,"line_end":1715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977869,"byte_end":8977880,"line_start":1732,"line_end":1732,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977526,"byte_end":8977574,"line_start":1721,"line_end":1721,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977575,"byte_end":8977582,"line_start":1722,"line_end":1722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977583,"byte_end":8977606,"line_start":1723,"line_end":1723,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977607,"byte_end":8977650,"line_start":1724,"line_end":1724,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977651,"byte_end":8977693,"line_start":1725,"line_end":1725,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977694,"byte_end":8977735,"line_start":1726,"line_end":1726,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977736,"byte_end":8977767,"line_start":1727,"line_end":1727,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977768,"byte_end":8977775,"line_start":1728,"line_end":1728,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977776,"byte_end":8977787,"line_start":1729,"line_end":1729,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977788,"byte_end":8977805,"line_start":1730,"line_end":1730,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978265,"byte_end":8978281,"line_start":1746,"line_end":1746,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8977956,"byte_end":8978016,"line_start":1736,"line_end":1736,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978017,"byte_end":8978024,"line_start":1737,"line_end":1737,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978025,"byte_end":8978048,"line_start":1738,"line_end":1738,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978049,"byte_end":8978085,"line_start":1739,"line_end":1739,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978086,"byte_end":8978118,"line_start":1740,"line_end":1740,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978119,"byte_end":8978163,"line_start":1741,"line_end":1741,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978164,"byte_end":8978171,"line_start":1742,"line_end":1742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978172,"byte_end":8978183,"line_start":1743,"line_end":1743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978184,"byte_end":8978201,"line_start":1744,"line_end":1744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978716,"byte_end":8978742,"line_start":1761,"line_end":1761,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978346,"byte_end":8978420,"line_start":1750,"line_end":1750,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978421,"byte_end":8978428,"line_start":1751,"line_end":1751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978429,"byte_end":8978452,"line_start":1752,"line_end":1752,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978453,"byte_end":8978489,"line_start":1753,"line_end":1753,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978490,"byte_end":8978526,"line_start":1754,"line_end":1754,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978527,"byte_end":8978572,"line_start":1755,"line_end":1755,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978573,"byte_end":8978614,"line_start":1756,"line_end":1756,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978615,"byte_end":8978622,"line_start":1757,"line_end":1757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978623,"byte_end":8978634,"line_start":1758,"line_end":1758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978635,"byte_end":8978652,"line_start":1759,"line_end":1759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979233,"byte_end":8979251,"line_start":1777,"line_end":1777,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978819,"byte_end":8978862,"line_start":1765,"line_end":1765,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978863,"byte_end":8978866,"line_start":1766,"line_end":1766,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978867,"byte_end":8978930,"line_start":1767,"line_end":1767,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978931,"byte_end":8978938,"line_start":1768,"line_end":1768,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978939,"byte_end":8978962,"line_start":1769,"line_end":1769,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8978963,"byte_end":8979057,"line_start":1770,"line_end":1770,"column_start":1,"column_end":95}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979058,"byte_end":8979092,"line_start":1771,"line_end":1771,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979093,"byte_end":8979131,"line_start":1772,"line_end":1772,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979132,"byte_end":8979139,"line_start":1773,"line_end":1773,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979140,"byte_end":8979151,"line_start":1774,"line_end":1774,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979152,"byte_end":8979169,"line_start":1775,"line_end":1775,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979641,"byte_end":8979656,"line_start":1793,"line_end":1793,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979310,"byte_end":8979348,"line_start":1781,"line_end":1781,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979349,"byte_end":8979352,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979353,"byte_end":8979405,"line_start":1783,"line_end":1783,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979406,"byte_end":8979413,"line_start":1784,"line_end":1784,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979414,"byte_end":8979437,"line_start":1785,"line_end":1785,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979438,"byte_end":8979482,"line_start":1786,"line_end":1786,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979483,"byte_end":8979514,"line_start":1787,"line_end":1787,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979515,"byte_end":8979539,"line_start":1788,"line_end":1788,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979540,"byte_end":8979547,"line_start":1789,"line_end":1789,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979548,"byte_end":8979559,"line_start":1790,"line_end":1790,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979560,"byte_end":8979577,"line_start":1791,"line_end":1791,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980143,"byte_end":8980166,"line_start":1809,"line_end":1809,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979713,"byte_end":8979786,"line_start":1797,"line_end":1797,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979787,"byte_end":8979790,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979791,"byte_end":8979798,"line_start":1799,"line_end":1799,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979799,"byte_end":8979822,"line_start":1800,"line_end":1800,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979823,"byte_end":8979868,"line_start":1801,"line_end":1801,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979869,"byte_end":8979914,"line_start":1802,"line_end":1802,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979915,"byte_end":8979974,"line_start":1803,"line_end":1803,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8979975,"byte_end":8980041,"line_start":1804,"line_end":1804,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980042,"byte_end":8980049,"line_start":1805,"line_end":1805,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980050,"byte_end":8980061,"line_start":1806,"line_end":1806,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980062,"byte_end":8980079,"line_start":1807,"line_end":1807,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980568,"byte_end":8980577,"line_start":1824,"line_end":1824,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980245,"byte_end":8980266,"line_start":1813,"line_end":1813,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980267,"byte_end":8980274,"line_start":1814,"line_end":1814,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980275,"byte_end":8980298,"line_start":1815,"line_end":1815,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980299,"byte_end":8980343,"line_start":1816,"line_end":1816,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980344,"byte_end":8980389,"line_start":1817,"line_end":1817,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980390,"byte_end":8980429,"line_start":1818,"line_end":1818,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980430,"byte_end":8980466,"line_start":1819,"line_end":1819,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980467,"byte_end":8980474,"line_start":1820,"line_end":1820,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980475,"byte_end":8980486,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980487,"byte_end":8980504,"line_start":1822,"line_end":1822,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981002,"byte_end":8981013,"line_start":1839,"line_end":1839,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980653,"byte_end":8980698,"line_start":1828,"line_end":1828,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980699,"byte_end":8980706,"line_start":1829,"line_end":1829,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980707,"byte_end":8980730,"line_start":1830,"line_end":1830,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980731,"byte_end":8980775,"line_start":1831,"line_end":1831,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980776,"byte_end":8980823,"line_start":1832,"line_end":1832,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980824,"byte_end":8980865,"line_start":1833,"line_end":1833,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980866,"byte_end":8980900,"line_start":1834,"line_end":1834,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980901,"byte_end":8980908,"line_start":1835,"line_end":1835,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980909,"byte_end":8980920,"line_start":1836,"line_end":1836,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8980921,"byte_end":8980938,"line_start":1837,"line_end":1837,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981558,"byte_end":8981581,"line_start":1855,"line_end":1855,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981089,"byte_end":8981162,"line_start":1843,"line_end":1843,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981163,"byte_end":8981181,"line_start":1844,"line_end":1844,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981182,"byte_end":8981189,"line_start":1845,"line_end":1845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981190,"byte_end":8981213,"line_start":1846,"line_end":1846,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981214,"byte_end":8981279,"line_start":1847,"line_end":1847,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981280,"byte_end":8981348,"line_start":1848,"line_end":1848,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981349,"byte_end":8981408,"line_start":1849,"line_end":1849,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981409,"byte_end":8981456,"line_start":1850,"line_end":1850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981457,"byte_end":8981464,"line_start":1851,"line_end":1851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981465,"byte_end":8981476,"line_start":1852,"line_end":1852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981477,"byte_end":8981494,"line_start":1853,"line_end":1853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982133,"byte_end":8982156,"line_start":1871,"line_end":1871,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981662,"byte_end":8981735,"line_start":1859,"line_end":1859,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981736,"byte_end":8981754,"line_start":1860,"line_end":1860,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981755,"byte_end":8981762,"line_start":1861,"line_end":1861,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981763,"byte_end":8981786,"line_start":1862,"line_end":1862,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981787,"byte_end":8981851,"line_start":1863,"line_end":1863,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981852,"byte_end":8981919,"line_start":1864,"line_end":1864,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981920,"byte_end":8981979,"line_start":1865,"line_end":1865,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8981980,"byte_end":8982031,"line_start":1866,"line_end":1866,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982032,"byte_end":8982039,"line_start":1867,"line_end":1867,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982040,"byte_end":8982051,"line_start":1868,"line_end":1868,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982052,"byte_end":8982069,"line_start":1869,"line_end":1869,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982720,"byte_end":8982742,"line_start":1887,"line_end":1887,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982237,"byte_end":8982309,"line_start":1875,"line_end":1875,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982310,"byte_end":8982328,"line_start":1876,"line_end":1876,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982329,"byte_end":8982336,"line_start":1877,"line_end":1877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982337,"byte_end":8982360,"line_start":1878,"line_end":1878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982361,"byte_end":8982426,"line_start":1879,"line_end":1879,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982427,"byte_end":8982495,"line_start":1880,"line_end":1880,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982496,"byte_end":8982554,"line_start":1881,"line_end":1881,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982555,"byte_end":8982618,"line_start":1882,"line_end":1882,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982619,"byte_end":8982626,"line_start":1883,"line_end":1883,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982627,"byte_end":8982638,"line_start":1884,"line_end":1884,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982639,"byte_end":8982656,"line_start":1885,"line_end":1885,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983136,"byte_end":8983147,"line_start":1902,"line_end":1902,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982823,"byte_end":8982843,"line_start":1891,"line_end":1891,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982844,"byte_end":8982851,"line_start":1892,"line_end":1892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982852,"byte_end":8982875,"line_start":1893,"line_end":1893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982876,"byte_end":8982918,"line_start":1894,"line_end":1894,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982919,"byte_end":8982961,"line_start":1895,"line_end":1895,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8982962,"byte_end":8983003,"line_start":1896,"line_end":1896,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983004,"byte_end":8983034,"line_start":1897,"line_end":1897,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983035,"byte_end":8983042,"line_start":1898,"line_end":1898,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983043,"byte_end":8983054,"line_start":1899,"line_end":1899,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983055,"byte_end":8983072,"line_start":1900,"line_end":1900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983535,"byte_end":8983546,"line_start":1917,"line_end":1917,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983222,"byte_end":8983242,"line_start":1906,"line_end":1906,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983243,"byte_end":8983250,"line_start":1907,"line_end":1907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983251,"byte_end":8983274,"line_start":1908,"line_end":1908,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983275,"byte_end":8983313,"line_start":1909,"line_end":1909,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983314,"byte_end":8983352,"line_start":1910,"line_end":1910,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983353,"byte_end":8983400,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983401,"byte_end":8983433,"line_start":1912,"line_end":1912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983434,"byte_end":8983441,"line_start":1913,"line_end":1913,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983442,"byte_end":8983453,"line_start":1914,"line_end":1914,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983454,"byte_end":8983471,"line_start":1915,"line_end":1915,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984069,"byte_end":8984089,"line_start":1932,"line_end":1932,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983624,"byte_end":8983682,"line_start":1921,"line_end":1921,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983683,"byte_end":8983690,"line_start":1922,"line_end":1922,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983691,"byte_end":8983714,"line_start":1923,"line_end":1923,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983715,"byte_end":8983769,"line_start":1924,"line_end":1924,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983770,"byte_end":8983831,"line_start":1925,"line_end":1925,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983832,"byte_end":8983888,"line_start":1926,"line_end":1926,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983889,"byte_end":8983967,"line_start":1927,"line_end":1927,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983968,"byte_end":8983975,"line_start":1928,"line_end":1928,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983976,"byte_end":8983987,"line_start":1929,"line_end":1929,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8983988,"byte_end":8984005,"line_start":1930,"line_end":1930,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984556,"byte_end":8984577,"line_start":1947,"line_end":1947,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984170,"byte_end":8984229,"line_start":1936,"line_end":1936,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984230,"byte_end":8984237,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984238,"byte_end":8984261,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984262,"byte_end":8984304,"line_start":1939,"line_end":1939,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984305,"byte_end":8984347,"line_start":1940,"line_end":1940,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984348,"byte_end":8984405,"line_start":1941,"line_end":1941,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984406,"byte_end":8984454,"line_start":1942,"line_end":1942,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984455,"byte_end":8984462,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984463,"byte_end":8984474,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984475,"byte_end":8984492,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985119,"byte_end":8985139,"line_start":1962,"line_end":1962,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984658,"byte_end":8984716,"line_start":1951,"line_end":1951,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984717,"byte_end":8984724,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984725,"byte_end":8984748,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984749,"byte_end":8984807,"line_start":1954,"line_end":1954,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984808,"byte_end":8984871,"line_start":1955,"line_end":1955,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984872,"byte_end":8984928,"line_start":1956,"line_end":1956,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8984929,"byte_end":8985017,"line_start":1957,"line_end":1957,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985018,"byte_end":8985025,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985026,"byte_end":8985037,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985038,"byte_end":8985055,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985870,"byte_end":8985894,"line_start":1981,"line_end":1981,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985221,"byte_end":8985268,"line_start":1966,"line_end":1966,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985269,"byte_end":8985272,"line_start":1967,"line_end":1967,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985273,"byte_end":8985342,"line_start":1968,"line_end":1968,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985343,"byte_end":8985393,"line_start":1969,"line_end":1969,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985394,"byte_end":8985446,"line_start":1970,"line_end":1970,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985447,"byte_end":8985454,"line_start":1971,"line_end":1971,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985455,"byte_end":8985478,"line_start":1972,"line_end":1972,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985479,"byte_end":8985568,"line_start":1973,"line_end":1973,"column_start":1,"column_end":90}},{"value":"/ let b = m128i::from([20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985569,"byte_end":8985672,"line_start":1974,"line_end":1974,"column_start":1,"column_end":104}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985673,"byte_end":8985733,"line_start":1975,"line_end":1975,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985734,"byte_end":8985768,"line_start":1976,"line_end":1976,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985769,"byte_end":8985776,"line_start":1977,"line_end":1977,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985777,"byte_end":8985788,"line_start":1978,"line_end":1978,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985789,"byte_end":8985806,"line_start":1979,"line_end":1979,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986471,"byte_end":8986483,"line_start":1997,"line_end":1997,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8985972,"byte_end":8986034,"line_start":1985,"line_end":1985,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986035,"byte_end":8986042,"line_start":1986,"line_end":1986,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986043,"byte_end":8986066,"line_start":1987,"line_end":1987,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986067,"byte_end":8986150,"line_start":1988,"line_end":1988,"column_start":1,"column_end":84}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986151,"byte_end":8986233,"line_start":1989,"line_end":1989,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986234,"byte_end":8986291,"line_start":1990,"line_end":1990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986292,"byte_end":8986299,"line_start":1991,"line_end":1991,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986300,"byte_end":8986311,"line_start":1992,"line_end":1992,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986312,"byte_end":8986329,"line_start":1993,"line_end":1993,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986330,"byte_end":8986366,"line_start":1994,"line_end":1994,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986367,"byte_end":8986407,"line_start":1995,"line_end":1995,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987133,"byte_end":8987146,"line_start":2013,"line_end":2013,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986691,"byte_end":8986753,"line_start":2001,"line_end":2001,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986754,"byte_end":8986761,"line_start":2002,"line_end":2002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986762,"byte_end":8986785,"line_start":2003,"line_end":2003,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986786,"byte_end":8986840,"line_start":2004,"line_end":2004,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986841,"byte_end":8986895,"line_start":2005,"line_end":2005,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986896,"byte_end":8986953,"line_start":2006,"line_end":2006,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986954,"byte_end":8986961,"line_start":2007,"line_end":2007,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986962,"byte_end":8986973,"line_start":2008,"line_end":2008,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986974,"byte_end":8986991,"line_start":2009,"line_end":2009,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8986992,"byte_end":8987028,"line_start":2010,"line_end":2010,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987029,"byte_end":8987069,"line_start":2011,"line_end":2011,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987615,"byte_end":8987628,"line_start":2027,"line_end":2027,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987283,"byte_end":8987345,"line_start":2017,"line_end":2017,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987346,"byte_end":8987353,"line_start":2018,"line_end":2018,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987354,"byte_end":8987377,"line_start":2019,"line_end":2019,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987378,"byte_end":8987416,"line_start":2020,"line_end":2020,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987417,"byte_end":8987455,"line_start":2021,"line_end":2021,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987456,"byte_end":8987513,"line_start":2022,"line_end":2022,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987514,"byte_end":8987521,"line_start":2023,"line_end":2023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987522,"byte_end":8987533,"line_start":2024,"line_end":2024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987534,"byte_end":8987551,"line_start":2025,"line_end":2025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988045,"byte_end":8988058,"line_start":2041,"line_end":2041,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987721,"byte_end":8987783,"line_start":2031,"line_end":2031,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987784,"byte_end":8987791,"line_start":2032,"line_end":2032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987792,"byte_end":8987815,"line_start":2033,"line_end":2033,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987816,"byte_end":8987852,"line_start":2034,"line_end":2034,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987853,"byte_end":8987885,"line_start":2035,"line_end":2035,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987886,"byte_end":8987943,"line_start":2036,"line_end":2036,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987944,"byte_end":8987951,"line_start":2037,"line_end":2037,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987952,"byte_end":8987963,"line_start":2038,"line_end":2038,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8987964,"byte_end":8987981,"line_start":2039,"line_end":2039,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988446,"byte_end":8988455,"line_start":2055,"line_end":2055,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988130,"byte_end":8988192,"line_start":2045,"line_end":2045,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988193,"byte_end":8988200,"line_start":2046,"line_end":2046,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988201,"byte_end":8988224,"line_start":2047,"line_end":2047,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988225,"byte_end":8988267,"line_start":2048,"line_end":2048,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988268,"byte_end":8988300,"line_start":2049,"line_end":2049,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988301,"byte_end":8988344,"line_start":2050,"line_end":2050,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988345,"byte_end":8988352,"line_start":2051,"line_end":2051,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988353,"byte_end":8988364,"line_start":2052,"line_end":2052,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988365,"byte_end":8988382,"line_start":2053,"line_end":2053,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988823,"byte_end":8988834,"line_start":2069,"line_end":2069,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988523,"byte_end":8988572,"line_start":2059,"line_end":2059,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988573,"byte_end":8988580,"line_start":2060,"line_end":2060,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988581,"byte_end":8988604,"line_start":2061,"line_end":2061,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988605,"byte_end":8988647,"line_start":2062,"line_end":2062,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988648,"byte_end":8988677,"line_start":2063,"line_end":2063,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988678,"byte_end":8988721,"line_start":2064,"line_end":2064,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988722,"byte_end":8988729,"line_start":2065,"line_end":2065,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988730,"byte_end":8988741,"line_start":2066,"line_end":2066,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988742,"byte_end":8988759,"line_start":2067,"line_end":2067,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989197,"byte_end":8989212,"line_start":2083,"line_end":2083,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988891,"byte_end":8988942,"line_start":2073,"line_end":2073,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988943,"byte_end":8988950,"line_start":2074,"line_end":2074,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988951,"byte_end":8988974,"line_start":2075,"line_end":2075,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8988975,"byte_end":8989017,"line_start":2076,"line_end":2076,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989018,"byte_end":8989051,"line_start":2077,"line_end":2077,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989052,"byte_end":8989095,"line_start":2078,"line_end":2078,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989096,"byte_end":8989103,"line_start":2079,"line_end":2079,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989104,"byte_end":8989115,"line_start":2080,"line_end":2080,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989116,"byte_end":8989133,"line_start":2081,"line_end":2081,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989623,"byte_end":8989641,"line_start":2097,"line_end":2097,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989270,"byte_end":8989318,"line_start":2087,"line_end":2087,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989319,"byte_end":8989326,"line_start":2088,"line_end":2088,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989327,"byte_end":8989350,"line_start":2089,"line_end":2089,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989351,"byte_end":8989428,"line_start":2090,"line_end":2090,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989429,"byte_end":8989463,"line_start":2091,"line_end":2091,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989464,"byte_end":8989521,"line_start":2092,"line_end":2092,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989522,"byte_end":8989529,"line_start":2093,"line_end":2093,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989530,"byte_end":8989541,"line_start":2094,"line_end":2094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989542,"byte_end":8989559,"line_start":2095,"line_end":2095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990032,"byte_end":8990051,"line_start":2111,"line_end":2111,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989700,"byte_end":8989749,"line_start":2101,"line_end":2101,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989750,"byte_end":8989757,"line_start":2102,"line_end":2102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989758,"byte_end":8989781,"line_start":2103,"line_end":2103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989782,"byte_end":8989836,"line_start":2104,"line_end":2104,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989837,"byte_end":8989872,"line_start":2105,"line_end":2105,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989873,"byte_end":8989930,"line_start":2106,"line_end":2106,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989931,"byte_end":8989938,"line_start":2107,"line_end":2107,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989939,"byte_end":8989950,"line_start":2108,"line_end":2108,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8989951,"byte_end":8989968,"line_start":2109,"line_end":2109,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990428,"byte_end":8990447,"line_start":2125,"line_end":2125,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990112,"byte_end":8990161,"line_start":2115,"line_end":2115,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990162,"byte_end":8990169,"line_start":2116,"line_end":2116,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990170,"byte_end":8990193,"line_start":2117,"line_end":2117,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990194,"byte_end":8990232,"line_start":2118,"line_end":2118,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990233,"byte_end":8990268,"line_start":2119,"line_end":2119,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990269,"byte_end":8990326,"line_start":2120,"line_end":2120,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990327,"byte_end":8990334,"line_start":2121,"line_end":2121,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990335,"byte_end":8990346,"line_start":2122,"line_end":2122,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990347,"byte_end":8990364,"line_start":2123,"line_end":2123,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990823,"byte_end":8990842,"line_start":2139,"line_end":2139,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990508,"byte_end":8990558,"line_start":2129,"line_end":2129,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990559,"byte_end":8990566,"line_start":2130,"line_end":2130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990567,"byte_end":8990590,"line_start":2131,"line_end":2131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990591,"byte_end":8990627,"line_start":2132,"line_end":2132,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990628,"byte_end":8990663,"line_start":2133,"line_end":2133,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990664,"byte_end":8990721,"line_start":2134,"line_end":2134,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990722,"byte_end":8990729,"line_start":2135,"line_end":2135,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990730,"byte_end":8990741,"line_start":2136,"line_end":2136,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990742,"byte_end":8990759,"line_start":2137,"line_end":2137,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991411,"byte_end":8991432,"line_start":2155,"line_end":2155,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990904,"byte_end":8990965,"line_start":2143,"line_end":2143,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990966,"byte_end":8990973,"line_start":2144,"line_end":2144,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990974,"byte_end":8990997,"line_start":2145,"line_end":2145,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8990998,"byte_end":8991081,"line_start":2146,"line_end":2146,"column_start":1,"column_end":84}},{"value":"/ let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991082,"byte_end":8991173,"line_start":2147,"line_end":2147,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991174,"byte_end":8991231,"line_start":2148,"line_end":2148,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991232,"byte_end":8991239,"line_start":2149,"line_end":2149,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991240,"byte_end":8991251,"line_start":2150,"line_end":2150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991252,"byte_end":8991269,"line_start":2151,"line_end":2151,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991270,"byte_end":8991306,"line_start":2152,"line_end":2152,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991307,"byte_end":8991347,"line_start":2153,"line_end":2153,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992091,"byte_end":8992113,"line_start":2171,"line_end":2171,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991641,"byte_end":8991702,"line_start":2159,"line_end":2159,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991703,"byte_end":8991710,"line_start":2160,"line_end":2160,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991711,"byte_end":8991734,"line_start":2161,"line_end":2161,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991735,"byte_end":8991789,"line_start":2162,"line_end":2162,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991790,"byte_end":8991853,"line_start":2163,"line_end":2163,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991854,"byte_end":8991911,"line_start":2164,"line_end":2164,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991912,"byte_end":8991919,"line_start":2165,"line_end":2165,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991920,"byte_end":8991931,"line_start":2166,"line_end":2166,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991932,"byte_end":8991949,"line_start":2167,"line_end":2167,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991950,"byte_end":8991986,"line_start":2168,"line_end":2168,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8991987,"byte_end":8992027,"line_start":2169,"line_end":2169,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992591,"byte_end":8992613,"line_start":2185,"line_end":2185,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992251,"byte_end":8992312,"line_start":2175,"line_end":2175,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992313,"byte_end":8992320,"line_start":2176,"line_end":2176,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992321,"byte_end":8992344,"line_start":2177,"line_end":2177,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992345,"byte_end":8992383,"line_start":2178,"line_end":2178,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992384,"byte_end":8992431,"line_start":2179,"line_end":2179,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992432,"byte_end":8992489,"line_start":2180,"line_end":2180,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992490,"byte_end":8992497,"line_start":2181,"line_end":2181,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992498,"byte_end":8992509,"line_start":2182,"line_end":2182,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992510,"byte_end":8992527,"line_start":2183,"line_end":2183,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993031,"byte_end":8993049,"line_start":2199,"line_end":2199,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992707,"byte_end":8992768,"line_start":2189,"line_end":2189,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992769,"byte_end":8992776,"line_start":2190,"line_end":2190,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992777,"byte_end":8992800,"line_start":2191,"line_end":2191,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992801,"byte_end":8992843,"line_start":2192,"line_end":2192,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992844,"byte_end":8992885,"line_start":2193,"line_end":2193,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992886,"byte_end":8992929,"line_start":2194,"line_end":2194,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992930,"byte_end":8992937,"line_start":2195,"line_end":2195,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992938,"byte_end":8992949,"line_start":2196,"line_end":2196,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8992950,"byte_end":8992967,"line_start":2197,"line_end":2197,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993333,"byte_end":8993345,"line_start":2212,"line_end":2212,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993118,"byte_end":8993137,"line_start":2203,"line_end":2203,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993138,"byte_end":8993145,"line_start":2204,"line_end":2204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993146,"byte_end":8993169,"line_start":2205,"line_end":2205,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993170,"byte_end":8993197,"line_start":2206,"line_end":2206,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993198,"byte_end":8993231,"line_start":2207,"line_end":2207,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993232,"byte_end":8993239,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993240,"byte_end":8993251,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993252,"byte_end":8993269,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993626,"byte_end":8993638,"line_start":2225,"line_end":2225,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993402,"byte_end":8993422,"line_start":2216,"line_end":2216,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993423,"byte_end":8993430,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993431,"byte_end":8993454,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993455,"byte_end":8993482,"line_start":2219,"line_end":2219,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993483,"byte_end":8993524,"line_start":2220,"line_end":2220,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993525,"byte_end":8993532,"line_start":2221,"line_end":2221,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993533,"byte_end":8993544,"line_start":2222,"line_end":2222,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993545,"byte_end":8993562,"line_start":2223,"line_end":2223,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994145,"byte_end":8994169,"line_start":2244,"line_end":2244,"column_start":8,"column_end":32},"name":"shuffle_ai_f32_all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_f32_all_m128i","value":"pub fn shuffle_ai_f32_all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `i32` lanes in `$a` using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `i32` lanes in `$a` using an immediate","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993692,"byte_end":8993746,"line_start":2229,"line_end":2229,"column_start":1,"column_end":55}},{"value":"/ control value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993747,"byte_end":8993765,"line_start":2230,"line_end":2230,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993766,"byte_end":8993769,"line_start":2231,"line_end":2231,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993770,"byte_end":8993777,"line_start":2232,"line_end":2232,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993778,"byte_end":8993801,"line_start":2233,"line_end":2233,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([6, 7, 8, 9]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993802,"byte_end":8993840,"line_start":2234,"line_end":2234,"column_start":1,"column_end":39}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993841,"byte_end":8993847,"line_start":2235,"line_end":2235,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_f32_all_m128i::<0b01_10_10_00>(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993848,"byte_end":8993905,"line_start":2236,"line_end":2236,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(<[i32; 4]>::from(c), [6, 8, 8, 7]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993906,"byte_end":8993956,"line_start":2237,"line_end":2237,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993957,"byte_end":8993964,"line_start":2238,"line_end":2238,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_epi32`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8993965,"byte_end":8994007,"line_start":2239,"line_end":2239,"column_start":1,"column_end":43}},{"value":"/ * **Assembly:** `pshufd xmm, xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994008,"byte_end":8994051,"line_start":2240,"line_end":2240,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994052,"byte_end":8994063,"line_start":2241,"line_end":2241,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994064,"byte_end":8994081,"line_start":2242,"line_end":2242,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995258,"byte_end":8995283,"line_start":2272,"line_end":2272,"column_start":8,"column_end":33},"name":"shuffle_abi_f64_all_m128d","qualname":"::x86_x64::sse2::shuffle_abi_f64_all_m128d","value":"pub fn shuffle_abi_f64_all_m128d<const MASK: i32>(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f64` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f64` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994260,"byte_end":8994334,"line_start":2248,"line_end":2248,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994335,"byte_end":8994353,"line_start":2249,"line_end":2249,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994354,"byte_end":8994357,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994358,"byte_end":8994437,"line_start":2251,"line_end":2251,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994438,"byte_end":8994515,"line_start":2252,"line_end":2252,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994516,"byte_end":8994596,"line_start":2253,"line_end":2253,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994597,"byte_end":8994600,"line_start":2254,"line_end":2254,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994601,"byte_end":8994678,"line_start":2255,"line_end":2255,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994679,"byte_end":8994756,"line_start":2256,"line_end":2256,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f64_all_m128d`] instead. You'll get much better performance.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994757,"byte_end":8994834,"line_start":2257,"line_end":2257,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994835,"byte_end":8994842,"line_start":2258,"line_end":2258,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994843,"byte_end":8994866,"line_start":2259,"line_end":2259,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994867,"byte_end":8994909,"line_start":2260,"line_end":2260,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([3.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994910,"byte_end":8994952,"line_start":2261,"line_end":2261,"column_start":1,"column_end":43}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994953,"byte_end":8994959,"line_start":2262,"line_end":2262,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b00>(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8994960,"byte_end":8995023,"line_start":2263,"line_end":2263,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 3.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995024,"byte_end":8995054,"line_start":2264,"line_end":2264,"column_start":1,"column_end":31}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995055,"byte_end":8995061,"line_start":2265,"line_end":2265,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b10>(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995062,"byte_end":8995125,"line_start":2266,"line_end":2266,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995126,"byte_end":8995156,"line_start":2267,"line_end":2267,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995157,"byte_end":8995164,"line_start":2268,"line_end":2268,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995165,"byte_end":8995176,"line_start":2269,"line_end":2269,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995177,"byte_end":8995194,"line_start":2270,"line_end":2270,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995867,"byte_end":8995894,"line_start":2288,"line_end":2288,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_h64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_h64all_m128i","value":"pub fn shuffle_ai_i16_h64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the high `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);\n ```\n * **Intrinsic:** [`_mm_shufflehi_epi16`]\n * **Assembly:** `pshufhw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the high `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995386,"byte_end":8995460,"line_start":2276,"line_end":2276,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995461,"byte_end":8995468,"line_start":2277,"line_end":2277,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995469,"byte_end":8995492,"line_start":2278,"line_end":2278,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995493,"byte_end":8995547,"line_start":2279,"line_end":2279,"column_start":1,"column_end":55}},{"value":"/ let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995548,"byte_end":8995608,"line_start":2280,"line_end":2280,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995609,"byte_end":8995675,"line_start":2281,"line_end":2281,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995676,"byte_end":8995683,"line_start":2282,"line_end":2282,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflehi_epi16`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995684,"byte_end":8995728,"line_start":2283,"line_end":2283,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshufhw xmm, xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995729,"byte_end":8995773,"line_start":2284,"line_end":2284,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995774,"byte_end":8995785,"line_start":2285,"line_end":2285,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995786,"byte_end":8995803,"line_start":2286,"line_end":2286,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996474,"byte_end":8996501,"line_start":2305,"line_end":2305,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_l64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_l64all_m128i","value":"pub fn shuffle_ai_i16_l64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the low `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n //\n let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);\n ```\n * **Intrinsic:** [`_mm_shufflelo_epi16`]\n * **Assembly:** `pshuflw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the low `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8995987,"byte_end":8996060,"line_start":2292,"line_end":2292,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996061,"byte_end":8996068,"line_start":2293,"line_end":2293,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996069,"byte_end":8996092,"line_start":2294,"line_end":2294,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996093,"byte_end":8996147,"line_start":2295,"line_end":2295,"column_start":1,"column_end":55}},{"value":"/ //","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996148,"byte_end":8996154,"line_start":2296,"line_end":2296,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996155,"byte_end":8996215,"line_start":2297,"line_end":2297,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996216,"byte_end":8996282,"line_start":2298,"line_end":2298,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996283,"byte_end":8996290,"line_start":2299,"line_end":2299,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflelo_epi16`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996291,"byte_end":8996335,"line_start":2300,"line_end":2300,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshuflw xmm, xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996336,"byte_end":8996380,"line_start":2301,"line_end":2301,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996381,"byte_end":8996392,"line_start":2302,"line_end":2302,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996393,"byte_end":8996410,"line_start":2303,"line_end":2303,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997065,"byte_end":8997082,"line_start":2322,"line_end":2322,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996594,"byte_end":8996671,"line_start":2309,"line_end":2309,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996672,"byte_end":8996675,"line_start":2310,"line_end":2310,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996676,"byte_end":8996696,"line_start":2311,"line_end":2311,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996697,"byte_end":8996704,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996705,"byte_end":8996728,"line_start":2313,"line_end":2313,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996729,"byte_end":8996783,"line_start":2314,"line_end":2314,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996784,"byte_end":8996820,"line_start":2315,"line_end":2315,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996821,"byte_end":8996874,"line_start":2316,"line_end":2316,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996875,"byte_end":8996963,"line_start":2317,"line_end":2317,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996964,"byte_end":8996971,"line_start":2318,"line_end":2318,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996972,"byte_end":8996983,"line_start":2319,"line_end":2319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8996984,"byte_end":8997001,"line_start":2320,"line_end":2320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997592,"byte_end":8997609,"line_start":2339,"line_end":2339,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997169,"byte_end":8997246,"line_start":2326,"line_end":2326,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997247,"byte_end":8997250,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997251,"byte_end":8997271,"line_start":2328,"line_end":2328,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997272,"byte_end":8997279,"line_start":2329,"line_end":2329,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997280,"byte_end":8997303,"line_start":2330,"line_end":2330,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997304,"byte_end":8997346,"line_start":2331,"line_end":2331,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997347,"byte_end":8997383,"line_start":2332,"line_end":2332,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997384,"byte_end":8997437,"line_start":2333,"line_end":2333,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997438,"byte_end":8997490,"line_start":2334,"line_end":2334,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997491,"byte_end":8997498,"line_start":2335,"line_end":2335,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997499,"byte_end":8997510,"line_start":2336,"line_end":2336,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997511,"byte_end":8997528,"line_start":2337,"line_end":2337,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998097,"byte_end":8998114,"line_start":2356,"line_end":2356,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997696,"byte_end":8997773,"line_start":2343,"line_end":2343,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997774,"byte_end":8997777,"line_start":2344,"line_end":2344,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997778,"byte_end":8997798,"line_start":2345,"line_end":2345,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997799,"byte_end":8997806,"line_start":2346,"line_end":2346,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997807,"byte_end":8997830,"line_start":2347,"line_end":2347,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997831,"byte_end":8997867,"line_start":2348,"line_end":2348,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997868,"byte_end":8997904,"line_start":2349,"line_end":2349,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997905,"byte_end":8997958,"line_start":2350,"line_end":2350,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997959,"byte_end":8997995,"line_start":2351,"line_end":2351,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8997996,"byte_end":8998003,"line_start":2352,"line_end":2352,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998004,"byte_end":8998015,"line_start":2353,"line_end":2353,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998016,"byte_end":8998033,"line_start":2354,"line_end":2354,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998587,"byte_end":8998604,"line_start":2371,"line_end":2371,"column_start":8,"column_end":25},"name":"shl_imm_u16_m128i","qualname":"::x86_x64::sse2::shl_imm_u16_m128i","value":"pub fn shl_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes left by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998201,"byte_end":8998249,"line_start":2360,"line_end":2360,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998250,"byte_end":8998253,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998254,"byte_end":8998261,"line_start":2362,"line_end":2362,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998262,"byte_end":8998285,"line_start":2363,"line_end":2363,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998286,"byte_end":8998340,"line_start":2364,"line_end":2364,"column_start":1,"column_end":55}},{"value":"/ let c: [u16; 8] = shl_imm_u16_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998341,"byte_end":8998396,"line_start":2365,"line_end":2365,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998397,"byte_end":8998485,"line_start":2366,"line_end":2366,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998486,"byte_end":8998493,"line_start":2367,"line_end":2367,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998494,"byte_end":8998505,"line_start":2368,"line_end":2368,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998506,"byte_end":8998523,"line_start":2369,"line_end":2369,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999024,"byte_end":8999041,"line_start":2386,"line_end":2386,"column_start":8,"column_end":25},"name":"shl_imm_u32_m128i","qualname":"::x86_x64::sse2::shl_imm_u32_m128i","value":"pub fn shl_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes left by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998690,"byte_end":8998738,"line_start":2375,"line_end":2375,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998739,"byte_end":8998742,"line_start":2376,"line_end":2376,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998743,"byte_end":8998750,"line_start":2377,"line_end":2377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998751,"byte_end":8998774,"line_start":2378,"line_end":2378,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998775,"byte_end":8998813,"line_start":2379,"line_end":2379,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = shl_imm_u32_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998814,"byte_end":8998869,"line_start":2380,"line_end":2380,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998870,"byte_end":8998922,"line_start":2381,"line_end":2381,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998923,"byte_end":8998930,"line_start":2382,"line_end":2382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998931,"byte_end":8998942,"line_start":2383,"line_end":2383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8998943,"byte_end":8998960,"line_start":2384,"line_end":2384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":777},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999448,"byte_end":8999465,"line_start":2401,"line_end":2401,"column_start":8,"column_end":25},"name":"shl_imm_u64_m128i","qualname":"::x86_x64::sse2::shl_imm_u64_m128i","value":"pub fn shl_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes left by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999127,"byte_end":8999176,"line_start":2390,"line_end":2390,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999177,"byte_end":8999180,"line_start":2391,"line_end":2391,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999181,"byte_end":8999188,"line_start":2392,"line_end":2392,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999189,"byte_end":8999212,"line_start":2393,"line_end":2393,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999213,"byte_end":8999249,"line_start":2394,"line_end":2394,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_imm_u64_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999250,"byte_end":8999305,"line_start":2395,"line_end":2395,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 << 3, 2 << 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999306,"byte_end":8999346,"line_start":2396,"line_end":2396,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999347,"byte_end":8999354,"line_start":2397,"line_end":2397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999355,"byte_end":8999366,"line_start":2398,"line_end":2398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999367,"byte_end":8999384,"line_start":2399,"line_end":2399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999822,"byte_end":8999832,"line_start":2415,"line_end":2415,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999551,"byte_end":8999574,"line_start":2405,"line_end":2405,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999575,"byte_end":8999582,"line_start":2406,"line_end":2406,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999583,"byte_end":8999606,"line_start":2407,"line_end":2407,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999607,"byte_end":8999651,"line_start":2408,"line_end":2408,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999652,"byte_end":8999689,"line_start":2409,"line_end":2409,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999690,"byte_end":8999720,"line_start":2410,"line_end":2410,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999721,"byte_end":8999728,"line_start":2411,"line_end":2411,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999729,"byte_end":8999740,"line_start":2412,"line_end":2412,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999741,"byte_end":8999758,"line_start":2413,"line_end":2413,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000246,"byte_end":9000258,"line_start":2430,"line_end":2430,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999894,"byte_end":8999951,"line_start":2419,"line_end":2419,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999952,"byte_end":8999959,"line_start":2420,"line_end":2420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999960,"byte_end":8999983,"line_start":2421,"line_end":2421,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":8999984,"byte_end":9000026,"line_start":2422,"line_end":2422,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000027,"byte_end":9000070,"line_start":2423,"line_end":2423,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000071,"byte_end":9000102,"line_start":2424,"line_end":2424,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000103,"byte_end":9000144,"line_start":2425,"line_end":2425,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000145,"byte_end":9000152,"line_start":2426,"line_end":2426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000153,"byte_end":9000164,"line_start":2427,"line_end":2427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000165,"byte_end":9000182,"line_start":2428,"line_end":2428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000825,"byte_end":9000842,"line_start":2447,"line_end":2447,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000335,"byte_end":9000413,"line_start":2434,"line_end":2434,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000414,"byte_end":9000417,"line_start":2435,"line_end":2435,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000418,"byte_end":9000448,"line_start":2436,"line_end":2436,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000449,"byte_end":9000456,"line_start":2437,"line_end":2437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000457,"byte_end":9000480,"line_start":2438,"line_end":2438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000481,"byte_end":9000539,"line_start":2439,"line_end":2439,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000540,"byte_end":9000576,"line_start":2440,"line_end":2440,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000577,"byte_end":9000630,"line_start":2441,"line_end":2441,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000631,"byte_end":9000723,"line_start":2442,"line_end":2442,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000724,"byte_end":9000731,"line_start":2443,"line_end":2443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000732,"byte_end":9000743,"line_start":2444,"line_end":2444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000744,"byte_end":9000761,"line_start":2445,"line_end":2445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001367,"byte_end":9001384,"line_start":2464,"line_end":2464,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9000929,"byte_end":9001007,"line_start":2451,"line_end":2451,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001008,"byte_end":9001011,"line_start":2452,"line_end":2452,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001012,"byte_end":9001042,"line_start":2453,"line_end":2453,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001043,"byte_end":9001050,"line_start":2454,"line_end":2454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001051,"byte_end":9001074,"line_start":2455,"line_end":2455,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001075,"byte_end":9001119,"line_start":2456,"line_end":2456,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001120,"byte_end":9001156,"line_start":2457,"line_end":2457,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001157,"byte_end":9001210,"line_start":2458,"line_end":2458,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001211,"byte_end":9001265,"line_start":2459,"line_end":2459,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001266,"byte_end":9001273,"line_start":2460,"line_end":2460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001274,"byte_end":9001285,"line_start":2461,"line_end":2461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001286,"byte_end":9001303,"line_start":2462,"line_end":2462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001901,"byte_end":9001918,"line_start":2481,"line_end":2481,"column_start":8,"column_end":25},"name":"shr_imm_i16_m128i","qualname":"::x86_x64::sse2::shr_imm_i16_m128i","value":"pub fn shr_imm_i16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i16` lanes right by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001471,"byte_end":9001520,"line_start":2468,"line_end":2468,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001521,"byte_end":9001524,"line_start":2469,"line_end":2469,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001525,"byte_end":9001555,"line_start":2470,"line_end":2470,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001556,"byte_end":9001559,"line_start":2471,"line_end":2471,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001560,"byte_end":9001567,"line_start":2472,"line_end":2472,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001568,"byte_end":9001591,"line_start":2473,"line_end":2473,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001592,"byte_end":9001650,"line_start":2474,"line_end":2474,"column_start":1,"column_end":59}},{"value":"/ let c: [i16; 8] = shr_imm_i16_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001651,"byte_end":9001706,"line_start":2475,"line_end":2475,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001707,"byte_end":9001799,"line_start":2476,"line_end":2476,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001800,"byte_end":9001807,"line_start":2477,"line_end":2477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001808,"byte_end":9001819,"line_start":2478,"line_end":2478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9001820,"byte_end":9001837,"line_start":2479,"line_end":2479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002378,"byte_end":9002395,"line_start":2498,"line_end":2498,"column_start":8,"column_end":25},"name":"shr_imm_i32_m128i","qualname":"::x86_x64::sse2::shr_imm_i32_m128i","value":"pub fn shr_imm_i32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i32` lanes right by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002004,"byte_end":9002053,"line_start":2485,"line_end":2485,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002054,"byte_end":9002057,"line_start":2486,"line_end":2486,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002058,"byte_end":9002088,"line_start":2487,"line_end":2487,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002089,"byte_end":9002092,"line_start":2488,"line_end":2488,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002093,"byte_end":9002100,"line_start":2489,"line_end":2489,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002101,"byte_end":9002124,"line_start":2490,"line_end":2490,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002125,"byte_end":9002165,"line_start":2491,"line_end":2491,"column_start":1,"column_end":41}},{"value":"/ let c: [i32; 4] = shr_imm_i32_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002166,"byte_end":9002221,"line_start":2492,"line_end":2492,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002222,"byte_end":9002276,"line_start":2493,"line_end":2493,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002277,"byte_end":9002284,"line_start":2494,"line_end":2494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002285,"byte_end":9002296,"line_start":2495,"line_end":2495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002297,"byte_end":9002314,"line_start":2496,"line_end":2496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002949,"byte_end":9002966,"line_start":2514,"line_end":2514,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002481,"byte_end":9002559,"line_start":2502,"line_end":2502,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002560,"byte_end":9002563,"line_start":2503,"line_end":2503,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002564,"byte_end":9002571,"line_start":2504,"line_end":2504,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002572,"byte_end":9002595,"line_start":2505,"line_end":2505,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002596,"byte_end":9002658,"line_start":2506,"line_end":2506,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002659,"byte_end":9002695,"line_start":2507,"line_end":2507,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002696,"byte_end":9002749,"line_start":2508,"line_end":2508,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002750,"byte_end":9002847,"line_start":2509,"line_end":2509,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002848,"byte_end":9002855,"line_start":2510,"line_end":2510,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002856,"byte_end":9002867,"line_start":2511,"line_end":2511,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9002868,"byte_end":9002885,"line_start":2512,"line_end":2512,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":788},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003465,"byte_end":9003482,"line_start":2530,"line_end":2530,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003053,"byte_end":9003131,"line_start":2518,"line_end":2518,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003132,"byte_end":9003135,"line_start":2519,"line_end":2519,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003136,"byte_end":9003143,"line_start":2520,"line_end":2520,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003144,"byte_end":9003167,"line_start":2521,"line_end":2521,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003168,"byte_end":9003214,"line_start":2522,"line_end":2522,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003215,"byte_end":9003251,"line_start":2523,"line_end":2523,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003252,"byte_end":9003305,"line_start":2524,"line_end":2524,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003306,"byte_end":9003363,"line_start":2525,"line_end":2525,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003364,"byte_end":9003371,"line_start":2526,"line_end":2526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003372,"byte_end":9003383,"line_start":2527,"line_end":2527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003384,"byte_end":9003401,"line_start":2528,"line_end":2528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003973,"byte_end":9003990,"line_start":2547,"line_end":2547,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003569,"byte_end":9003647,"line_start":2534,"line_end":2534,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003648,"byte_end":9003651,"line_start":2535,"line_end":2535,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003652,"byte_end":9003672,"line_start":2536,"line_end":2536,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003673,"byte_end":9003680,"line_start":2537,"line_end":2537,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003681,"byte_end":9003704,"line_start":2538,"line_end":2538,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003705,"byte_end":9003742,"line_start":2539,"line_end":2539,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003743,"byte_end":9003779,"line_start":2540,"line_end":2540,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003780,"byte_end":9003833,"line_start":2541,"line_end":2541,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003834,"byte_end":9003871,"line_start":2542,"line_end":2542,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003872,"byte_end":9003879,"line_start":2543,"line_end":2543,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003880,"byte_end":9003891,"line_start":2544,"line_end":2544,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9003892,"byte_end":9003909,"line_start":2545,"line_end":2545,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004584,"byte_end":9004601,"line_start":2566,"line_end":2566,"column_start":8,"column_end":25},"name":"shr_imm_u16_m128i","qualname":"::x86_x64::sse2::shr_imm_u16_m128i","value":"pub fn shr_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes right by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004077,"byte_end":9004126,"line_start":2551,"line_end":2551,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004127,"byte_end":9004130,"line_start":2552,"line_end":2552,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004131,"byte_end":9004151,"line_start":2553,"line_end":2553,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004152,"byte_end":9004155,"line_start":2554,"line_end":2554,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004156,"byte_end":9004163,"line_start":2555,"line_end":2555,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004164,"byte_end":9004187,"line_start":2556,"line_end":2556,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004188,"byte_end":9004250,"line_start":2557,"line_end":2557,"column_start":1,"column_end":63}},{"value":"/ let c: [u16; 8] = shr_imm_u16_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004251,"byte_end":9004306,"line_start":2558,"line_end":2558,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004307,"byte_end":9004404,"line_start":2559,"line_end":2559,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004405,"byte_end":9004412,"line_start":2560,"line_end":2560,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi16`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004413,"byte_end":9004452,"line_start":2561,"line_end":2561,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlw xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004453,"byte_end":9004490,"line_start":2562,"line_end":2562,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004491,"byte_end":9004502,"line_start":2563,"line_end":2563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004503,"byte_end":9004520,"line_start":2564,"line_end":2564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005108,"byte_end":9005125,"line_start":2583,"line_end":2583,"column_start":8,"column_end":25},"name":"shr_imm_u32_m128i","qualname":"::x86_x64::sse2::shr_imm_u32_m128i","value":"pub fn shr_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes right by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004687,"byte_end":9004736,"line_start":2570,"line_end":2570,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004737,"byte_end":9004740,"line_start":2571,"line_end":2571,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004741,"byte_end":9004748,"line_start":2572,"line_end":2572,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004749,"byte_end":9004772,"line_start":2573,"line_end":2573,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 300, 400]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004773,"byte_end":9004815,"line_start":2574,"line_end":2574,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = shr_imm_u32_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004816,"byte_end":9004871,"line_start":2575,"line_end":2575,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004872,"byte_end":9004928,"line_start":2576,"line_end":2576,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004929,"byte_end":9004936,"line_start":2577,"line_end":2577,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi32`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004937,"byte_end":9004976,"line_start":2578,"line_end":2578,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrld xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9004977,"byte_end":9005014,"line_start":2579,"line_end":2579,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005015,"byte_end":9005026,"line_start":2580,"line_end":2580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005027,"byte_end":9005044,"line_start":2581,"line_end":2581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005615,"byte_end":9005632,"line_start":2600,"line_end":2600,"column_start":8,"column_end":25},"name":"shr_imm_u64_m128i","qualname":"::x86_x64::sse2::shr_imm_u64_m128i","value":"pub fn shr_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes right by an immediate.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005211,"byte_end":9005261,"line_start":2587,"line_end":2587,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005262,"byte_end":9005265,"line_start":2588,"line_end":2588,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005266,"byte_end":9005273,"line_start":2589,"line_end":2589,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005274,"byte_end":9005297,"line_start":2590,"line_end":2590,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 200]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005298,"byte_end":9005336,"line_start":2591,"line_end":2591,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = shr_imm_u64_m128i::<3>(a).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005337,"byte_end":9005392,"line_start":2592,"line_end":2592,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 >> 3, 200 >> 3]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005393,"byte_end":9005435,"line_start":2593,"line_end":2593,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005436,"byte_end":9005443,"line_start":2594,"line_end":2594,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi64`]","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005444,"byte_end":9005483,"line_start":2595,"line_end":2595,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlq xmm, imm8`","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005484,"byte_end":9005521,"line_start":2596,"line_end":2596,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005522,"byte_end":9005533,"line_start":2597,"line_end":2597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005534,"byte_end":9005551,"line_start":2598,"line_end":2598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006048,"byte_end":9006059,"line_start":2615,"line_end":2615,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005718,"byte_end":9005762,"line_start":2604,"line_end":2604,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005763,"byte_end":9005770,"line_start":2605,"line_end":2605,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005771,"byte_end":9005794,"line_start":2606,"line_end":2606,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005795,"byte_end":9005839,"line_start":2607,"line_end":2607,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005840,"byte_end":9005871,"line_start":2608,"line_end":2608,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005872,"byte_end":9005899,"line_start":2609,"line_end":2609,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005900,"byte_end":9005925,"line_start":2610,"line_end":2610,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005926,"byte_end":9005958,"line_start":2611,"line_end":2611,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005959,"byte_end":9005966,"line_start":2612,"line_end":2612,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9005967,"byte_end":9005984,"line_start":2613,"line_end":2613,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006446,"byte_end":9006459,"line_start":2629,"line_end":2629,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006150,"byte_end":9006203,"line_start":2619,"line_end":2619,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006204,"byte_end":9006211,"line_start":2620,"line_end":2620,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006212,"byte_end":9006235,"line_start":2621,"line_end":2621,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006236,"byte_end":9006280,"line_start":2622,"line_end":2622,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006281,"byte_end":9006301,"line_start":2623,"line_end":2623,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006302,"byte_end":9006331,"line_start":2624,"line_end":2624,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006332,"byte_end":9006356,"line_start":2625,"line_end":2625,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006357,"byte_end":9006364,"line_start":2626,"line_end":2626,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006365,"byte_end":9006382,"line_start":2627,"line_end":2627,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006892,"byte_end":9006909,"line_start":2644,"line_end":2644,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006534,"byte_end":9006600,"line_start":2633,"line_end":2633,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006601,"byte_end":9006608,"line_start":2634,"line_end":2634,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006609,"byte_end":9006632,"line_start":2635,"line_end":2635,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006633,"byte_end":9006677,"line_start":2636,"line_end":2636,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006678,"byte_end":9006709,"line_start":2637,"line_end":2637,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006710,"byte_end":9006743,"line_start":2638,"line_end":2638,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006744,"byte_end":9006769,"line_start":2639,"line_end":2639,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006770,"byte_end":9006802,"line_start":2640,"line_end":2640,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006803,"byte_end":9006810,"line_start":2641,"line_end":2641,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9006811,"byte_end":9006828,"line_start":2642,"line_end":2642,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007331,"byte_end":9007342,"line_start":2659,"line_end":2659,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007001,"byte_end":9007045,"line_start":2648,"line_end":2648,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007046,"byte_end":9007053,"line_start":2649,"line_end":2649,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007054,"byte_end":9007077,"line_start":2650,"line_end":2650,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007078,"byte_end":9007116,"line_start":2651,"line_end":2651,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007117,"byte_end":9007148,"line_start":2652,"line_end":2652,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007149,"byte_end":9007176,"line_start":2653,"line_end":2653,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007177,"byte_end":9007208,"line_start":2654,"line_end":2654,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007209,"byte_end":9007241,"line_start":2655,"line_end":2655,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007242,"byte_end":9007249,"line_start":2656,"line_end":2656,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007250,"byte_end":9007267,"line_start":2657,"line_end":2657,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007719,"byte_end":9007737,"line_start":2673,"line_end":2673,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007417,"byte_end":9007471,"line_start":2663,"line_end":2663,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007472,"byte_end":9007479,"line_start":2664,"line_end":2664,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007480,"byte_end":9007503,"line_start":2665,"line_end":2665,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007504,"byte_end":9007548,"line_start":2666,"line_end":2666,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007549,"byte_end":9007569,"line_start":2667,"line_end":2667,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007570,"byte_end":9007604,"line_start":2668,"line_end":2668,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007605,"byte_end":9007629,"line_start":2669,"line_end":2669,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007630,"byte_end":9007637,"line_start":2670,"line_end":2670,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007638,"byte_end":9007655,"line_start":2671,"line_end":2671,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008136,"byte_end":9008153,"line_start":2688,"line_end":2688,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007813,"byte_end":9007857,"line_start":2677,"line_end":2677,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007858,"byte_end":9007865,"line_start":2678,"line_end":2678,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007866,"byte_end":9007889,"line_start":2679,"line_end":2679,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007890,"byte_end":9007926,"line_start":2680,"line_end":2680,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007927,"byte_end":9007949,"line_start":2681,"line_end":2681,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007950,"byte_end":9007983,"line_start":2682,"line_end":2682,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9007984,"byte_end":9008009,"line_start":2683,"line_end":2683,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008010,"byte_end":9008017,"line_start":2684,"line_end":2684,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008018,"byte_end":9008035,"line_start":2685,"line_end":2685,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008036,"byte_end":9008072,"line_start":2686,"line_end":2686,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008587,"byte_end":9008607,"line_start":2703,"line_end":2703,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008248,"byte_end":9008292,"line_start":2692,"line_end":2692,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008293,"byte_end":9008300,"line_start":2693,"line_end":2693,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008301,"byte_end":9008324,"line_start":2694,"line_end":2694,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008325,"byte_end":9008369,"line_start":2695,"line_end":2695,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008370,"byte_end":9008401,"line_start":2696,"line_end":2696,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008402,"byte_end":9008438,"line_start":2697,"line_end":2697,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008439,"byte_end":9008464,"line_start":2698,"line_end":2698,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008465,"byte_end":9008497,"line_start":2699,"line_end":2699,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008498,"byte_end":9008505,"line_start":2700,"line_end":2700,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008506,"byte_end":9008523,"line_start":2701,"line_end":2701,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009009,"byte_end":9009030,"line_start":2717,"line_end":2717,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008699,"byte_end":9008743,"line_start":2707,"line_end":2707,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008744,"byte_end":9008751,"line_start":2708,"line_end":2708,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008752,"byte_end":9008775,"line_start":2709,"line_end":2709,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008776,"byte_end":9008820,"line_start":2710,"line_end":2710,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008821,"byte_end":9008848,"line_start":2711,"line_end":2711,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008849,"byte_end":9008886,"line_start":2712,"line_end":2712,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008887,"byte_end":9008919,"line_start":2713,"line_end":2713,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008920,"byte_end":9008927,"line_start":2714,"line_end":2714,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9008928,"byte_end":9008945,"line_start":2715,"line_end":2715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009506,"byte_end":9009527,"line_start":2731,"line_end":2731,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009112,"byte_end":9009156,"line_start":2721,"line_end":2721,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009157,"byte_end":9009164,"line_start":2722,"line_end":2722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009165,"byte_end":9009188,"line_start":2723,"line_end":2723,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009189,"byte_end":9009272,"line_start":2724,"line_end":2724,"column_start":1,"column_end":84}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009273,"byte_end":9009300,"line_start":2725,"line_end":2725,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009301,"byte_end":9009338,"line_start":2726,"line_end":2726,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009339,"byte_end":9009416,"line_start":2727,"line_end":2727,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009417,"byte_end":9009424,"line_start":2728,"line_end":2728,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009425,"byte_end":9009442,"line_start":2729,"line_end":2729,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010108,"byte_end":9010120,"line_start":2746,"line_end":2746,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009619,"byte_end":9009659,"line_start":2735,"line_end":2735,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009660,"byte_end":9009667,"line_start":2736,"line_end":2736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009668,"byte_end":9009691,"line_start":2737,"line_end":2737,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009692,"byte_end":9009775,"line_start":2738,"line_end":2738,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009776,"byte_end":9009867,"line_start":2739,"line_end":2739,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009868,"byte_end":9009916,"line_start":2740,"line_end":2740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9009917,"byte_end":9010006,"line_start":2741,"line_end":2741,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010007,"byte_end":9010014,"line_start":2742,"line_end":2742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010015,"byte_end":9010026,"line_start":2743,"line_end":2743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010027,"byte_end":9010044,"line_start":2744,"line_end":2744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010606,"byte_end":9010619,"line_start":2761,"line_end":2761,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010198,"byte_end":9010239,"line_start":2750,"line_end":2750,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010240,"byte_end":9010247,"line_start":2751,"line_end":2751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010248,"byte_end":9010271,"line_start":2752,"line_end":2752,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010272,"byte_end":9010330,"line_start":2753,"line_end":2753,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010331,"byte_end":9010396,"line_start":2754,"line_end":2754,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010397,"byte_end":9010446,"line_start":2755,"line_end":2755,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010447,"byte_end":9010504,"line_start":2756,"line_end":2756,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010505,"byte_end":9010512,"line_start":2757,"line_end":2757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010513,"byte_end":9010524,"line_start":2758,"line_end":2758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010525,"byte_end":9010542,"line_start":2759,"line_end":2759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011046,"byte_end":9011059,"line_start":2776,"line_end":2776,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010698,"byte_end":9010739,"line_start":2765,"line_end":2765,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010740,"byte_end":9010747,"line_start":2766,"line_end":2766,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010748,"byte_end":9010771,"line_start":2767,"line_end":2767,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010772,"byte_end":9010810,"line_start":2768,"line_end":2768,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010811,"byte_end":9010853,"line_start":2769,"line_end":2769,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010854,"byte_end":9010903,"line_start":2770,"line_end":2770,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010904,"byte_end":9010944,"line_start":2771,"line_end":2771,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010945,"byte_end":9010952,"line_start":2772,"line_end":2772,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010953,"byte_end":9010964,"line_start":2773,"line_end":2773,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9010965,"byte_end":9010982,"line_start":2774,"line_end":2774,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011474,"byte_end":9011487,"line_start":2791,"line_end":2791,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011138,"byte_end":9011179,"line_start":2780,"line_end":2780,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011180,"byte_end":9011187,"line_start":2781,"line_end":2781,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011188,"byte_end":9011211,"line_start":2782,"line_end":2782,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011212,"byte_end":9011250,"line_start":2783,"line_end":2783,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011251,"byte_end":9011291,"line_start":2784,"line_end":2784,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011292,"byte_end":9011341,"line_start":2785,"line_end":2785,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011342,"byte_end":9011372,"line_start":2786,"line_end":2786,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011373,"byte_end":9011380,"line_start":2787,"line_end":2787,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011381,"byte_end":9011392,"line_start":2788,"line_end":2788,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011393,"byte_end":9011410,"line_start":2789,"line_end":2789,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011885,"byte_end":9011894,"line_start":2806,"line_end":2806,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011566,"byte_end":9011587,"line_start":2795,"line_end":2795,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011588,"byte_end":9011595,"line_start":2796,"line_end":2796,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011596,"byte_end":9011619,"line_start":2797,"line_end":2797,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011620,"byte_end":9011664,"line_start":2798,"line_end":2798,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011665,"byte_end":9011710,"line_start":2799,"line_end":2799,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011711,"byte_end":9011750,"line_start":2800,"line_end":2800,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011751,"byte_end":9011783,"line_start":2801,"line_end":2801,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011784,"byte_end":9011791,"line_start":2802,"line_end":2802,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011792,"byte_end":9011803,"line_start":2803,"line_end":2803,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011804,"byte_end":9011821,"line_start":2804,"line_end":2804,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":812},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012317,"byte_end":9012328,"line_start":2821,"line_end":2821,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9011970,"byte_end":9012015,"line_start":2810,"line_end":2810,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012016,"byte_end":9012023,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012024,"byte_end":9012047,"line_start":2812,"line_end":2812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012048,"byte_end":9012092,"line_start":2813,"line_end":2813,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012093,"byte_end":9012140,"line_start":2814,"line_end":2814,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012141,"byte_end":9012182,"line_start":2815,"line_end":2815,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012183,"byte_end":9012215,"line_start":2816,"line_end":2816,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012216,"byte_end":9012223,"line_start":2817,"line_end":2817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012224,"byte_end":9012235,"line_start":2818,"line_end":2818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012236,"byte_end":9012253,"line_start":2819,"line_end":2819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012920,"byte_end":9012943,"line_start":2836,"line_end":2836,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012404,"byte_end":9012455,"line_start":2825,"line_end":2825,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012456,"byte_end":9012463,"line_start":2826,"line_end":2826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012464,"byte_end":9012487,"line_start":2827,"line_end":2827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012488,"byte_end":9012576,"line_start":2828,"line_end":2828,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012577,"byte_end":9012667,"line_start":2829,"line_end":2829,"column_start":1,"column_end":91}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012668,"byte_end":9012727,"line_start":2830,"line_end":2830,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012728,"byte_end":9012818,"line_start":2831,"line_end":2831,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012819,"byte_end":9012826,"line_start":2832,"line_end":2832,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012827,"byte_end":9012838,"line_start":2833,"line_end":2833,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9012839,"byte_end":9012856,"line_start":2834,"line_end":2834,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013461,"byte_end":9013485,"line_start":2851,"line_end":2851,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013022,"byte_end":9013074,"line_start":2840,"line_end":2840,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013075,"byte_end":9013082,"line_start":2841,"line_end":2841,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013083,"byte_end":9013106,"line_start":2842,"line_end":2842,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013107,"byte_end":9013165,"line_start":2843,"line_end":2843,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013166,"byte_end":9013236,"line_start":2844,"line_end":2844,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013237,"byte_end":9013297,"line_start":2845,"line_end":2845,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013298,"byte_end":9013359,"line_start":2846,"line_end":2846,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013360,"byte_end":9013367,"line_start":2847,"line_end":2847,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013368,"byte_end":9013379,"line_start":2848,"line_end":2848,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013380,"byte_end":9013397,"line_start":2849,"line_end":2849,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014063,"byte_end":9014086,"line_start":2866,"line_end":2866,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013565,"byte_end":9013616,"line_start":2855,"line_end":2855,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013617,"byte_end":9013624,"line_start":2856,"line_end":2856,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013625,"byte_end":9013648,"line_start":2857,"line_end":2857,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013649,"byte_end":9013736,"line_start":2858,"line_end":2858,"column_start":1,"column_end":88}},{"value":"/ let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013737,"byte_end":9013825,"line_start":2859,"line_end":2859,"column_start":1,"column_end":89}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013826,"byte_end":9013885,"line_start":2860,"line_end":2860,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013886,"byte_end":9013961,"line_start":2861,"line_end":2861,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013962,"byte_end":9013969,"line_start":2862,"line_end":2862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013970,"byte_end":9013981,"line_start":2863,"line_end":2863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9013982,"byte_end":9013999,"line_start":2864,"line_end":2864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014610,"byte_end":9014634,"line_start":2881,"line_end":2881,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014165,"byte_end":9014217,"line_start":2870,"line_end":2870,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014218,"byte_end":9014225,"line_start":2871,"line_end":2871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014226,"byte_end":9014249,"line_start":2872,"line_end":2872,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014250,"byte_end":9014320,"line_start":2873,"line_end":2873,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014321,"byte_end":9014393,"line_start":2874,"line_end":2874,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014394,"byte_end":9014454,"line_start":2875,"line_end":2875,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014455,"byte_end":9014508,"line_start":2876,"line_end":2876,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014509,"byte_end":9014516,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014517,"byte_end":9014528,"line_start":2878,"line_end":2878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014529,"byte_end":9014546,"line_start":2879,"line_end":2879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015223,"byte_end":9015243,"line_start":2896,"line_end":2896,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014714,"byte_end":9014771,"line_start":2885,"line_end":2885,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014772,"byte_end":9014779,"line_start":2886,"line_end":2886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014780,"byte_end":9014803,"line_start":2887,"line_end":2887,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014804,"byte_end":9014887,"line_start":2888,"line_end":2888,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014888,"byte_end":9014979,"line_start":2889,"line_end":2889,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9014980,"byte_end":9015036,"line_start":2890,"line_end":2890,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015037,"byte_end":9015121,"line_start":2891,"line_end":2891,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015122,"byte_end":9015129,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015130,"byte_end":9015141,"line_start":2893,"line_end":2893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015142,"byte_end":9015159,"line_start":2894,"line_end":2894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015753,"byte_end":9015774,"line_start":2911,"line_end":2911,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015326,"byte_end":9015384,"line_start":2900,"line_end":2900,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015385,"byte_end":9015392,"line_start":2901,"line_end":2901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015393,"byte_end":9015416,"line_start":2902,"line_end":2902,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015417,"byte_end":9015475,"line_start":2903,"line_end":2903,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015476,"byte_end":9015537,"line_start":2904,"line_end":2904,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015538,"byte_end":9015595,"line_start":2905,"line_end":2905,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015596,"byte_end":9015651,"line_start":2906,"line_end":2906,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015652,"byte_end":9015659,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015660,"byte_end":9015671,"line_start":2908,"line_end":2908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015672,"byte_end":9015689,"line_start":2909,"line_end":2909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016219,"byte_end":9016240,"line_start":2926,"line_end":2926,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015858,"byte_end":9015916,"line_start":2915,"line_end":2915,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015917,"byte_end":9015924,"line_start":2916,"line_end":2916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015925,"byte_end":9015948,"line_start":2917,"line_end":2917,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015949,"byte_end":9015987,"line_start":2918,"line_end":2918,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9015988,"byte_end":9016026,"line_start":2919,"line_end":2919,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016027,"byte_end":9016084,"line_start":2920,"line_end":2920,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016085,"byte_end":9016117,"line_start":2921,"line_end":2921,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016118,"byte_end":9016125,"line_start":2922,"line_end":2922,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016126,"byte_end":9016137,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016138,"byte_end":9016155,"line_start":2924,"line_end":2924,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":820},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016682,"byte_end":9016703,"line_start":2941,"line_end":2941,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016324,"byte_end":9016382,"line_start":2930,"line_end":2930,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016383,"byte_end":9016390,"line_start":2931,"line_end":2931,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016391,"byte_end":9016414,"line_start":2932,"line_end":2932,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016415,"byte_end":9016453,"line_start":2933,"line_end":2933,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016454,"byte_end":9016494,"line_start":2934,"line_end":2934,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016495,"byte_end":9016552,"line_start":2935,"line_end":2935,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016553,"byte_end":9016580,"line_start":2936,"line_end":2936,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016581,"byte_end":9016588,"line_start":2937,"line_end":2937,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016589,"byte_end":9016600,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016601,"byte_end":9016618,"line_start":2939,"line_end":2939,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017145,"byte_end":9017162,"line_start":2956,"line_end":2956,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016787,"byte_end":9016839,"line_start":2945,"line_end":2945,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016840,"byte_end":9016847,"line_start":2946,"line_end":2946,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016848,"byte_end":9016871,"line_start":2947,"line_end":2947,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016872,"byte_end":9016916,"line_start":2948,"line_end":2948,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016917,"byte_end":9016962,"line_start":2949,"line_end":2949,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9016963,"byte_end":9017010,"line_start":2950,"line_end":2950,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017011,"byte_end":9017043,"line_start":2951,"line_end":2951,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017044,"byte_end":9017051,"line_start":2952,"line_end":2952,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017052,"byte_end":9017063,"line_start":2953,"line_end":2953,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017064,"byte_end":9017081,"line_start":2954,"line_end":2954,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":822},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017746,"byte_end":9017765,"line_start":2971,"line_end":2971,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017243,"byte_end":9017299,"line_start":2960,"line_end":2960,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017300,"byte_end":9017307,"line_start":2961,"line_end":2961,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017308,"byte_end":9017331,"line_start":2962,"line_end":2962,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017332,"byte_end":9017415,"line_start":2963,"line_end":2963,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017416,"byte_end":9017511,"line_start":2964,"line_end":2964,"column_start":1,"column_end":96}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017512,"byte_end":9017567,"line_start":2965,"line_end":2965,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017568,"byte_end":9017644,"line_start":2966,"line_end":2966,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017645,"byte_end":9017652,"line_start":2967,"line_end":2967,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017653,"byte_end":9017664,"line_start":2968,"line_end":2968,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017665,"byte_end":9017682,"line_start":2969,"line_end":2969,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018262,"byte_end":9018282,"line_start":2986,"line_end":2986,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017848,"byte_end":9017905,"line_start":2975,"line_end":2975,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017906,"byte_end":9017913,"line_start":2976,"line_end":2976,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017914,"byte_end":9017937,"line_start":2977,"line_end":2977,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017938,"byte_end":9017996,"line_start":2978,"line_end":2978,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9017997,"byte_end":9018058,"line_start":2979,"line_end":2979,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018059,"byte_end":9018115,"line_start":2980,"line_end":2980,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018116,"byte_end":9018160,"line_start":2981,"line_end":2981,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018161,"byte_end":9018168,"line_start":2982,"line_end":2982,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018169,"byte_end":9018180,"line_start":2983,"line_end":2983,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018181,"byte_end":9018198,"line_start":2984,"line_end":2984,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018725,"byte_end":9018745,"line_start":3001,"line_end":3001,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018366,"byte_end":9018423,"line_start":2990,"line_end":2990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018424,"byte_end":9018431,"line_start":2991,"line_end":2991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018432,"byte_end":9018455,"line_start":2992,"line_end":2992,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018456,"byte_end":9018494,"line_start":2993,"line_end":2993,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018495,"byte_end":9018533,"line_start":2994,"line_end":2994,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018534,"byte_end":9018590,"line_start":2995,"line_end":2995,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018591,"byte_end":9018623,"line_start":2996,"line_end":2996,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018624,"byte_end":9018631,"line_start":2997,"line_end":2997,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018632,"byte_end":9018643,"line_start":2998,"line_end":2998,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018644,"byte_end":9018661,"line_start":2999,"line_end":2999,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019189,"byte_end":9019209,"line_start":3016,"line_end":3016,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018829,"byte_end":9018886,"line_start":3005,"line_end":3005,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018887,"byte_end":9018894,"line_start":3006,"line_end":3006,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018895,"byte_end":9018918,"line_start":3007,"line_end":3007,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018919,"byte_end":9018957,"line_start":3008,"line_end":3008,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018958,"byte_end":9018998,"line_start":3009,"line_end":3009,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9018999,"byte_end":9019055,"line_start":3010,"line_end":3010,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019056,"byte_end":9019087,"line_start":3011,"line_end":3011,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019088,"byte_end":9019095,"line_start":3012,"line_end":3012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019096,"byte_end":9019107,"line_start":3013,"line_end":3013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019108,"byte_end":9019125,"line_start":3014,"line_end":3014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019650,"byte_end":9019666,"line_start":3031,"line_end":3031,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019293,"byte_end":9019344,"line_start":3020,"line_end":3020,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019345,"byte_end":9019352,"line_start":3021,"line_end":3021,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019353,"byte_end":9019376,"line_start":3022,"line_end":3022,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019377,"byte_end":9019421,"line_start":3023,"line_end":3023,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019422,"byte_end":9019467,"line_start":3024,"line_end":3024,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019468,"byte_end":9019514,"line_start":3025,"line_end":3025,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019515,"byte_end":9019548,"line_start":3026,"line_end":3026,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019549,"byte_end":9019556,"line_start":3027,"line_end":3027,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019557,"byte_end":9019568,"line_start":3028,"line_end":3028,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019569,"byte_end":9019586,"line_start":3029,"line_end":3029,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020061,"byte_end":9020073,"line_start":3046,"line_end":3046,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019747,"byte_end":9019767,"line_start":3035,"line_end":3035,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019768,"byte_end":9019775,"line_start":3036,"line_end":3036,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019776,"byte_end":9019799,"line_start":3037,"line_end":3037,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019800,"byte_end":9019842,"line_start":3038,"line_end":3038,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019843,"byte_end":9019885,"line_start":3039,"line_end":3039,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019886,"byte_end":9019928,"line_start":3040,"line_end":3040,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019929,"byte_end":9019959,"line_start":3041,"line_end":3041,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019960,"byte_end":9019967,"line_start":3042,"line_end":3042,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019968,"byte_end":9019979,"line_start":3043,"line_end":3043,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9019980,"byte_end":9019997,"line_start":3044,"line_end":3044,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020463,"byte_end":9020475,"line_start":3061,"line_end":3061,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020149,"byte_end":9020169,"line_start":3050,"line_end":3050,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020170,"byte_end":9020177,"line_start":3051,"line_end":3051,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020178,"byte_end":9020201,"line_start":3052,"line_end":3052,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020202,"byte_end":9020240,"line_start":3053,"line_end":3053,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020241,"byte_end":9020279,"line_start":3054,"line_end":3054,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020280,"byte_end":9020328,"line_start":3055,"line_end":3055,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020329,"byte_end":9020361,"line_start":3056,"line_end":3056,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020362,"byte_end":9020369,"line_start":3057,"line_end":3057,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020370,"byte_end":9020381,"line_start":3058,"line_end":3058,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9020382,"byte_end":9020399,"line_start":3059,"line_end":3059,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":10541,"byte_end":10563,"line_start":233,"line_end":233,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":11408,"byte_end":11432,"line_start":253,"line_end":253,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":11723,"byte_end":11736,"line_start":265,"line_end":265,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":12067,"byte_end":12080,"line_start":278,"line_end":278,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":12029,"byte_end":12057,"line_start":277,"line_end":277,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841745,"byte_end":8841749,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841812,"byte_end":8841816,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841902,"byte_end":8841906,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841916,"byte_end":8841920,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842938,"byte_end":8842942,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843037,"byte_end":8843041,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843063,"byte_end":8843067,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843195,"byte_end":8843199,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843797,"byte_end":8843801,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8844119,"byte_end":8844123,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8844482,"byte_end":8844486,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8844851,"byte_end":8844855,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8845176,"byte_end":8845180,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8845501,"byte_end":8845505,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8845874,"byte_end":8845878,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8846244,"byte_end":8846248,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847478,"byte_end":8847483,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847546,"byte_end":8847551,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847638,"byte_end":8847643,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847653,"byte_end":8847658,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848673,"byte_end":8848678,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848773,"byte_end":8848778,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848800,"byte_end":8848805,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848933,"byte_end":8848938,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8849538,"byte_end":8849543,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8849958,"byte_end":8849963,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8850409,"byte_end":8850414,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8850876,"byte_end":8850881,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8851296,"byte_end":8851301,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8851716,"byte_end":8851721,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8852189,"byte_end":8852194,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8852659,"byte_end":8852664,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854171,"byte_end":8854176,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854239,"byte_end":8854244,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854331,"byte_end":8854336,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854356,"byte_end":8854361,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854456,"byte_end":8854461,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854483,"byte_end":8854488,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854626,"byte_end":8854631,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854917,"byte_end":8854922,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8855219,"byte_end":8855224,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8855510,"byte_end":8855515,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8855812,"byte_end":8855817,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856103,"byte_end":8856108,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856405,"byte_end":8856410,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856696,"byte_end":8856701,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856995,"byte_end":8857000,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8857270,"byte_end":8857275,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8857610,"byte_end":8857615,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8858076,"byte_end":8858081,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8858575,"byte_end":8858580,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8859034,"byte_end":8859039,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8859505,"byte_end":8859510,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8859976,"byte_end":8859981,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8860439,"byte_end":8860444,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8860899,"byte_end":8860904,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862373,"byte_end":8862377,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862440,"byte_end":8862444,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862530,"byte_end":8862534,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862544,"byte_end":8862548,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863562,"byte_end":8863566,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863661,"byte_end":8863665,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863687,"byte_end":8863691,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863819,"byte_end":8863823,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8864421,"byte_end":8864425,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8864907,"byte_end":8864911,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8865412,"byte_end":8865416,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8865925,"byte_end":8865929,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8866410,"byte_end":8866414,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8866895,"byte_end":8866899,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8867412,"byte_end":8867416,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8867926,"byte_end":8867930,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869343,"byte_end":8869348,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869411,"byte_end":8869416,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869503,"byte_end":8869508,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869518,"byte_end":8869523,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870538,"byte_end":8870543,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870638,"byte_end":8870643,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870665,"byte_end":8870670,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870798,"byte_end":8870803,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8871403,"byte_end":8871408,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8871823,"byte_end":8871828,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8872274,"byte_end":8872279,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8872741,"byte_end":8872746,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8873161,"byte_end":8873166,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8873581,"byte_end":8873586,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8874054,"byte_end":8874059,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8874524,"byte_end":8874529,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876036,"byte_end":8876041,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876104,"byte_end":8876109,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876196,"byte_end":8876201,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876221,"byte_end":8876226,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876321,"byte_end":8876326,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876348,"byte_end":8876353,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876491,"byte_end":8876496,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876782,"byte_end":8876787,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877085,"byte_end":8877090,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877379,"byte_end":8877384,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877683,"byte_end":8877688,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877974,"byte_end":8877979,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8878276,"byte_end":8878281,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8878567,"byte_end":8878572,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8878871,"byte_end":8878876,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8879161,"byte_end":8879166,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8879511,"byte_end":8879516,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8879989,"byte_end":8879994,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8880500,"byte_end":8880505,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8880971,"byte_end":8880976,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8881462,"byte_end":8881467,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8881953,"byte_end":8881958,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8882428,"byte_end":8882433,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8882900,"byte_end":8882905,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922528,"byte_end":8922532,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922676,"byte_end":8922680,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922791,"byte_end":8922795,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922948,"byte_end":8922952,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923065,"byte_end":8923069,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923219,"byte_end":8923223,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923336,"byte_end":8923340,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923493,"byte_end":8923497,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923608,"byte_end":8923612,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923756,"byte_end":8923760,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923868,"byte_end":8923872,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924016,"byte_end":8924020,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924128,"byte_end":8924132,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924270,"byte_end":8924274,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924637,"byte_end":8924641,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924785,"byte_end":8924789,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924903,"byte_end":8924907,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021206,"byte_end":9021211,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021356,"byte_end":9021361,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021472,"byte_end":9021477,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021631,"byte_end":9021636,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021749,"byte_end":9021754,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021905,"byte_end":9021910,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022023,"byte_end":9022028,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022182,"byte_end":9022187,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022298,"byte_end":9022303,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022448,"byte_end":9022453,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022561,"byte_end":9022566,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022711,"byte_end":9022716,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022824,"byte_end":9022829,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022969,"byte_end":9022974,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9023338,"byte_end":9023343,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9023488,"byte_end":9023493,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9023607,"byte_end":9023612,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024022,"byte_end":9024027,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024181,"byte_end":9024186,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024299,"byte_end":9024304,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024455,"byte_end":9024460,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024573,"byte_end":9024578,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024732,"byte_end":9024737,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024848,"byte_end":9024853,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9025205,"byte_end":9025210,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9025554,"byte_end":9025559,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/lib.rs","byte_start":7091,"byte_end":7109,"line_start":133,"line_end":133,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841745,"byte_end":8841749,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":19}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841812,"byte_end":8841816,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":116}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841902,"byte_end":8841906,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":173}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8841916,"byte_end":8841920,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8842938,"byte_end":8842942,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843037,"byte_end":8843041,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843063,"byte_end":8843067,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843195,"byte_end":8843199,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8843797,"byte_end":8843801,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8844119,"byte_end":8844123,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8844482,"byte_end":8844486,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8973}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8844851,"byte_end":8844855,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8981}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8845176,"byte_end":8845180,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8983}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8845501,"byte_end":8845505,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8975}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8845874,"byte_end":8845878,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8977}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128_.rs","byte_start":8846244,"byte_end":8846248,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8971}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847478,"byte_end":8847483,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":19}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847546,"byte_end":8847551,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":116}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847638,"byte_end":8847643,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":173}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8847653,"byte_end":8847658,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848673,"byte_end":8848678,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848773,"byte_end":8848778,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848800,"byte_end":8848805,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8848933,"byte_end":8848938,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8849538,"byte_end":8849543,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8849958,"byte_end":8849963,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8850409,"byte_end":8850414,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8973}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8850876,"byte_end":8850881,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8981}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8851296,"byte_end":8851301,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8983}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8851716,"byte_end":8851721,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8975}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8852189,"byte_end":8852194,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8977}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128d_.rs","byte_start":8852659,"byte_end":8852664,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8971}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854171,"byte_end":8854176,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":19}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854239,"byte_end":8854244,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":116}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854331,"byte_end":8854336,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":173}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854356,"byte_end":8854361,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854456,"byte_end":8854461,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854483,"byte_end":8854488,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854626,"byte_end":8854631,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8854917,"byte_end":8854922,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8855219,"byte_end":8855224,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8855510,"byte_end":8855515,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8855812,"byte_end":8855817,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856103,"byte_end":8856108,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856405,"byte_end":8856410,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856696,"byte_end":8856701,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8856995,"byte_end":8857000,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8857270,"byte_end":8857275,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8857610,"byte_end":8857615,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8858076,"byte_end":8858081,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8858575,"byte_end":8858580,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8973}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8859034,"byte_end":8859039,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8981}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8859505,"byte_end":8859510,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8983}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8859976,"byte_end":8859981,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8975}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8860439,"byte_end":8860444,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8977}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m128i_.rs","byte_start":8860899,"byte_end":8860904,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8971}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862373,"byte_end":8862377,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":19}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862440,"byte_end":8862444,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":116}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862530,"byte_end":8862534,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":173}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8862544,"byte_end":8862548,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863562,"byte_end":8863566,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863661,"byte_end":8863665,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863687,"byte_end":8863691,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8863819,"byte_end":8863823,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8864421,"byte_end":8864425,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8864907,"byte_end":8864911,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8865412,"byte_end":8865416,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8973}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8865925,"byte_end":8865929,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8981}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8866410,"byte_end":8866414,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8983}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8866895,"byte_end":8866899,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8975}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8867412,"byte_end":8867416,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8977}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256_.rs","byte_start":8867926,"byte_end":8867930,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8971}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869343,"byte_end":8869348,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":19}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869411,"byte_end":8869416,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":116}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869503,"byte_end":8869508,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":173}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8869518,"byte_end":8869523,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870538,"byte_end":8870543,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870638,"byte_end":8870643,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870665,"byte_end":8870670,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8870798,"byte_end":8870803,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8871403,"byte_end":8871408,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8871823,"byte_end":8871828,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8872274,"byte_end":8872279,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8973}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8872741,"byte_end":8872746,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8981}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8873161,"byte_end":8873166,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8983}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8873581,"byte_end":8873586,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8975}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8874054,"byte_end":8874059,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8977}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256d_.rs","byte_start":8874524,"byte_end":8874529,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8971}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876036,"byte_end":8876041,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":19}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876104,"byte_end":8876109,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":116}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876196,"byte_end":8876201,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":173}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876221,"byte_end":8876226,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2501}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876321,"byte_end":8876326,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876348,"byte_end":8876353,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2858}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876491,"byte_end":8876496,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8876782,"byte_end":8876787,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877085,"byte_end":8877090,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877379,"byte_end":8877384,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877683,"byte_end":8877688,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8877974,"byte_end":8877979,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8878276,"byte_end":8878281,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8878567,"byte_end":8878572,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8878871,"byte_end":8878876,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8879161,"byte_end":8879166,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8879511,"byte_end":8879516,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8879989,"byte_end":8879994,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8969}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8880500,"byte_end":8880505,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8973}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8880971,"byte_end":8880976,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8981}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8881462,"byte_end":8881467,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8983}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8881953,"byte_end":8881958,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8975}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8882428,"byte_end":8882433,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8977}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/m256i_.rs","byte_start":8882900,"byte_end":8882905,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8971}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922528,"byte_end":8922532,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922676,"byte_end":8922680,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2978}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922791,"byte_end":8922795,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3003}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8922948,"byte_end":8922952,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3030}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923065,"byte_end":8923069,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3008}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923219,"byte_end":8923223,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3034}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923336,"byte_end":8923340,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3013}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923493,"byte_end":8923497,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3038}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923608,"byte_end":8923612,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923756,"byte_end":8923760,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2990}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8923868,"byte_end":8923872,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2957}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924016,"byte_end":8924020,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2986}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924128,"byte_end":8924132,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2974}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924270,"byte_end":8924274,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2999}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924637,"byte_end":8924641,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2952}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924785,"byte_end":8924789,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse.rs","byte_start":8924903,"byte_end":8924907,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2531}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021206,"byte_end":9021211,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021356,"byte_end":9021361,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2978}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021472,"byte_end":9021477,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3003}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021631,"byte_end":9021636,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3030}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021749,"byte_end":9021754,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3008}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9021905,"byte_end":9021910,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3034}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022023,"byte_end":9022028,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3013}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022182,"byte_end":9022187,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3038}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022298,"byte_end":9022303,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022448,"byte_end":9022453,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2990}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022561,"byte_end":9022566,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2957}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022711,"byte_end":9022716,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2986}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022824,"byte_end":9022829,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2974}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9022969,"byte_end":9022974,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2999}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9023338,"byte_end":9023343,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2952}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9023488,"byte_end":9023493,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9023607,"byte_end":9023612,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2531}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024022,"byte_end":9024027,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3003}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024181,"byte_end":9024186,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3030}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024299,"byte_end":9024304,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3008}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024455,"byte_end":9024460,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3034}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024573,"byte_end":9024578,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3013}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024732,"byte_end":9024737,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3038}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9024848,"byte_end":9024853,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2999}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9025205,"byte_end":9025210,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2531}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/safe_arch-0.6.0/src/x86_x64/sse2.rs","byte_start":9025554,"byte_end":9025559,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2536}}]}