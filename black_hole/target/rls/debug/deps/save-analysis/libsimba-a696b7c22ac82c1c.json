{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0","program":"/home/jtdinsmo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","simba","--edition=2018","/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","--cfg","feature=\"wide\"","-C","metadata=a696b7c22ac82c1c","-C","extra-filename=-a696b7c22ac82c1c","--out-dir","/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps","-L","dependency=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps","--extern","approx=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libapprox-a999a7d86da00985.rmeta","--extern","num_complex=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libnum_complex-a6c35f3d02cad663.rmeta","--extern","num_traits=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libnum_traits-da9fb01175db7df8.rmeta","--extern","paste=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libpaste-de9268735d9f3edf.so","--extern","wide=/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libwide-612ffcfea3914239.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/jtdinsmo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jtdinsmo/code/ray-tracing/black_hole/target/rls/debug/deps/libsimba-a696b7c22ac82c1c.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[1733624963126030616,0]},"crate_root":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src","external_crates":[{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8877259021289820030,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17664387582334346964,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15777239735188030211,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6931118634603707789,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1836679003453309343,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6793428100253957516,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6886380777913932080,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5166797399405618804,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15081119969799540083,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5636859111603542155,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2398051799168900592,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[12087602218788622031,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[10390304328721691412,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[8054568656405061402,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[525761968053022061,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[6926870891054481868,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[13304424612223349919,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[2957560935054177300,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","num":19,"id":{"name":"num_traits","disambiguator":[8306347318490872005,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","num":20,"id":{"name":"approx","disambiguator":[169888882231922642,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","num":21,"id":{"name":"num_complex","disambiguator":[846011006290131210,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","num":22,"id":{"name":"wide","disambiguator":[2970895607904115459,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","num":23,"id":{"name":"safe_arch","disambiguator":[1813307491341677036,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","num":24,"id":{"name":"bytemuck","disambiguator":[5193770890161118309,0]}},{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","num":25,"id":{"name":"paste","disambiguator":[68186463466746856,0]}}],"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2107,"byte_end":2119,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2143,"byte_end":2152,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2154,"byte_end":2163,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":231},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2165,"byte_end":2174,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2176,"byte_end":2185,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2187,"byte_end":2196,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2198,"byte_end":2203,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":62},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2303,"byte_end":2312,"line_start":7,"line_end":7,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2337,"byte_end":2345,"line_start":8,"line_end":8,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2347,"byte_end":2357,"line_start":8,"line_end":8,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55625,"byte_end":55626,"line_start":3,"line_end":3,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":576},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55720,"byte_end":55728,"line_start":6,"line_end":6,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":671},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55758,"byte_end":55774,"line_start":7,"line_end":7,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":741},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55803,"byte_end":55813,"line_start":8,"line_end":8,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":758},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55847,"byte_end":55861,"line_start":9,"line_end":9,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":797},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55888,"byte_end":55901,"line_start":10,"line_end":10,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":843},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55930,"byte_end":55940,"line_start":11,"line_end":11,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55969,"byte_end":55987,"line_start":12,"line_end":12,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":860},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55989,"byte_end":55998,"line_start":12,"line_end":12,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":43426},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":56057,"byte_end":56070,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WideBoolF32x4","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":43427},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":56057,"byte_end":56070,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WideBoolF32x4","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":43418},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":56072,"byte_end":56081,"line_start":14,"line_end":14,"column_start":47,"column_end":56},"alias_span":null,"name":"WideF32x4","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":43419},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":56072,"byte_end":56081,"line_start":14,"line_end":14,"column_start":47,"column_end":56},"alias_span":null,"name":"WideF32x4","value":"","parent":{"krate":0,"index":288}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":288}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"*\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. They types ure wrapper around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":86},{"krate":0,"index":189},{"krate":0,"index":254}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/mod.rs","byte_start":2032,"byte_end":2082,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2817,"byte_end":2826,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Signed + Bounded + PartialOrd","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2753,"byte_end":2783,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2784,"byte_end":2806,"line_start":14,"line_end":14,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3028,"byte_end":3044,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"pub fn is_sign_positive(&Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2975,"byte_end":3020,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3118,"byte_end":3134,"line_start":26,"line_end":26,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"pub fn is_sign_negative(&Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3065,"byte_end":3110,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3358,"byte_end":3366,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"copysign","qualname":"::scalar::real::RealField::copysign","value":"pub fn copysign(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Copies the sign of `self` to `to`.","sig":null,"attributes":[{"value":"/ Copies the sign of `self` to `to`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3155,"byte_end":3193,"line_start":27,"line_end":27,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3198,"byte_end":3201,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ - Returns `to.simd_abs()` if `self` is positive or positive-zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3206,"byte_end":3275,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/ - Returns `-to.simd_abs()` if `self` is negative or negative-zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3280,"byte_end":3350,"line_start":30,"line_end":30,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3400,"byte_end":3403,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3439,"byte_end":3442,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3478,"byte_end":3483,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"pub fn clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3528,"byte_end":3533,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"pub fn atan2(Self, Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3570,"byte_end":3572,"line_start":38,"line_end":38,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"pub fn pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3591,"byte_end":3597,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"pub fn two_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3616,"byte_end":3625,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3644,"byte_end":3653,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3672,"byte_end":3681,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3700,"byte_end":3709,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"pub fn frac_pi_6() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3728,"byte_end":3737,"line_start":44,"line_end":44,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"pub fn frac_pi_8() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3756,"byte_end":3765,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"pub fn frac_1_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3784,"byte_end":3793,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"pub fn frac_2_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3812,"byte_end":3826,"line_start":47,"line_end":47,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"pub fn frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3846,"byte_end":3847,"line_start":49,"line_end":49,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"pub fn e() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3866,"byte_end":3872,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"pub fn log2_e() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3891,"byte_end":3898,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"pub fn log10_e() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3917,"byte_end":3921,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"pub fn ln_2() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":3940,"byte_end":3945,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"pub fn ln_10() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":131},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14656,"byte_end":14668,"line_start":161,"line_end":161,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + Field<Element = Self, SimdBool = Self> +\nNeg<Output = Self> + Clone + Send + Sync + Any + 'static + Debug + Display","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14174,"byte_end":14251,"line_start":154,"line_end":154,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14252,"byte_end":14255,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14256,"byte_end":14356,"line_start":156,"line_end":156,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14357,"byte_end":14461,"line_start":157,"line_end":157,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14623,"byte_end":14645,"line_start":160,"line_end":160,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":132},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14924,"byte_end":14933,"line_start":176,"line_end":176,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14993,"byte_end":15002,"line_start":179,"line_end":179,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"pub fn is_finite(&Self) -> bool","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":15026,"byte_end":15034,"line_start":180,"line_end":180,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"pub fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":227},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46345,"byte_end":46354,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46261,"byte_end":46334,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":229},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46511,"byte_end":46520,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46427,"byte_end":46500,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":231},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46677,"byte_end":46686,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46593,"byte_end":46666,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":233},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46843,"byte_end":46852,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46759,"byte_end":46832,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":235},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46993,"byte_end":47002,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46925,"byte_end":46982,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":250},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47533,"byte_end":47538,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47456,"byte_end":47522,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":261},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49123,"byte_end":49131,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":47931,"byte_end":48025,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48026,"byte_end":48122,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48123,"byte_end":48215,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48216,"byte_end":48235,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48236,"byte_end":48239,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48240,"byte_end":48332,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48333,"byte_end":48424,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48425,"byte_end":48437,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48438,"byte_end":48534,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48535,"byte_end":48571,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48572,"byte_end":48670,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48671,"byte_end":48690,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48691,"byte_end":48787,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48788,"byte_end":48826,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48827,"byte_end":48830,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48831,"byte_end":48926,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":48927,"byte_end":49015,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49016,"byte_end":49112,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49237,"byte_end":49248,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"pub fn to_superset(&Self) -> T","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49148,"byte_end":49229,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49464,"byte_end":49477,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"pub fn from_superset(&T) -> Option<Self>","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49267,"byte_end":49361,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49366,"byte_end":49379,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49384,"byte_end":49387,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49392,"byte_end":49456,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49765,"byte_end":49788,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"pub fn from_superset_unchecked(&T) -> Self","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49662,"byte_end":49757,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49915,"byte_end":49927,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"pub fn is_in_subset(&T) -> bool","parent":{"krate":0,"index":261},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49816,"byte_end":49907,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":267},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51100,"byte_end":51110,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49953,"byte_end":50050,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50051,"byte_end":50139,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50140,"byte_end":50210,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50211,"byte_end":50214,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50215,"byte_end":50307,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50308,"byte_end":50399,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50400,"byte_end":50412,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50413,"byte_end":50509,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50510,"byte_end":50546,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50547,"byte_end":50644,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50645,"byte_end":50667,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50668,"byte_end":50764,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50765,"byte_end":50803,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50804,"byte_end":50807,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50808,"byte_end":50903,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50904,"byte_end":50992,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":50993,"byte_end":51089,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51324,"byte_end":51333,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"pub fn to_subset(&Self) -> Option<T>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51127,"byte_end":51221,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51226,"byte_end":51239,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51244,"byte_end":51247,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51252,"byte_end":51316,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51582,"byte_end":51594,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"pub fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51489,"byte_end":51574,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51717,"byte_end":51736,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"pub fn to_subset_unchecked(&Self) -> T","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51616,"byte_end":51709,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51844,"byte_end":51855,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"pub fn from_subset(&T) -> Self","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51755,"byte_end":51836,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":288},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":559},{"krate":0,"index":628},{"krate":0,"index":733},{"krate":0,"index":754},{"krate":0,"index":783},{"krate":0,"index":836},{"krate":0,"index":856},{"krate":0,"index":889}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"/ Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/mod.rs","byte_start":55537,"byte_end":55593,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2149},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58932,"byte_end":58940,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"AutoSimd","qualname":"::simd::auto_simd_impl::AutoSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58719,"byte_end":58803,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58804,"byte_end":58807,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58808,"byte_end":58856,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58857,"byte_end":58875,"line_start":42,"line_end":42,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2152},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58944,"byte_end":58949,"line_start":44,"line_end":44,"column_start":24,"column_end":29},"name":"0","qualname":"::simd::auto_simd_impl::AutoSimd::0","value":"N","parent":{"krate":0,"index":2149},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2172},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":59173,"byte_end":59185,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"AutoBoolSimd","qualname":"::simd::auto_simd_impl::AutoBoolSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":58952,"byte_end":59044,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":59045,"byte_end":59048,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":59049,"byte_end":59097,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":59098,"byte_end":59116,"line_start":48,"line_end":48,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2175},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":59189,"byte_end":59194,"line_start":50,"line_end":50,"column_start":28,"column_end":33},"name":"0","qualname":"::simd::auto_simd_impl::AutoBoolSimd::0","value":"N","parent":{"krate":0,"index":2172},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":430},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110280,"byte_end":110289,"line_start":1561,"line_end":1561,"column_start":10,"column_end":19},"name":"AutoF32x2","qualname":"::simd::auto_simd_impl::AutoF32x2","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110321,"byte_end":110330,"line_start":1562,"line_end":1562,"column_start":10,"column_end":19},"name":"AutoF32x4","qualname":"::simd::auto_simd_impl::AutoF32x4","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":434},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110362,"byte_end":110371,"line_start":1563,"line_end":1563,"column_start":10,"column_end":19},"name":"AutoF32x8","qualname":"::simd::auto_simd_impl::AutoF32x8","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":436},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110403,"byte_end":110413,"line_start":1564,"line_end":1564,"column_start":10,"column_end":20},"name":"AutoF32x16","qualname":"::simd::auto_simd_impl::AutoF32x16","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":438},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110446,"byte_end":110455,"line_start":1565,"line_end":1565,"column_start":10,"column_end":19},"name":"AutoF64x2","qualname":"::simd::auto_simd_impl::AutoF64x2","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":440},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110487,"byte_end":110496,"line_start":1566,"line_end":1566,"column_start":10,"column_end":19},"name":"AutoF64x4","qualname":"::simd::auto_simd_impl::AutoF64x4","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":442},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110528,"byte_end":110537,"line_start":1567,"line_end":1567,"column_start":10,"column_end":19},"name":"AutoF64x8","qualname":"::simd::auto_simd_impl::AutoF64x8","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110569,"byte_end":110579,"line_start":1568,"line_end":1568,"column_start":10,"column_end":20},"name":"AutoI128x1","qualname":"::simd::auto_simd_impl::AutoI128x1","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":446},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110612,"byte_end":110622,"line_start":1569,"line_end":1569,"column_start":10,"column_end":20},"name":"AutoI128x2","qualname":"::simd::auto_simd_impl::AutoI128x2","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":448},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110655,"byte_end":110665,"line_start":1570,"line_end":1570,"column_start":10,"column_end":20},"name":"AutoI128x4","qualname":"::simd::auto_simd_impl::AutoI128x4","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":450},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110698,"byte_end":110707,"line_start":1571,"line_end":1571,"column_start":10,"column_end":19},"name":"AutoI16x2","qualname":"::simd::auto_simd_impl::AutoI16x2","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":452},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110739,"byte_end":110748,"line_start":1572,"line_end":1572,"column_start":10,"column_end":19},"name":"AutoI16x4","qualname":"::simd::auto_simd_impl::AutoI16x4","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":454},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110780,"byte_end":110789,"line_start":1573,"line_end":1573,"column_start":10,"column_end":19},"name":"AutoI16x8","qualname":"::simd::auto_simd_impl::AutoI16x8","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":456},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110821,"byte_end":110831,"line_start":1574,"line_end":1574,"column_start":10,"column_end":20},"name":"AutoI16x16","qualname":"::simd::auto_simd_impl::AutoI16x16","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":458},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110864,"byte_end":110874,"line_start":1575,"line_end":1575,"column_start":10,"column_end":20},"name":"AutoI16x32","qualname":"::simd::auto_simd_impl::AutoI16x32","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":460},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110907,"byte_end":110916,"line_start":1576,"line_end":1576,"column_start":10,"column_end":19},"name":"AutoI32x2","qualname":"::simd::auto_simd_impl::AutoI32x2","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":462},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110948,"byte_end":110957,"line_start":1577,"line_end":1577,"column_start":10,"column_end":19},"name":"AutoI32x4","qualname":"::simd::auto_simd_impl::AutoI32x4","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":464},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":110989,"byte_end":110998,"line_start":1578,"line_end":1578,"column_start":10,"column_end":19},"name":"AutoI32x8","qualname":"::simd::auto_simd_impl::AutoI32x8","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":466},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111030,"byte_end":111040,"line_start":1579,"line_end":1579,"column_start":10,"column_end":20},"name":"AutoI32x16","qualname":"::simd::auto_simd_impl::AutoI32x16","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":468},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111073,"byte_end":111082,"line_start":1580,"line_end":1580,"column_start":10,"column_end":19},"name":"AutoI64x2","qualname":"::simd::auto_simd_impl::AutoI64x2","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":470},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111114,"byte_end":111123,"line_start":1581,"line_end":1581,"column_start":10,"column_end":19},"name":"AutoI64x4","qualname":"::simd::auto_simd_impl::AutoI64x4","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":472},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111155,"byte_end":111164,"line_start":1582,"line_end":1582,"column_start":10,"column_end":19},"name":"AutoI64x8","qualname":"::simd::auto_simd_impl::AutoI64x8","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":474},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111196,"byte_end":111204,"line_start":1583,"line_end":1583,"column_start":10,"column_end":18},"name":"AutoI8x2","qualname":"::simd::auto_simd_impl::AutoI8x2","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":476},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111235,"byte_end":111243,"line_start":1584,"line_end":1584,"column_start":10,"column_end":18},"name":"AutoI8x4","qualname":"::simd::auto_simd_impl::AutoI8x4","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":478},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111274,"byte_end":111282,"line_start":1585,"line_end":1585,"column_start":10,"column_end":18},"name":"AutoI8x8","qualname":"::simd::auto_simd_impl::AutoI8x8","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":480},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111313,"byte_end":111322,"line_start":1586,"line_end":1586,"column_start":10,"column_end":19},"name":"AutoI8x16","qualname":"::simd::auto_simd_impl::AutoI8x16","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":482},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111354,"byte_end":111363,"line_start":1587,"line_end":1587,"column_start":10,"column_end":19},"name":"AutoI8x32","qualname":"::simd::auto_simd_impl::AutoI8x32","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":484},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111439,"byte_end":111450,"line_start":1589,"line_end":1589,"column_start":10,"column_end":21},"name":"AutoIsizex2","qualname":"::simd::auto_simd_impl::AutoIsizex2","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111484,"byte_end":111495,"line_start":1590,"line_end":1590,"column_start":10,"column_end":21},"name":"AutoIsizex4","qualname":"::simd::auto_simd_impl::AutoIsizex4","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":488},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111529,"byte_end":111540,"line_start":1591,"line_end":1591,"column_start":10,"column_end":21},"name":"AutoIsizex8","qualname":"::simd::auto_simd_impl::AutoIsizex8","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":490},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111574,"byte_end":111584,"line_start":1592,"line_end":1592,"column_start":10,"column_end":20},"name":"AutoU128x1","qualname":"::simd::auto_simd_impl::AutoU128x1","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":492},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111617,"byte_end":111627,"line_start":1593,"line_end":1593,"column_start":10,"column_end":20},"name":"AutoU128x2","qualname":"::simd::auto_simd_impl::AutoU128x2","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":494},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111660,"byte_end":111670,"line_start":1594,"line_end":1594,"column_start":10,"column_end":20},"name":"AutoU128x4","qualname":"::simd::auto_simd_impl::AutoU128x4","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":496},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111703,"byte_end":111712,"line_start":1595,"line_end":1595,"column_start":10,"column_end":19},"name":"AutoU16x2","qualname":"::simd::auto_simd_impl::AutoU16x2","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":498},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111744,"byte_end":111753,"line_start":1596,"line_end":1596,"column_start":10,"column_end":19},"name":"AutoU16x4","qualname":"::simd::auto_simd_impl::AutoU16x4","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111785,"byte_end":111794,"line_start":1597,"line_end":1597,"column_start":10,"column_end":19},"name":"AutoU16x8","qualname":"::simd::auto_simd_impl::AutoU16x8","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":502},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111826,"byte_end":111836,"line_start":1598,"line_end":1598,"column_start":10,"column_end":20},"name":"AutoU16x16","qualname":"::simd::auto_simd_impl::AutoU16x16","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":504},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111869,"byte_end":111879,"line_start":1599,"line_end":1599,"column_start":10,"column_end":20},"name":"AutoU16x32","qualname":"::simd::auto_simd_impl::AutoU16x32","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":506},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111912,"byte_end":111921,"line_start":1600,"line_end":1600,"column_start":10,"column_end":19},"name":"AutoU32x2","qualname":"::simd::auto_simd_impl::AutoU32x2","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":508},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111953,"byte_end":111962,"line_start":1601,"line_end":1601,"column_start":10,"column_end":19},"name":"AutoU32x4","qualname":"::simd::auto_simd_impl::AutoU32x4","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":111994,"byte_end":112003,"line_start":1602,"line_end":1602,"column_start":10,"column_end":19},"name":"AutoU32x8","qualname":"::simd::auto_simd_impl::AutoU32x8","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":512},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112035,"byte_end":112045,"line_start":1603,"line_end":1603,"column_start":10,"column_end":20},"name":"AutoU32x16","qualname":"::simd::auto_simd_impl::AutoU32x16","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112078,"byte_end":112087,"line_start":1604,"line_end":1604,"column_start":10,"column_end":19},"name":"AutoU64x2","qualname":"::simd::auto_simd_impl::AutoU64x2","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112119,"byte_end":112128,"line_start":1605,"line_end":1605,"column_start":10,"column_end":19},"name":"AutoU64x4","qualname":"::simd::auto_simd_impl::AutoU64x4","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":518},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112160,"byte_end":112169,"line_start":1606,"line_end":1606,"column_start":10,"column_end":19},"name":"AutoU64x8","qualname":"::simd::auto_simd_impl::AutoU64x8","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112201,"byte_end":112209,"line_start":1607,"line_end":1607,"column_start":10,"column_end":18},"name":"AutoU8x2","qualname":"::simd::auto_simd_impl::AutoU8x2","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":522},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112240,"byte_end":112248,"line_start":1608,"line_end":1608,"column_start":10,"column_end":18},"name":"AutoU8x4","qualname":"::simd::auto_simd_impl::AutoU8x4","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":524},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112279,"byte_end":112287,"line_start":1609,"line_end":1609,"column_start":10,"column_end":18},"name":"AutoU8x8","qualname":"::simd::auto_simd_impl::AutoU8x8","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":526},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112318,"byte_end":112327,"line_start":1610,"line_end":1610,"column_start":10,"column_end":19},"name":"AutoU8x16","qualname":"::simd::auto_simd_impl::AutoU8x16","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":528},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112359,"byte_end":112368,"line_start":1611,"line_end":1611,"column_start":10,"column_end":19},"name":"AutoU8x32","qualname":"::simd::auto_simd_impl::AutoU8x32","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":530},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112444,"byte_end":112455,"line_start":1613,"line_end":1613,"column_start":10,"column_end":21},"name":"AutoUsizex2","qualname":"::simd::auto_simd_impl::AutoUsizex2","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112489,"byte_end":112500,"line_start":1614,"line_end":1614,"column_start":10,"column_end":21},"name":"AutoUsizex4","qualname":"::simd::auto_simd_impl::AutoUsizex4","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":534},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112534,"byte_end":112545,"line_start":1615,"line_end":1615,"column_start":10,"column_end":21},"name":"AutoUsizex8","qualname":"::simd::auto_simd_impl::AutoUsizex8","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":536},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112580,"byte_end":112590,"line_start":1617,"line_end":1617,"column_start":10,"column_end":20},"name":"AutoBoolx1","qualname":"::simd::auto_simd_impl::AutoBoolx1","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":538},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112623,"byte_end":112634,"line_start":1618,"line_end":1618,"column_start":10,"column_end":21},"name":"AutoBoolx16","qualname":"::simd::auto_simd_impl::AutoBoolx16","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":540},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112668,"byte_end":112678,"line_start":1619,"line_end":1619,"column_start":10,"column_end":20},"name":"AutoBoolx2","qualname":"::simd::auto_simd_impl::AutoBoolx2","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":542},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112711,"byte_end":112722,"line_start":1620,"line_end":1620,"column_start":10,"column_end":21},"name":"AutoBoolx32","qualname":"::simd::auto_simd_impl::AutoBoolx32","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":544},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112756,"byte_end":112766,"line_start":1621,"line_end":1621,"column_start":10,"column_end":20},"name":"AutoBoolx4","qualname":"::simd::auto_simd_impl::AutoBoolx4","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":546},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112847,"byte_end":112857,"line_start":1623,"line_end":1623,"column_start":10,"column_end":20},"name":"AutoBoolx8","qualname":"::simd::auto_simd_impl::AutoBoolx8","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":576},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115559,"byte_end":115567,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> + BitXor<Self,\nOutput = Self> + Not<Output = Self>","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":588},{"krate":0,"index":594}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115266,"byte_end":115323,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115324,"byte_end":115327,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115328,"byte_end":115421,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115422,"byte_end":115516,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115517,"byte_end":115548,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115882,"byte_end":115889,"line_start":19,"line_end":19,"column_start":8,"column_end":15},"name":"bitmask","qualname":"::simd::simd_bool::SimdBool::bitmask","value":"pub fn bitmask(Self) -> u64","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" A bit mask representing the boolean state of each lanes of `self`.","sig":null,"attributes":[{"value":"/ A bit mask representing the boolean state of each lanes of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115710,"byte_end":115780,"line_start":16,"line_end":16,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115785,"byte_end":115788,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ The `i-th` bit of the result is `1` iff. the `i-th` lane of `self` is `true`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115793,"byte_end":115874,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115965,"byte_end":115968,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"pub fn and(Self) -> bool","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115908,"byte_end":115957,"line_start":20,"line_end":20,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116044,"byte_end":116046,"line_start":23,"line_end":23,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"pub fn or(Self) -> bool","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115988,"byte_end":116036,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116123,"byte_end":116126,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"pub fn xor(Self) -> bool","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116066,"byte_end":116115,"line_start":24,"line_end":24,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116184,"byte_end":116187,"line_start":27,"line_end":27,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"pub fn all(Self) -> bool","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116146,"byte_end":116176,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116243,"byte_end":116246,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"pub fn any(Self) -> bool","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116207,"byte_end":116235,"line_start":28,"line_end":28,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116305,"byte_end":116309,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"pub fn none(Self) -> bool","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116266,"byte_end":116297,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116799,"byte_end":116806,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"pub fn if_else<Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce()\n               -> Res, impl FnOnce() -> Res: FnOnce() ->\n               Res>(Self, impl FnOnce() -> Res, impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116329,"byte_end":116418,"line_start":32,"line_end":32,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116423,"byte_end":116426,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116431,"byte_end":116540,"line_start":34,"line_end":34,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116545,"byte_end":116656,"line_start":35,"line_end":35,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116661,"byte_end":116664,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116669,"byte_end":116775,"line_start":37,"line_end":37,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116780,"byte_end":116791,"line_start":38,"line_end":38,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117683,"byte_end":117691,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"pub fn if_else2<Res: SimdValue<SimdBool = Self>,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Res: FnOnce() ->\n                Res>(Self, impl FnOnce() -> Res,\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":116956,"byte_end":117081,"line_start":45,"line_end":45,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117086,"byte_end":117089,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117094,"byte_end":117203,"line_start":47,"line_end":47,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117208,"byte_end":117380,"line_start":48,"line_end":48,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117385,"byte_end":117558,"line_start":49,"line_end":49,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117563,"byte_end":117566,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117571,"byte_end":117675,"line_start":51,"line_end":51,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118768,"byte_end":118776,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"pub fn if_else3<Res: SimdValue<SimdBool = Self>,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Res: FnOnce() ->\n                Res>(Self, impl FnOnce() -> Res,\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":117905,"byte_end":118076,"line_start":59,"line_end":59,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118081,"byte_end":118084,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118089,"byte_end":118198,"line_start":61,"line_end":61,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118203,"byte_end":118375,"line_start":62,"line_end":62,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118380,"byte_end":118566,"line_start":63,"line_end":63,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118571,"byte_end":118643,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118648,"byte_end":118651,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":118656,"byte_end":118760,"line_start":66,"line_end":66,"column_start":5,"column_end":109}}]},{"kind":"Trait","id":{"krate":0,"index":671},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121207,"byte_end":121223,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Clone + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":43200},{"krate":0,"index":43201},{"krate":0,"index":43202},{"krate":0,"index":43203},{"krate":0,"index":43204},{"krate":0,"index":43205},{"krate":0,"index":43206},{"krate":0,"index":43207},{"krate":0,"index":43208},{"krate":0,"index":43209},{"krate":0,"index":43210},{"krate":0,"index":43211},{"krate":0,"index":43212},{"krate":0,"index":43213},{"krate":0,"index":43214},{"krate":0,"index":43215},{"krate":0,"index":43216},{"krate":0,"index":43217},{"krate":0,"index":43218},{"krate":0,"index":43219},{"krate":0,"index":43220},{"krate":0,"index":43221},{"krate":0,"index":43222},{"krate":0,"index":43223},{"krate":0,"index":43224},{"krate":0,"index":43225},{"krate":0,"index":43226},{"krate":0,"index":43227},{"krate":0,"index":43228},{"krate":0,"index":43229},{"krate":0,"index":43230},{"krate":0,"index":43231},{"krate":0,"index":43232},{"krate":0,"index":43233},{"krate":0,"index":43234},{"krate":0,"index":43235},{"krate":0,"index":43236},{"krate":0,"index":43237},{"krate":0,"index":43238},{"krate":0,"index":43239},{"krate":0,"index":43240},{"krate":0,"index":43241},{"krate":0,"index":43242},{"krate":0,"index":43243},{"krate":0,"index":43244},{"krate":0,"index":43245},{"krate":0,"index":43246},{"krate":0,"index":43247},{"krate":0,"index":43248},{"krate":0,"index":43249},{"krate":0,"index":43250},{"krate":0,"index":43251},{"krate":0,"index":43252},{"krate":0,"index":673},{"krate":0,"index":674}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121024,"byte_end":121096,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121097,"byte_end":121100,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121101,"byte_end":121173,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121174,"byte_end":121196,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":672},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121534,"byte_end":121547,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121475,"byte_end":121524,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121717,"byte_end":121736,"line_start":36,"line_end":36,"column_start":8,"column_end":27},"name":"simd_horizontal_sum","qualname":"::simd::simd_complex::SimdComplexField::simd_horizontal_sum","value":"pub fn simd_horizontal_sum(Self) -> Self::Element","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":" Computes the sum of all the lanes of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the sum of all the lanes of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121661,"byte_end":121709,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121826,"byte_end":121849,"line_start":39,"line_end":39,"column_start":8,"column_end":31},"name":"simd_horizontal_product","qualname":"::simd::simd_complex::SimdComplexField::simd_horizontal_product","value":"pub fn simd_horizontal_product(Self) -> Self::Element","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":" Computes the product of all the lanes of `self`.\n","sig":null,"attributes":[{"value":"/ Computes the product of all the lanes of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121766,"byte_end":121818,"line_start":38,"line_end":38,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":127955,"byte_end":127965,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":127893,"byte_end":127943,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128176,"byte_end":128179,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"pub fn new(V, V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128059,"byte_end":128164,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128317,"byte_end":128321,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"pub fn mask(&Self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128261,"byte_end":128305,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128430,"byte_end":128435,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"pub fn value(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128375,"byte_end":128418,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128704,"byte_end":128710,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"pub fn option(Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128480,"byte_end":128532,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128537,"byte_end":128540,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128545,"byte_end":128626,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128631,"byte_end":128692,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129003,"byte_end":129014,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"pub fn simd_unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128843,"byte_end":128914,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128919,"byte_end":128922,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128927,"byte_end":128977,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128982,"byte_end":128991,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129724,"byte_end":129738,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"pub fn simd_unwrap_or<impl FnOnce() -> V: FnOnce() ->\n                      V>(Self, impl FnOnce() -> V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129189,"byte_end":129246,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129251,"byte_end":129254,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129259,"byte_end":129388,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129393,"byte_end":129517,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129522,"byte_end":129525,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129530,"byte_end":129650,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129655,"byte_end":129690,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":129695,"byte_end":129712,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":758},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":129946,"byte_end":129960,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":129861,"byte_end":129935,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130029,"byte_end":130036,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"pub fn simd_gt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":129978,"byte_end":130021,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130127,"byte_end":130134,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"pub fn simd_lt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130079,"byte_end":130119,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130233,"byte_end":130240,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"pub fn simd_ge(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130177,"byte_end":130225,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130336,"byte_end":130343,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"pub fn simd_le(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130283,"byte_end":130328,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130431,"byte_end":130438,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"pub fn simd_eq(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130386,"byte_end":130423,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130530,"byte_end":130537,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"pub fn simd_ne(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130481,"byte_end":130522,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130612,"byte_end":130620,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"pub fn simd_max(Self, Self) -> Self","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130581,"byte_end":130604,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130684,"byte_end":130692,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"pub fn simd_min(Self, Self) -> Self","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130653,"byte_end":130676,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130814,"byte_end":130824,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"pub fn simd_clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the corresponding lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the corresponding lane of `min` and `max`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130725,"byte_end":130806,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130919,"byte_end":130938,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_min","value":"pub fn simd_horizontal_min(Self) -> Self::Element","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" The min value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The min value among all lanes of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130867,"byte_end":130911,"line_start":25,"line_end":25,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":131019,"byte_end":131038,"line_start":28,"line_end":28,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_max","value":"pub fn simd_horizontal_max(Self) -> Self::Element","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" The max value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The max value among all lanes of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":130967,"byte_end":131011,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":797},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132880,"byte_end":132893,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132607,"byte_end":132665,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132666,"byte_end":132669,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132670,"byte_end":132736,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132737,"byte_end":132846,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132847,"byte_end":132869,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133183,"byte_end":133196,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"::simd::simd_real::SimdRealField::simd_copysign","value":"pub fn simd_copysign(Self, Self) -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Copies the sign of `sign` to `self`.","sig":null,"attributes":[{"value":"/ Copies the sign of `sign` to `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132974,"byte_end":133014,"line_start":12,"line_end":12,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133019,"byte_end":133022,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ - Returns `self.simd_abs()` if `sign` is positive or positive-zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133027,"byte_end":133098,"line_start":14,"line_end":14,"column_start":5,"column_end":76}},{"value":"/ - Returns `-self.simd_abs()` if `sign` is negative or negative-zero.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133103,"byte_end":133175,"line_start":15,"line_end":15,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133231,"byte_end":133241,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"pub fn simd_atan2(Self, Self) -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133278,"byte_end":133298,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"pub fn simd_default_epsilon() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133317,"byte_end":133324,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"pub fn simd_pi() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133343,"byte_end":133354,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"pub fn simd_two_pi() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133373,"byte_end":133387,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"pub fn simd_frac_pi_2() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133406,"byte_end":133420,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"pub fn simd_frac_pi_3() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133439,"byte_end":133453,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"pub fn simd_frac_pi_4() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133472,"byte_end":133486,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"pub fn simd_frac_pi_6() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133505,"byte_end":133519,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"pub fn simd_frac_pi_8() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133538,"byte_end":133552,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"pub fn simd_frac_1_pi() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133571,"byte_end":133585,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"pub fn simd_frac_2_pi() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133604,"byte_end":133623,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"pub fn simd_frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133643,"byte_end":133649,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"pub fn simd_e() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133668,"byte_end":133679,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"pub fn simd_log2_e() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133698,"byte_end":133710,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"pub fn simd_log10_e() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133729,"byte_end":133738,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"pub fn simd_ln_2() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133757,"byte_end":133767,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"pub fn simd_ln_10() -> Self","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":843},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135620,"byte_end":135630,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135489,"byte_end":135609,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135702,"byte_end":135710,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"pub fn simd_abs(&Self) -> Self","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135648,"byte_end":135694,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136001,"byte_end":136013,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"pub fn simd_abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135731,"byte_end":135782,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135787,"byte_end":135790,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135795,"byte_end":135900,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135905,"byte_end":135993,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136094,"byte_end":136105,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"pub fn simd_signum(&Self) -> Self","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136048,"byte_end":136086,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136167,"byte_end":136183,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"pub fn is_simd_positive(&Self) -> Self::SimdBool","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136126,"byte_end":136159,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136255,"byte_end":136271,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"pub fn is_simd_negative(&Self) -> Self::SimdBool","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136214,"byte_end":136247,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":860},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":136932,"byte_end":136941,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":872}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":136885,"byte_end":136921,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":861},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137026,"byte_end":137033,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":136955,"byte_end":137016,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":862},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137166,"byte_end":137174,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137092,"byte_end":137156,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137242,"byte_end":137247,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"pub fn lanes() -> usize","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137191,"byte_end":137234,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137331,"byte_end":137336,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"pub fn splat(Self::Element) -> Self","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137264,"byte_end":137323,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137463,"byte_end":137470,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"pub fn extract(&Self, usize) -> Self::Element","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137370,"byte_end":137407,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137412,"byte_end":137415,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137420,"byte_end":137455,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137585,"byte_end":137602,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"pub unsafe fn extract_unchecked(&Self, usize) -> Self::Element","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137510,"byte_end":137570,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137744,"byte_end":137751,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"pub fn replace(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137642,"byte_end":137688,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137693,"byte_end":137696,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137701,"byte_end":137736,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137882,"byte_end":137899,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"pub unsafe fn replace_unchecked(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137798,"byte_end":137867,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138249,"byte_end":138255,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"pub fn select(Self, Self::SimdBool, Self) -> Self","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":137947,"byte_end":138010,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138015,"byte_end":138018,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138023,"byte_end":138129,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138134,"byte_end":138241,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138581,"byte_end":138590,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"pub fn map_lanes<impl Fn(Self::Element) -> Self::Element: Fn(Self::Element) ->\n                 Self::Element>(Self, impl Fn(Self::Element) -> Self::Element)\n-> Self where Self: Clone","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138311,"byte_end":138357,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138362,"byte_end":138365,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138370,"byte_end":138444,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138449,"byte_end":138525,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138530,"byte_end":138551,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138556,"byte_end":138573,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139192,"byte_end":139205,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"pub fn zip_map_lanes<impl Fn(Self::Element, Self::Element) -> Self::Element: Fn(Self::Element,\n                                                                                Self::Element)\n                     ->\n                     Self::Element>(Self, Self,\n                                    impl Fn(Self::Element, Self::Element) -> Self::Element)\n-> Self where Self: Clone","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138880,"byte_end":138968,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138973,"byte_end":138976,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":138981,"byte_end":139055,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139060,"byte_end":139136,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139141,"byte_end":139162,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139167,"byte_end":139184,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":874},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":140025,"byte_end":140043,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139654,"byte_end":139729,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139730,"byte_end":139733,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139734,"byte_end":139811,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139812,"byte_end":139898,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139899,"byte_end":139988,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":139989,"byte_end":140014,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":43418},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143845,"byte_end":143854,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"WideF32x4","qualname":"::simd::wide_simd_impl::WideF32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type of `wide::f32x4` that implements all the relevant traits from `num` and `simba`.","sig":null,"attributes":[{"value":"/ A wrapper type of `wide::f32x4` that implements all the relevant traits from `num` and `simba`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143630,"byte_end":143729,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143730,"byte_end":143733,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143734,"byte_end":143782,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143783,"byte_end":143803,"line_start":25,"line_end":25,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43420},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143855,"byte_end":143870,"line_start":27,"line_end":27,"column_start":22,"column_end":37},"name":"0","qualname":"::simd::wide_simd_impl::WideF32x4::0","value":"wide::f32x4","parent":{"krate":0,"index":43418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":43426},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144101,"byte_end":144114,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"WideBoolF32x4","qualname":"::simd::wide_simd_impl::WideBoolF32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":" An SIMD boolean structure associated to `wide::f32x4` that implements all the relevant traits from `simba`.","sig":null,"attributes":[{"value":"/ An SIMD boolean structure associated to `wide::f32x4` that implements all the relevant traits from `simba`.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143874,"byte_end":143985,"line_start":29,"line_end":29,"column_start":1,"column_end":112}},{"value":"/","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143986,"byte_end":143989,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":143990,"byte_end":144038,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"repr(transparent)","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144039,"byte_end":144059,"line_start":32,"line_end":32,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":43428},"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144115,"byte_end":144130,"line_start":34,"line_end":34,"column_start":26,"column_end":41},"name":"0","qualname":"::simd::wide_simd_impl::WideBoolF32x4::0","value":"wide::f32x4","parent":{"krate":0,"index":43426},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":32009,"byte_end":32016,"line_start":1034,"line_end":1034,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47071,"byte_end":47072,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47163,"byte_end":47164,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47255,"byte_end":47256,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47347,"byte_end":47348,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47425,"byte_end":47426,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47652,"byte_end":47659,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51927,"byte_end":51929,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":54145,"byte_end":54152,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121970,"byte_end":121971,"line_start":43,"line_end":43,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128039,"byte_end":128049,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":131147,"byte_end":131148,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133862,"byte_end":133863,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136361,"byte_end":136362,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":140112,"byte_end":140119,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":141542,"byte_end":141549,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144162,"byte_end":144171,"line_start":36,"line_end":36,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144203,"byte_end":144216,"line_start":37,"line_end":37,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144226,"byte_end":144235,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1015},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144837,"byte_end":144850,"line_start":64,"line_end":64,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":145012,"byte_end":145021,"line_start":74,"line_end":74,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":146071,"byte_end":146084,"line_start":118,"line_end":118,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147409,"byte_end":147418,"line_start":168,"line_end":168,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147526,"byte_end":147539,"line_start":175,"line_end":175,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147641,"byte_end":147654,"line_start":182,"line_end":182,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147770,"byte_end":147783,"line_start":191,"line_end":191,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147919,"byte_end":147932,"line_start":200,"line_end":200,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":148068,"byte_end":148081,"line_start":209,"line_end":209,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":148220,"byte_end":148233,"line_start":218,"line_end":218,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":151559,"byte_end":151568,"line_start":337,"line_end":337,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":151842,"byte_end":151851,"line_start":351,"line_end":351,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":152252,"byte_end":152265,"line_start":373,"line_end":373,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":152629,"byte_end":152642,"line_start":386,"line_end":386,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":153031,"byte_end":153040,"line_start":408,"line_end":408,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":153299,"byte_end":153308,"line_start":417,"line_end":417,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":154689,"byte_end":154698,"line_start":479,"line_end":479,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":154898,"byte_end":154907,"line_start":491,"line_end":491,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155025,"byte_end":155034,"line_start":498,"line_end":498,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155184,"byte_end":155193,"line_start":507,"line_end":507,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155343,"byte_end":155352,"line_start":516,"line_end":516,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155502,"byte_end":155511,"line_start":525,"line_end":525,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155661,"byte_end":155670,"line_start":534,"line_end":534,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155837,"byte_end":155846,"line_start":543,"line_end":543,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155976,"byte_end":155985,"line_start":550,"line_end":550,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156115,"byte_end":156124,"line_start":557,"line_end":557,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156254,"byte_end":156263,"line_start":564,"line_end":564,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156393,"byte_end":156402,"line_start":571,"line_end":571,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156531,"byte_end":156540,"line_start":578,"line_end":578,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158017,"byte_end":158026,"line_start":636,"line_end":636,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158154,"byte_end":158163,"line_start":645,"line_end":645,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158792,"byte_end":158801,"line_start":673,"line_end":673,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158829,"byte_end":158838,"line_start":675,"line_end":675,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":160836,"byte_end":160845,"line_start":768,"line_end":768,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":166724,"byte_end":166731,"line_start":1032,"line_end":1032,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":288}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2832,"byte_end":2844,"line_start":16,"line_end":16,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":131},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2869,"byte_end":2879,"line_start":17,"line_end":17,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":20,"index":76},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2902,"byte_end":2908,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":20,"index":120},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2931,"byte_end":2937,"line_start":19,"line_end":19,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":19,"index":765},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2944,"byte_end":2951,"line_start":20,"line_end":20,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":19,"index":226},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/real.rs","byte_start":2958,"byte_end":2968,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2578},"to":{"krate":0,"index":62}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14674,"byte_end":14682,"line_start":162,"line_end":162,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":261},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14695,"byte_end":14705,"line_start":163,"line_end":163,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":267},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14717,"byte_end":14722,"line_start":164,"line_end":164,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":250},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14762,"byte_end":14765,"line_start":165,"line_end":165,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2974},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14787,"byte_end":14792,"line_start":166,"line_end":166,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2501},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14847,"byte_end":14851,"line_start":169,"line_end":169,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2880},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14858,"byte_end":14862,"line_start":170,"line_end":170,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2892},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14869,"byte_end":14872,"line_start":171,"line_end":171,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3543},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14893,"byte_end":14898,"line_start":173,"line_end":173,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":8962},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":14905,"byte_end":14912,"line_start":174,"line_end":174,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":8969},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/complex.rs","byte_start":32009,"byte_end":32016,"line_start":1034,"line_end":1034,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46370,"byte_end":46375,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46378,"byte_end":46381,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2947},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46406,"byte_end":46415,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2978},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46536,"byte_end":46541,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":229}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46544,"byte_end":46547,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2952},"to":{"krate":0,"index":229}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46572,"byte_end":46581,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2982},"to":{"krate":0,"index":229}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46702,"byte_end":46707,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":231}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46710,"byte_end":46713,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2957},"to":{"krate":0,"index":231}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46738,"byte_end":46747,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2986},"to":{"krate":0,"index":231}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46868,"byte_end":46873,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":233}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46876,"byte_end":46879,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2962},"to":{"krate":0,"index":233}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":46904,"byte_end":46913,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2990},"to":{"krate":0,"index":233}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47004,"byte_end":47009,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47012,"byte_end":47015,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2974},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47071,"byte_end":47072,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":237},"to":{"krate":0,"index":227}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47163,"byte_end":47164,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":240},"to":{"krate":0,"index":229}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47255,"byte_end":47256,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":243},"to":{"krate":0,"index":231}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47347,"byte_end":47348,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":246},"to":{"krate":0,"index":233}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47425,"byte_end":47426,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":249},"to":{"krate":0,"index":235}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47540,"byte_end":47549,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":860},"to":{"krate":0,"index":250}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47552,"byte_end":47561,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":19,"index":817},"to":{"krate":0,"index":250}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47564,"byte_end":47573,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":235},"to":{"krate":0,"index":250}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/field.rs","byte_start":47652,"byte_end":47659,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":250}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":49136,"byte_end":49141,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51115,"byte_end":51120,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":267}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":51927,"byte_end":51929,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":275},"to":{"krate":0,"index":267}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/scalar/subset.rs","byte_start":54145,"byte_end":54152,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/auto_simd_impl.rs","byte_start":112948,"byte_end":112957,"line_start":1628,"line_end":1628,"column_start":21,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":860},"to":{"krate":0,"index":548}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115573,"byte_end":115577,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":2890},"to":{"krate":0,"index":576}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115584,"byte_end":115590,"line_start":11,"line_end":11,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":3003},"to":{"krate":0,"index":576}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115618,"byte_end":115623,"line_start":12,"line_end":12,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":3008},"to":{"krate":0,"index":576}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115651,"byte_end":115657,"line_start":13,"line_end":13,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":3013},"to":{"krate":0,"index":576}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_bool.rs","byte_start":115685,"byte_end":115688,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2999},"to":{"krate":0,"index":576}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121229,"byte_end":121237,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":261},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121250,"byte_end":121260,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":267},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121272,"byte_end":121277,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":250},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121284,"byte_end":121289,"line_start":18,"line_end":18,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2501},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121296,"byte_end":121299,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2974},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121369,"byte_end":121373,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2880},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121380,"byte_end":121384,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2892},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121391,"byte_end":121394,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3543},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121415,"byte_end":121420,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":8962},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121427,"byte_end":121439,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":19,"index":812},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121446,"byte_end":121452,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":19,"index":793},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121459,"byte_end":121468,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2531},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_complex.rs","byte_start":121970,"byte_end":121971,"line_start":43,"line_end":43,"column_start":44,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":676},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_option.rs","byte_start":128039,"byte_end":128049,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":129962,"byte_end":129971,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":860},"to":{"krate":0,"index":758}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_partial_ord.rs","byte_start":131147,"byte_end":131148,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":771},"to":{"krate":0,"index":758}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132899,"byte_end":132913,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":758},"to":{"krate":0,"index":797}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132916,"byte_end":132926,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":843},"to":{"krate":0,"index":797}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":132929,"byte_end":132945,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":671},"to":{"krate":0,"index":797}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_real.rs","byte_start":133862,"byte_end":133863,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":817},"to":{"krate":0,"index":797}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":135632,"byte_end":135641,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":860},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_signed.rs","byte_start":136361,"byte_end":136362,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":850},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":136943,"byte_end":136948,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2885},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":140045,"byte_end":140049,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2890},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":140052,"byte_end":140061,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":860},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":140112,"byte_end":140119,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":169}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/simd_value.rs","byte_start":141542,"byte_end":141549,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":170}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144162,"byte_end":144171,"line_start":36,"line_end":36,"column_start":29,"column_end":38},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144203,"byte_end":144216,"line_start":37,"line_end":37,"column_start":29,"column_end":42},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":43426},"to":{"krate":0,"index":874}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144226,"byte_end":144235,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":43418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":144837,"byte_end":144850,"line_start":64,"line_end":64,"column_start":6,"column_end":19},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":43426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":145012,"byte_end":145021,"line_start":74,"line_end":74,"column_start":20,"column_end":29},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":146071,"byte_end":146084,"line_start":118,"line_end":118,"column_start":20,"column_end":33},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":43426},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147409,"byte_end":147418,"line_start":168,"line_end":168,"column_start":20,"column_end":29},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2531}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147526,"byte_end":147539,"line_start":175,"line_end":175,"column_start":20,"column_end":33},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":43426},"to":{"krate":2,"index":2531}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147641,"byte_end":147654,"line_start":182,"line_end":182,"column_start":14,"column_end":27},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":43426},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147770,"byte_end":147783,"line_start":191,"line_end":191,"column_start":17,"column_end":30},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":43426},"to":{"krate":2,"index":3013}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":147919,"byte_end":147932,"line_start":200,"line_end":200,"column_start":16,"column_end":29},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":43426},"to":{"krate":2,"index":3008}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":148068,"byte_end":148081,"line_start":209,"line_end":209,"column_start":17,"column_end":30},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":43426},"to":{"krate":2,"index":3003}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":148220,"byte_end":148233,"line_start":218,"line_end":218,"column_start":19,"column_end":32},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":43426},"to":{"krate":0,"index":576}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":151559,"byte_end":151568,"line_start":337,"line_end":337,"column_start":25,"column_end":34},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":151842,"byte_end":151851,"line_start":351,"line_end":351,"column_start":30,"column_end":39},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":152252,"byte_end":152265,"line_start":373,"line_end":373,"column_start":26,"column_end":39},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":43426},"to":{"krate":2,"index":2786}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":152629,"byte_end":152642,"line_start":386,"line_end":386,"column_start":34,"column_end":47},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":43426},"to":{"krate":0,"index":261}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":153031,"byte_end":153040,"line_start":408,"line_end":408,"column_start":14,"column_end":23},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":43418},"to":{"krate":19,"index":790}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":153299,"byte_end":153308,"line_start":417,"line_end":417,"column_start":24,"column_end":33},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":43418},"to":{"krate":19,"index":316}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":154689,"byte_end":154698,"line_start":479,"line_end":479,"column_start":15,"column_end":24},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":43418},"to":{"krate":19,"index":445}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":154898,"byte_end":154907,"line_start":491,"line_end":491,"column_start":14,"column_end":23},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":43418},"to":{"krate":19,"index":455}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155025,"byte_end":155034,"line_start":498,"line_end":498,"column_start":25,"column_end":34},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2947}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155184,"byte_end":155193,"line_start":507,"line_end":507,"column_start":25,"column_end":34},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2952}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155343,"byte_end":155352,"line_start":516,"line_end":516,"column_start":25,"column_end":34},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2957}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155502,"byte_end":155511,"line_start":525,"line_end":525,"column_start":25,"column_end":34},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2962}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155661,"byte_end":155670,"line_start":534,"line_end":534,"column_start":25,"column_end":34},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2968}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155837,"byte_end":155846,"line_start":543,"line_end":543,"column_start":31,"column_end":40},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2978}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":155976,"byte_end":155985,"line_start":550,"line_end":550,"column_start":31,"column_end":40},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156115,"byte_end":156124,"line_start":557,"line_end":557,"column_start":31,"column_end":40},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2990}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156254,"byte_end":156263,"line_start":564,"line_end":564,"column_start":31,"column_end":40},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2986}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156393,"byte_end":156402,"line_start":571,"line_end":571,"column_start":31,"column_end":40},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":156531,"byte_end":156540,"line_start":578,"line_end":578,"column_start":25,"column_end":34},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":758}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158017,"byte_end":158026,"line_start":636,"line_end":636,"column_start":14,"column_end":23},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":43418},"to":{"krate":2,"index":2974}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158154,"byte_end":158163,"line_start":645,"line_end":645,"column_start":21,"column_end":30},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158792,"byte_end":158801,"line_start":673,"line_end":673,"column_start":16,"column_end":25},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":250}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":158829,"byte_end":158838,"line_start":675,"line_end":675,"column_start":24,"column_end":33},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":797}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":160836,"byte_end":160845,"line_start":768,"line_end":768,"column_start":27,"column_end":36},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":43418},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/jtdinsmo/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.6.0/src/simd/wide_simd_impl.rs","byte_start":166724,"byte_end":166731,"line_start":1032,"line_end":1032,"column_start":40,"column_end":47},"kind":{"Impl":{"id":250}},"from":{"krate":21,"index":523},"to":{"krate":0,"index":671}}]}